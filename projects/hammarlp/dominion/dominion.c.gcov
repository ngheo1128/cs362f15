        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:68
        -:    0:Programs:68
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
    #####:   10:int compare(const void* a, const void* b) {
    #####:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
    #####:   13:  if (*(int*)a < *(int*)b)
    #####:   14:    return -1;
    #####:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
        9:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
        9:   25:  int* k = malloc(10 * sizeof(int));
        9:   26:  k[0] = k1;
        9:   27:  k[1] = k2;
        9:   28:  k[2] = k3;
        9:   29:  k[3] = k4;
        9:   30:  k[4] = k5;
        9:   31:  k[5] = k6;
        9:   32:  k[6] = k7;
        9:   33:  k[7] = k8;
        9:   34:  k[8] = k9;
        9:   35:  k[9] = k10;
        9:   36:  return k;
        -:   37:}
        -:   38:
    #####:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
    #####:   46:  SelectStream(1);
    #####:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
    #####:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
    #####:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
    #####:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
    #####:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
    #####:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
    #####:   75:  if (numPlayers == 2)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
    #####:   89:  if (numPlayers == 2)
        -:   90:    {
    #####:   91:      state->supplyCount[estate] = 8;
    #####:   92:      state->supplyCount[duchy] = 8;
    #####:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
    #####:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  104:  state->supplyCount[silver] = 40;
    #####:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    #####:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
    #####:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
    #####:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
    #####:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    #####:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
    #####:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
    #####:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    #####:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
    #####:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
    #####:  142:      state->deckCount[i] = 0;
    #####:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
    #####:  145:	  state->deck[i][j] = estate;
    #####:  146:	  state->deckCount[i]++;
        -:  147:	}
    #####:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
    #####:  150:	  state->deck[i][j] = copper;
    #####:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
    #####:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
    #####:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
    #####:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
    #####:  168:      state->handCount[i] = 0;
    #####:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
    #####:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
    #####:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
    #####:  184:  state->outpostPlayed = 0;
    #####:  185:  state->phase = 0;
    #####:  186:  state->numActions = 1;
    #####:  187:  state->numBuys = 1;
    #####:  188:  state->playedCardCount = 0;
    #####:  189:  state->whoseTurn = 0;
    #####:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  194:  for (it = 0; it < 5; it++){
    #####:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
    #####:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
    #####:  200:  return 0;
        -:  201:}
        -:  202:
       18:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       18:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       18:  211:  if (state->deckCount[player] < 1)
        6:  212:    return -1;
       12:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       36:  216:  while (state->deckCount[player] > 0) {
       12:  217:    card = floor(Random() * state->deckCount[player]);
       12:  218:    newDeck[newDeckPos] = state->deck[player][card];
       12:  219:    newDeckPos++;
       12:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       12:  223:    state->deckCount[player]--;
        -:  224:  }
       24:  225:  for (i = 0; i < newDeckPos; i++) {
       12:  226:    state->deck[player][i] = newDeck[i];
       12:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       12:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
       36:  348:int whoseTurn(struct gameState *state) {
       36:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
       27:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
       27:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
       18:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        9:  403:  j = 0;
      234:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      225:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
        9:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        9:  416:  return 0;
        -:  417:}
        -:  418:
        9:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
        9:  422:  int score = 0;
        -:  423:  //score from hand
       36:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
       27:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
       27:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
       27:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
       27:  429:      if (state->hand[player][i] == province) { score = score + 6; };
       27:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       27:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
       27:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
       18:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
       18:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
       18:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
       18:  440:      if (state->discard[player][i] == province) { score = score + 6; };
       18:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       18:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
       27:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
       18:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
       18:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
       18:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
       18:  451:      if (state->deck[player][i] == province) { score = score + 6; };
       18:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       18:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
        9:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
       76:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       76:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
       12:  535:    for (i = 0; i < state->discardCount[player];i++){
        6:  536:      state->deck[player][i] = state->discard[player][i];
        6:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
        6:  540:    state->deckCount[player] = state->discardCount[player];
        6:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        6:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        6:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        6:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        6:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        6:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
        6:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        6:  565:    state->deckCount[player]--;
        6:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       70:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       70:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       70:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       70:  578:    state->deckCount[player]--;
       70:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       76:  582:  return 0;
        -:  583:}
        -:  584:
       12:  585:void adventurerCard(struct gameState *state){
        -:  586:	
       12:  587:	int currentPlayer = whoseTurn(state);
        -:  588:
       12:  589:	int drawntreasure=0;
        -:  590:	int temphand[MAX_HAND];
        -:  591:	int cardDrawn;
        -:  592:	
       12:  593:	int z = 0;// this is the counter for the temp hand
        -:  594:
       60:  595:	while(drawntreasure<2){
       36:  596:		if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
       12:  597:			shuffle(currentPlayer, state);
        -:  598:		}
        -:  599:
       36:  600:		drawCard(currentPlayer, state);
       36:  601:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  602:
       36:  603:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       24:  604:			drawntreasure++;
        -:  605:		else{
       12:  606:			temphand[z]=cardDrawn;
       12:  607:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       12:  608:			z++;
        -:  609:		}
        -:  610:	}
       36:  611:	while(z-1>=0){
       12:  612:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       12:  613:		z=z-1;
        -:  614:	}
       12:  615:}
        -:  616:
        8:  617:void smithyCard(struct gameState *state, int handPos){
        -:  618:	int i;
        8:  619:	int currentPlayer = whoseTurn(state);
        -:  620:
        -:  621:	//+3 Cards
       40:  622:      	for (i = 0; i <= 3; i++)
        -:  623:	{
       32:  624:	  drawCard(currentPlayer, state);
        -:  625:	}
        -:  626:			
        -:  627:      	//discard card from hand
        8:  628:      	discardCard(handPos, currentPlayer, state, 0);
        8:  629:}
        -:  630:
        8:  631:void villageCard(struct gameState *state, int handPos){
        8:  632:	int currentPlayer = whoseTurn(state);
        -:  633:
        -:  634://+1 Card
        8:  635:      drawCard(currentPlayer, state);
        -:  636:			
        -:  637:      //+2 Actions
        8:  638:      state->numActions = state->numActions + 1;
        -:  639:			
        -:  640:      //discard played card from hand
        8:  641:      discardCard(handPos, currentPlayer, state, 0);
        8:  642:}
        -:  643:
        8:  644:int embargoCard(struct gameState *state, int handPos, int choice1){
        8:  645:	int currentPlayer = whoseTurn(state);
        -:  646:
        -:  647://+2 Coins
        8:  648:      state->coins = state->coins + 2;
        -:  649:			
        -:  650:      //see if selected pile is in play
        8:  651:      if ( state->supplyCount[choice1] == -1 )
        -:  652:	{
    #####:  653:	  return -1;
        -:  654:	}
        -:  655:			
        -:  656:      //add embargo token to selected supply pile
        8:  657:      state->embargoTokens[choice1]++;
        -:  658:			
        -:  659:      //trash card
        8:  660:      discardCard(handPos, currentPlayer, state, 1);
        -:  661:
        8:  662:	return 0;
        -:  663:}
        -:  664:
    #####:  665:void salvagerCard(struct gameState *state, int handPos, int choice1){
    #####:  666:  int currentPlayer = whoseTurn(state);
        -:  667:
        -:  668://+1 buy
    #####:  669:      state->numBuys--;
        -:  670:			
    #####:  671:      if (choice1)
        -:  672:	{
        -:  673:	  //gain coins equal to trashed card
    #####:  674:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  675:	  //trash card
    #####:  676:	  discardCard(choice1, currentPlayer, state, 1);	
        -:  677:	}
        -:  678:			
        -:  679:      //discard card
    #####:  680:      discardCard(handPos, currentPlayer, state, 0);
    #####:  681:}
        -:  682:
    #####:  683:int getCost(int cardNumber)
        -:  684:{
    #####:  685:  switch( cardNumber ) 
        -:  686:    {
        -:  687:    case curse:
    #####:  688:      return 0;
        -:  689:    case estate:
    #####:  690:      return 2;
        -:  691:    case duchy:
    #####:  692:      return 5;
        -:  693:    case province:
    #####:  694:      return 8;
        -:  695:    case copper:
    #####:  696:      return 0;
        -:  697:    case silver:
    #####:  698:      return 3;
        -:  699:    case gold:
    #####:  700:      return 6;
        -:  701:    case adventurer:
    #####:  702:      return 6;
        -:  703:    case council_room:
    #####:  704:      return 5;
        -:  705:    case feast:
    #####:  706:      return 4;
        -:  707:    case gardens:
    #####:  708:      return 4;
        -:  709:    case mine:
    #####:  710:      return 5;
        -:  711:    case remodel:
    #####:  712:      return 4;
        -:  713:    case smithy:
    #####:  714:      return 4;
        -:  715:    case village:
    #####:  716:      return 3;
        -:  717:    case baron:
    #####:  718:      return 4;
        -:  719:    case great_hall:
    #####:  720:      return 3;
        -:  721:    case minion:
    #####:  722:      return 5;
        -:  723:    case steward:
    #####:  724:      return 3;
        -:  725:    case tribute:
    #####:  726:      return 5;
        -:  727:    case ambassador:
    #####:  728:      return 3;
        -:  729:    case cutpurse:
    #####:  730:      return 4;
        -:  731:    case embargo: 
    #####:  732:      return 2;
        -:  733:    case outpost:
    #####:  734:      return 5;
        -:  735:    case salvager:
    #####:  736:      return 4;
        -:  737:    case sea_hag:
    #####:  738:      return 4;
        -:  739:    case treasure_map:
    #####:  740:      return 4;
        -:  741:    }
        -:  742:	
    #####:  743:  return -1;
        -:  744:}
        -:  745:
    #####:  746:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  747:{
        -:  748:  int i;
        -:  749:  int j;
        -:  750:  int k;
        -:  751:  int x;
        -:  752:  int index;
    #####:  753:  int currentPlayer = whoseTurn(state);
    #####:  754:  int nextPlayer = currentPlayer + 1;
        -:  755:
    #####:  756:  int tributeRevealedCards[2] = {-1, -1};
        -:  757:  int temphand[MAX_HAND];// moved above the if statement
        -:  758:  //int drawntreasure=0;
        -:  759:  //int cardDrawn;
        -:  760:  //int z = 0;// this is the counter for the temp hand
    #####:  761:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  762:    nextPlayer = 0;
        -:  763:  }
        -:  764:  
        -:  765:	
        -:  766:  //uses switch to select card and perform actions
    #####:  767:  switch( card ) 
        -:  768:    {
        -:  769:    case adventurer:
    #####:  770:      adventurerCard(state);
    #####:  771:      return 0;
        -:  772:			
        -:  773:    case council_room:
        -:  774:      //+4 Cards
    #####:  775:      for (i = 0; i < 4; i++)
        -:  776:	{
    #####:  777:	  drawCard(currentPlayer, state);
        -:  778:	}
        -:  779:			
        -:  780:      //+1 Buy
    #####:  781:      state->numBuys++;
        -:  782:			
        -:  783:      //Each other player draws a card
    #####:  784:      for (i = 0; i < state->numPlayers; i++)
        -:  785:	{
    #####:  786:	  if ( i != currentPlayer )
        -:  787:	    {
    #####:  788:	      drawCard(i, state);
        -:  789:	    }
        -:  790:	}
        -:  791:			
        -:  792:      //put played card in played card pile
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
        -:  794:			
    #####:  795:      return 0;
        -:  796:			
        -:  797:    case feast:
        -:  798:      //gain card with cost up to 5
        -:  799:      //Backup hand
    #####:  800:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  801:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  802:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  803:      }
        -:  804:      //Backup hand
        -:  805:
        -:  806:      //Update Coins for Buy
    #####:  807:      updateCoins(currentPlayer, state, 5);
    #####:  808:      x = 1;//Condition to loop on
    #####:  809:      while( x == 1) {//Buy one card
    #####:  810:	if (supplyCount(choice1, state) <= 0){
        -:  811:	  if (DEBUG)
        -:  812:	    printf("None of that card left, sorry!\n");
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:	  }
        -:  817:	}
    #####:  818:	else if (state->coins < getCost(choice1)){
    #####:  819:	  printf("That card is too expensive!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  823:	  }
        -:  824:	}
        -:  825:	else{
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  829:	  }
        -:  830:
    #####:  831:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  832:	  x = 0;//No more buying cards
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
        -:  838:	}
        -:  839:      }     
        -:  840:
        -:  841:      //Reset Hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	state->hand[currentPlayer][i] = temphand[i];
    #####:  844:	temphand[i] = -1;
        -:  845:      }
        -:  846:      //Reset Hand
        -:  847:      			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:
    #####:  896:      gainCard(choice2, state, 0, currentPlayer);
        -:  897:
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
        -:  900:
        -:  901:      //discard trashed card
    #####:  902:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  903:	{
    #####:  904:	  if (state->hand[currentPlayer][i] == j)
        -:  905:	    {
    #####:  906:	      discardCard(i, currentPlayer, state, 0);			
    #####:  907:	      break;
        -:  908:	    }
        -:  909:	}
        -:  910:
        -:  911:
    #####:  912:      return 0;
        -:  913:		
        -:  914:    case smithy:
    #####:  915:      smithyCard(state, handPos);
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case village:
    #####:  919:      villageCard(state, handPos);
    #####:  920:      return 0;
        -:  921:		
        -:  922:    case baron:
    #####:  923:      state->numBuys++;//Increase buys by 1!
    #####:  924:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  925:	int p = 0;//Iterator for hand!
    #####:  926:	int card_not_discarded = 1;//Flag for discard set!
    #####:  927:	while(card_not_discarded){
    #####:  928:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  929:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  930:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  931:	    state->discardCount[currentPlayer]++;
    #####:  932:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  933:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  934:	    }
    #####:  935:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  936:	    state->handCount[currentPlayer]--;
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
    #####:  939:	  else if (p > state->handCount[currentPlayer]){
        -:  940:	    if(DEBUG) {
        -:  941:	      printf("No estate cards in your hand, invalid choice\n");
        -:  942:	      printf("Must gain an estate if there are any\n");
        -:  943:	    }
    #####:  944:	    if (supplyCount(estate, state) > 0){
    #####:  945:	      gainCard(estate, state, 0, currentPlayer);
    #####:  946:	      state->supplyCount[estate]--;//Decrement estates
    #####:  947:	      if (supplyCount(estate, state) == 0){
    #####:  948:		isGameOver(state);
        -:  949:	      }
        -:  950:	    }
    #####:  951:	    card_not_discarded = 0;//Exit the loop
        -:  952:	  }
        -:  953:			    
        -:  954:	  else{
    #####:  955:	    p++;//Next card
        -:  956:	  }
        -:  957:	}
        -:  958:      }
        -:  959:			    
        -:  960:      else{
    #####:  961:	if (supplyCount(estate, state) > 0){
    #####:  962:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  963:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  964:	  if (supplyCount(estate, state) == 0){
    #####:  965:	    isGameOver(state);
        -:  966:	  }
        -:  967:	}
        -:  968:      }
        -:  969:	    
        -:  970:      
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case great_hall:
        -:  974:      //+1 Card
    #####:  975:      drawCard(currentPlayer, state);
        -:  976:			
        -:  977:      //+1 Actions
    #####:  978:      state->numActions++;
        -:  979:			
        -:  980:      //discard card from hand
    #####:  981:      discardCard(handPos, currentPlayer, state, 0);
    #####:  982:      return 0;
        -:  983:		
        -:  984:    case minion:
        -:  985:      //+1 action
    #####:  986:      state->numActions++;
        -:  987:			
        -:  988:      //discard card from hand
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);
        -:  990:			
    #####:  991:      if (choice1)		//+2 coins
        -:  992:	{
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:			
    #####:  996:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  997:	{
        -:  998:	  //discard hand
    #####:  999:	  while(numHandCards(state) > 0)
        -: 1000:	    {
    #####: 1001:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1002:	    }
        -: 1003:				
        -: 1004:	  //draw 4
    #####: 1005:	  for (i = 0; i < 4; i++)
        -: 1006:	    {
    #####: 1007:	      drawCard(currentPlayer, state);
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //other players discard hand and redraw if hand size > 4
    #####: 1011:	  for (i = 0; i < state->numPlayers; i++)
        -: 1012:	    {
    #####: 1013:	      if (i != currentPlayer)
        -: 1014:		{
    #####: 1015:		  if ( state->handCount[i] > 4 )
        -: 1016:		    {
        -: 1017:		      //discard hand
    #####: 1018:		      while( state->handCount[i] > 0 )
        -: 1019:			{
    #####: 1020:			  discardCard(handPos, i, state, 0);
        -: 1021:			}
        -: 1022:							
        -: 1023:		      //draw 4
    #####: 1024:		      for (j = 0; j < 4; j++)
        -: 1025:			{
    #####: 1026:			  drawCard(i, state);
        -: 1027:			}
        -: 1028:		    }
        -: 1029:		}
        -: 1030:	    }
        -: 1031:				
        -: 1032:	}
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case steward:
    #####: 1036:      if (choice1 == 1)
        -: 1037:	{
        -: 1038:	  //+2 cards
    #####: 1039:	  drawCard(currentPlayer, state);
    #####: 1040:	  drawCard(currentPlayer, state);
        -: 1041:	}
    #####: 1042:      else if (choice1 == 2)
        -: 1043:	{
        -: 1044:	  //+2 coins
    #####: 1045:	  state->coins = state->coins + 2;
        -: 1046:	}
        -: 1047:      else
        -: 1048:	{
        -: 1049:	  //trash 2 cards in hand
    #####: 1050:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1051:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1052:	}
        -: 1053:			
        -: 1054:      //discard card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case tribute:
    #####: 1059:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1060:	if (state->deckCount[nextPlayer] > 0){
    #####: 1061:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	  state->deckCount[nextPlayer]--;
        -: 1063:	}
    #####: 1064:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1065:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1066:	  state->discardCount[nextPlayer]--;
        -: 1067:	}
        -: 1068:	else{
        -: 1069:	  //No Card to Reveal
        -: 1070:	  if (DEBUG){
        -: 1071:	    printf("No cards to reveal\n");
        -: 1072:	  }
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
        -: 1076:      else{
    #####: 1077:	if (state->deckCount[nextPlayer] == 0){
    #####: 1078:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1079:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1080:	    state->deckCount[nextPlayer]++;
    #####: 1081:	    state->discard[nextPlayer][i] = -1;
    #####: 1082:	    state->discardCount[nextPlayer]--;
        -: 1083:	  }
        -: 1084:			    
    #####: 1085:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1086:	} 
    #####: 1087:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:	state->deckCount[nextPlayer]--;
    #####: 1090:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1091:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1092:	state->deckCount[nextPlayer]--;
        -: 1093:      }    
        -: 1094:		       
    #####: 1095:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1096:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1097:	state->playedCardCount++;
    #####: 1098:	tributeRevealedCards[1] = -1;
        -: 1099:      }
        -: 1100:
    #####: 1101:      for (i = 0; i <= 2; i ++){
    #####: 1102:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1103:	  state->coins += 2;
        -: 1104:	}
        -: 1105:		    
    #####: 1106:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1107:	  drawCard(currentPlayer, state);
    #####: 1108:	  drawCard(currentPlayer, state);
        -: 1109:	}
        -: 1110:	else{//Action Card
    #####: 1111:	  state->numActions = state->numActions + 2;
        -: 1112:	}
        -: 1113:      }
        -: 1114:	    
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case ambassador:
    #####: 1118:      j = 0;		//used to check if player has enough cards to discard
        -: 1119:
    #####: 1120:      if (choice2 > 2 || choice2 < 0)
        -: 1121:	{
    #####: 1122:	  return -1;				
        -: 1123:	}
        -: 1124:
    #####: 1125:      if (choice1 == handPos)
        -: 1126:	{
    #####: 1127:	  return -1;
        -: 1128:	}
        -: 1129:
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	{
    #####: 1132:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1133:	    {
    #####: 1134:	      j++;
        -: 1135:	    }
        -: 1136:	}
    #####: 1137:      if (j < choice2)
        -: 1138:	{
    #####: 1139:	  return -1;				
        -: 1140:	}
        -: 1141:
        -: 1142:      if (DEBUG) 
        -: 1143:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1144:
        -: 1145:      //increase supply count for choosen card by amount being discarded
    #####: 1146:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1147:			
        -: 1148:      //each other player gains a copy of revealed card
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
        -: 1152:	    {
        -: 1153:
    #####: 1154:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1155:	    }
        -: 1156:	}
        -: 1157:
        -: 1158:      //discard played card from hand
    #####: 1159:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1160:
        -: 1161:      //trash copies of cards returned to supply
    #####: 1162:      for (j = 0; j < choice2; j++)
        -: 1163:	{
    #####: 1164:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1165:	    {
    #####: 1166:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1167:		{
    #####: 1168:		  discardCard(i, currentPlayer, state, 1);
    #####: 1169:		  break;
        -: 1170:		}
        -: 1171:	    }
        -: 1172:	}			
        -: 1173:
    #####: 1174:      return 0;
        -: 1175:		
        -: 1176:    case cutpurse:
        -: 1177:
    #####: 1178:      updateCoins(currentPlayer, state, 2);
    #####: 1179:      for (i = 0; i < state->numPlayers; i++)
        -: 1180:	{
    #####: 1181:	  if (i != currentPlayer)
        -: 1182:	    {
    #####: 1183:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1184:		{
    #####: 1185:		  if (state->hand[i][j] == copper)
        -: 1186:		    {
    #####: 1187:		      discardCard(j, i, state, 0);
    #####: 1188:		      break;
        -: 1189:		    }
    #####: 1190:		  if (j == state->handCount[i])
        -: 1191:		    {
    #####: 1192:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1193:			{
        -: 1194:			  if (DEBUG)
        -: 1195:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1196:			}	
    #####: 1197:		      break;
        -: 1198:		    }		
        -: 1199:		}
        -: 1200:					
        -: 1201:	    }
        -: 1202:				
        -: 1203:	}				
        -: 1204:
        -: 1205:      //discard played card from hand
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1207:
    #####: 1208:      return 0;
        -: 1209:
        -: 1210:		
        -: 1211:    case embargo: 
    #####: 1212:      if(embargoCard(state, handPos, choice1) == -1){
    #####: 1213:		return -1;
        -: 1214:	} else {
    #####: 1215:      return 0;
        -: 1216:	}
        -: 1217:		
        -: 1218:    case outpost:
        -: 1219:      //set outpost flag
    #####: 1220:      state->outpostPlayed++;
        -: 1221:			
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case salvager:
    #####: 1227:      salvagerCard(state, handPos, choice1);
    #####: 1228:      return 0;
        -: 1229:		
        -: 1230:    case sea_hag:
    #####: 1231:      for (i = 0; i < state->numPlayers; i++){
    #####: 1232:	if (i != currentPlayer){
    #####: 1233:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1234:	  state->discardCount[i]++;
    #####: 1235:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1236:	}
        -: 1237:      }
    #####: 1238:      return 0;
        -: 1239:		
        -: 1240:    case treasure_map:
        -: 1241:      //search hand for another treasure_map
    #####: 1242:      index = -1;
    #####: 1243:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1244:	{
    #####: 1245:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1246:	    {
    #####: 1247:	      index = i;
    #####: 1248:	      break;
        -: 1249:	    }
        -: 1250:	}
    #####: 1251:      if (index > -1)
        -: 1252:	{
        -: 1253:	  //trash both treasure cards
    #####: 1254:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1255:	  discardCard(index, currentPlayer, state, 1);
        -: 1256:
        -: 1257:	  //gain 4 Gold cards
    #####: 1258:	  for (i = 0; i < 4; i++)
        -: 1259:	    {
    #####: 1260:	      gainCard(gold, state, 1, currentPlayer);
        -: 1261:	    }
        -: 1262:				
        -: 1263:	  //return success
    #####: 1264:	  return 1;
        -: 1265:	}
        -: 1266:			
        -: 1267:      //no second treasure_map found in hand
    #####: 1268:      return -1;
        -: 1269:    }
        -: 1270:	
    #####: 1271:  return -1;
        -: 1272:}
        -: 1273:
       24: 1274:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1275:{
        -: 1276:	
        -: 1277:  //if card is not trashed, added to Played pile 
       24: 1278:  if (trashFlag < 1)
        -: 1279:    {
        -: 1280:      //add card to played pile
       16: 1281:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       16: 1282:      state->playedCardCount++;
        -: 1283:    }
        -: 1284:	
        -: 1285:  //set played card to -1
       24: 1286:  state->hand[currentPlayer][handPos] = -1;
        -: 1287:	
        -: 1288:  //remove card from player's hand
       24: 1289:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
       24: 1294:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
    #####: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:  else 	
        -: 1300:    {
        -: 1301:      //replace discarded card with last card in hand
       24: 1302:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1303:      //set last card to -1
       24: 1304:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1305:      //reduce number of cards in hand
       24: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:	
       24: 1309:  return 0;
        -: 1310:}
        -: 1311:
    #####: 1312:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1313:{
        -: 1314:  //Note: supplyPos is enum of choosen card
        -: 1315:	
        -: 1316:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1317:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1318:    {
    #####: 1319:      return -1;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //added card for [whoseTurn] current player:
        -: 1323:  // toFlag = 0 : add to discard
        -: 1324:  // toFlag = 1 : add to deck
        -: 1325:  // toFlag = 2 : add to hand
        -: 1326:
    #####: 1327:  if (toFlag == 1)
        -: 1328:    {
    #####: 1329:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1330:      state->deckCount[player]++;
        -: 1331:    }
    #####: 1332:  else if (toFlag == 2)
        -: 1333:    {
    #####: 1334:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1335:      state->handCount[player]++;
        -: 1336:    }
        -: 1337:  else
        -: 1338:    {
    #####: 1339:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1340:      state->discardCount[player]++;
        -: 1341:    }
        -: 1342:	
        -: 1343:  //decrease number in supply pile
    #####: 1344:  state->supplyCount[supplyPos]--;
        -: 1345:	 
    #####: 1346:  return 0;
        -: 1347:}
        -: 1348:
        9: 1349:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1350:{
        -: 1351:  int i;
        -: 1352:	
        -: 1353:  //reset coin count
        9: 1354:  state->coins = 0;
        -: 1355:
        -: 1356:  //add coins for each Treasure card in player's hand
       36: 1357:  for (i = 0; i < state->handCount[player]; i++)
        -: 1358:    {
       27: 1359:      if (state->hand[player][i] == copper)
        -: 1360:	{
        9: 1361:	  state->coins += 1;
        -: 1362:	}
       18: 1363:      else if (state->hand[player][i] == silver)
        -: 1364:	{
    #####: 1365:	  state->coins += 2;
        -: 1366:	}
       18: 1367:      else if (state->hand[player][i] == gold)
        -: 1368:	{
        9: 1369:	  state->coins += 3;
        -: 1370:	}	
        -: 1371:    }	
        -: 1372:
        -: 1373:  //add bonus
        9: 1374:  state->coins += bonus;
        -: 1375:
        9: 1376:  return 0;
        -: 1377:}
        -: 1378:
        -: 1379:
        -: 1380://end of dominion.c
        -: 1381:
