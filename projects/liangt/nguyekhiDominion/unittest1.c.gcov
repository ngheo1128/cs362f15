        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:- I write the test for initializedGame function, I test with the invalid inputs and check the return values of the function to see if
        -:    3:it equal to -1. Then I test the valid input, and put all the condition statement that test the corrected output of the function. If
        -:    4:there is an errors, it will display test fail message. But apparently all the test passed and so the function is working properly.
        -:    5:I am pretty sure I cover all the lines in the initializedGame function, because I test all the valid and invalid inputs.
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <math.h>
        -:   15:
function main called 1 returned 100% blocks executed 70%
        1:   16:int main (int argc, char* argv[])
        -:   17:{
        1:   18:    printf("Testing initializeGame() function.\n");
        1:   18-block  0
call    0 returned 1
        -:   19:    struct gameState G;
        -:   20:    // corrected kingdom card array k
        1:   21:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   22:
        -:   23:    // these kingdom card array contains some errors for testing
        1:   24:    int dupK[10] = {adventurer, gardens, embargo, village, gardens, mine, cutpurse, sea_hag, tribute, smithy};
        -:   25:
        -:   26:    int numPlayers;
        6:   27:    for (numPlayers = 1; numPlayers <=5; numPlayers++)
unconditional  0 taken 1
        5:   27-block  0
unconditional  1 taken 5
        6:   27-block  1
branch  2 taken 5
branch  3 taken 1 (fallthrough)
        -:   28:    {
        5:   29:        if (numPlayers == 1)
        5:   29-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        -:   30:        {
        1:   31:            printf("Testing number of player = 1.\n");
        1:   31-block  0
call    0 returned 1
        -:   32:            // check the incorrect number of player
        1:   33:            int returnValue1 = initializeGame(numPlayers, k, 2, &G);
call    0 returned 1
        1:   34:            if (returnValue1 == -1)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   35:                printf("test pass. return value == -1.\n");
        1:   35-block  0
unconditional  0 taken 1
call    1 returned 1
        -:   36:            else
    #####:   37:                printf("test fail, return value != -1.\n");
    $$$$$:   37-block  0
unconditional  0 never executed
call    1 never executed
        -:   38:        }
        5:   39:        if (numPlayers == 2)
        5:   39-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        -:   40:        {
        1:   41:            printf("Testing number of player = 2.\n");
        1:   41-block  0
call    0 returned 1
        1:   42:            int returnValue21 = initializeGame(numPlayers, dupK, 2, &G);
call    0 returned 1
        1:   43:            if (returnValue21 == -1)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   44:                printf("test pass, duplicate kingdom cards, return value == -1.\n");
        1:   44-block  0
unconditional  0 taken 1
call    1 returned 1
        -:   45:            else
    #####:   46:                printf("test fail, duplicate kingdom cards, return value != -1.\n");
    $$$$$:   46-block  0
unconditional  0 never executed
call    1 never executed
        -:   47:
        1:   48:            int returnValue22 = initializeGame(numPlayers, k, 2, &G);
        1:   48-block  0
call    0 returned 1
        1:   49:            if (G.supplyCount[curse] != 10)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   50:                printf("test fail, numCurse != 10.\n" );
    $$$$$:   50-block  0
unconditional  0 never executed
call    1 never executed
        1:   51:            if (G.supplyCount[estate] != 8 || G.supplyCount[duchy] != 8 || G.supplyCount[province] != 8)
        1:   51-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   51-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   51-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####:   52:                printf("test fail, victory cards != 8.\n" );
    $$$$$:   52-block  0
unconditional  0 never executed
call    1 never executed
        1:   53:            if (G.supplyCount[copper] != 60 - (7 * numPlayers) ||  G.supplyCount[silver] != 40 || G.supplyCount[gold] != 30)
        1:   53-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   53-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   53-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####:   54:                printf("test fail, treasure cards.\n" );
    $$$$$:   54-block  0
unconditional  0 never executed
call    1 never executed
        1:   55:            if (G.supplyCount[gardens] != 8 || G.supplyCount[great_hall] != 8)
        1:   55-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   55-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:   56:                printf("test fail, gardens and great_hall != 8.\n" );
    $$$$$:   56-block  0
unconditional  0 never executed
call    1 never executed
        1:   57:            if (G.supplyCount[adventurer] != 10 || G.supplyCount[council_room] != 10 || G.supplyCount[feast] != 10)
        1:   57-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   57-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   57-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####:   58:                printf("test fail, adventurer, council_room and feast != 10.\n" );
    $$$$$:   58-block  0
unconditional  0 never executed
call    1 never executed
        1:   59:            if (G.supplyCount[mine] != 10 || G.supplyCount[remodel] != 10 || G.supplyCount[smithy] != 10)
        1:   59-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   59-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   59-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####:   60:                printf("test fail, mine, remodel, smithy != 10.\n" );
    $$$$$:   60-block  0
unconditional  0 never executed
call    1 never executed
        1:   61:            if (G.supplyCount[village] != 10 || G.supplyCount[baron] != 10)
        1:   61-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:   62:                printf("test fail, village and baron != 10.\n" );
    $$$$$:   62-block  0
unconditional  0 never executed
call    1 never executed
        1:   63:            if (returnValue22 != 0)
        1:   63-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   64:                printf("test fail, return value != 0.\n");
    $$$$$:   64-block  0
unconditional  0 never executed
call    1 never executed
        1:   65:            if (G.deckCount[numPlayers-1] != 10)
        1:   65-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   66:                printf("test fail, deck count != 0.\n");
    $$$$$:   66-block  0
unconditional  0 never executed
call    1 never executed
        1:   67:            if (G.handCount[numPlayers-1] != 0)
        1:   67-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   68:                printf("test fail, hand count != 0.\n");
    $$$$$:   68-block  0
unconditional  0 never executed
call    1 never executed
        1:   69:            if (G.discardCount[numPlayers-1] != 0)
        1:   69-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   70:                printf("test fail, discardCount != 0.\n");
    $$$$$:   70-block  0
unconditional  0 never executed
call    1 never executed
        1:   71:            if (G.embargoTokens[numPlayers-1] != 0)
        1:   71-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   72:                printf("test fail, embargoTokens != 0.\n");
    $$$$$:   72-block  0
unconditional  0 never executed
call    1 never executed
        1:   73:            if (G.outpostPlayed != 0)
        1:   73-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   74:                printf("test fail, outpostPlayed != 0.\n");
    $$$$$:   74-block  0
unconditional  0 never executed
call    1 never executed
        1:   75:            if (G.phase != 0)
        1:   75-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   76:                printf("test fail, phase != 0.\n");
    $$$$$:   76-block  0
unconditional  0 never executed
call    1 never executed
        1:   77:            if (G.numActions != 1)
        1:   77-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   78:                printf("test fail, num actions != 1.\n");
    $$$$$:   78-block  0
unconditional  0 never executed
call    1 never executed
        1:   79:            if (G.numBuys != 1)
        1:   79-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   80:                printf("test fail, num buys != 1.\n");
    $$$$$:   80-block  0
unconditional  0 never executed
call    1 never executed
        1:   81:            if (G.playedCardCount != 0)
        1:   81-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   82:                printf("test fail, played card count != 0.\n");
    $$$$$:   82-block  0
unconditional  0 never executed
call    1 never executed
        1:   83:            if (G.whoseTurn != 0)
        1:   83-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   84:                printf("test fail, whose turn != 0.\n");
    $$$$$:   84-block  0
unconditional  0 never executed
call    1 never executed
        1:   85:            printf("test pass.\n");
        1:   85-block  0
unconditional  0 taken 1
call    1 returned 1
        -:   86:        }
        5:   87:        if (numPlayers == 3)
        5:   87-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        -:   88:        {
        1:   89:            printf("test for number of player = 3.\n");
        1:   89-block  0
call    0 returned 1
        1:   90:            int returnValue3 = initializeGame(numPlayers, k, 2, &G);
call    0 returned 1
        1:   91:            if(G.supplyCount[curse] != 20)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   92:                printf("test fail, number of curse card != 20.\n");
    $$$$$:   92-block  0
unconditional  0 never executed
call    1 never executed
        1:   93:            if (G.supplyCount[estate] != 12 || G.supplyCount[duchy] != 12 || G.supplyCount[province] != 12)
        1:   93-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   93-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   93-block  2
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    #####:   94:                printf("test fail, victory cards != 12.\n" );
    $$$$$:   94-block  0
unconditional  0 never executed
call    1 never executed
        1:   95:            if (G.supplyCount[gardens] != 12 || G.supplyCount[great_hall] != 12)
        1:   95-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   95-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:   96:                printf("test fail, gardens and great_hall != 12.\n" );
    $$$$$:   96-block  0
unconditional  0 never executed
call    1 never executed
        1:   97:            if (returnValue3 != 0)
        1:   97-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   98:                printf("test fail, return value != 0.\n");
    $$$$$:   98-block  0
unconditional  0 never executed
call    1 never executed
        1:   99:            printf("test pass.\n");
        1:   99-block  0
unconditional  0 taken 1
call    1 returned 1
        -:  100:        }
        5:  101:        if (numPlayers==4)
        5:  101-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        -:  102:        {
        1:  103:            int returnValue4 = initializeGame(numPlayers, k, 2, &G);
        1:  103-block  0
call    0 returned 1
        1:  104:            if (returnValue4 != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  105:                printf("test fail, return value != 0.\n");
    $$$$$:  105-block  0
unconditional  0 never executed
call    1 never executed
        -:  106:        }
        5:  107:        if (numPlayers==5)
        5:  107-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        -:  108:        {
        1:  109:            int returnValue5 = initializeGame(numPlayers, k, 2, &G);
        1:  109-block  0
call    0 returned 1
        1:  110:            if (returnValue5 != -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  111:                printf("test fail, return value != -1.\n");
    $$$$$:  111-block  0
unconditional  0 never executed
call    1 never executed
        -:  112:        }
        -:  113:    }
        1:  114:    return 0;
        1:  114-block  0
unconditional  0 taken 1
        -:  115:}
        -:  116:
