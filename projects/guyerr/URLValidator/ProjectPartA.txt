Rhett Guyer
Allyce McWhorter
Adrienne Pereira
08-Nov-2015
CS 362
Final Project Part A
 
Explain testIsValid Function of UrlValidator test code and how it builds all the urls.
The testIsValid function passes in the following two variables: testUrlParts and UrlValidator.ALLOW_ALL_SCHEMES. TestUrlParts is an object array that contains the following 5 Objects:  testUrlScheme, testUrlAuthority, testUrlPort, testPath, and testUrlQuery. Each of these objects contains an array of pairs. The first part of the pair is the “item” of the pair and the second is the “valid” flag.  These objects are used to create the Url that is passed into the isValid function with the help of a for loop that goes through testPartsIndex.length iterations. Once the Url is created the Url is set to a string which is passed as a parameter to the isValid function. If the result of the isValid function is true then the result is printed to the console. After the if statement to print the valid Urls, an assertEquals function is called to assert that the expected result matches the result from the isValid function. After assertEquals, another if statement is executed if the printStatus variable is set to True. In our case the print Status variable was set to false so nothing inside this if statement was executed. After the second if statement the incrementTestPartsIndex function is called inside of the while statement. This function sets the testPartsIndex so that the last part of the Url segment is iterated through before any of the earlier segments are changed. This allows the test to ensure that all Url permutations passed to the isValid function as a parameter once.

Give how many total number of urls it is testing.
We noted that there were 31,920 total URLs tested, 1,890 of which were valid and 30,030 were not.

Give example of valid url being tested and an invalid url being tested by testIsValid() method.
Valid URL Example: h3t://go.cc:65636/test1/file
Invalid URL Example: ://:65a/test1//file

Do you think that a real world test (URL Validator’s testIsValid() test in this case) is vffery dierent than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines.
In terms of concepts, testIsValid() is not very different from the unindt a card tests written earlier in the term. Both sets of tests iterate through different test cases, but differ in terms of complexity and mechanism of iteration. testIsValid() hard codes test cases using complex loops to evaluate all 31,920 possible URLs and evaluates the end result to see if those URLs are valid. Our unit and card tests evaluated how changes to variables affected the end result and determined if rules for each card and function were violated or upheld. 
