Software Engineering II
CS 362
November 8, 2015

Members
Solomon Huynh
Dustin Chase
Larissa Hahn

Give how many total number of urls it is testing.
The total number of URLs that the program should be testing 35,910 based on our calculations on how they are building their url.  
Performing simple testing using a counter, the number of URLs that the program is actually testing is 31,920. 
Based on further observations and testing, the last scheme is set as “new ResultPair(“”, true)” which is not tested due to an empty string.

How is it building all the urls?
The complete URL is broken up into scheme + authority + port + path + query.
The number of URL parts are:
scheme = 9
authority = 19
port = 7
path = 10
query = 3

At the top of the do-while loop, it is selecting one of the schemes, authorities, ports, path, and queries and assembles that into a single string. 

Give an example of valid url being testing and an invalid url being tested by testIsValid() method.
A valid URL is h3t://go.cc:65636/t123?action=edit&mode=up. 
It is combined from the parts mentioned above as:
scheme = “h3t://”
authority = “go.cc”
port = “:65636”
path = “/t123”
query = “?action=edit&mode=up”

An example of an invalid URL is ://:65a/..//file?action=view. 
It is combined from the parts mentioned above as:
scheme = “://:”
authority = “”
port = “:65a”
path = “/..//file”
query = “?action=view”

The function will print out a valid URL by first calling urlVal.isValid(url) and then seeing if that result is true. 

Do you think that a real world test (URL Validator’s testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)?

No, this real world test is not that different than the unit tests and card tests that we wrote in terms of the concept. 
The tester generates a large number of different URLs and exercises the different possibilities of both good and bad URLs. 

One difference between the Dominion testing and the URL testing is that with Dominion we are often looking at the entire game state. 
In other words, there could be several different things that interact and are affected by the particular action card we are checking. 
The URL tester is simpler in the sense that it only tests a very specific, isolated thing. 




