TESTING smithyEffect():
Testing player 0
  BEFORE smithyEffect() call: PASS, handCount=5, expected=5
  BEFORE smithyEffect() call: PASS, deckCount=10, expected=10
  BEFORE smithyEffect() call: PASS, discardCount=0, expected=0
    PASS: hand contains number of smithys=5, expected=5
  AFTER smithyEffect() call: PASS, return value=0, expected=0
    FAIL, handCount=5, expected=7
    PASS, deckCount=7, expected=7
    FAIL, discardCount=0, expected=1
    PASS: hand contains number of smithys=4, expected=4
    FAIL: hand contains number of golds=1, expected=3
    PASS, otherPlayerHandCount=5, expected=5
    PASS, otherPlayerDeckCount=10, expected=10
    PASS: other player's hand contains number of mines=5, expected=5
    PASS: other player's hand contains number of silvers=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1
  BEFORE smithyEffect() call: PASS, handCount=5, expected=5
  BEFORE smithyEffect() call: PASS, deckCount=10, expected=10
  BEFORE smithyEffect() call: PASS, discardCount=0, expected=0
    PASS: hand contains number of smithys=5, expected=5
  AFTER smithyEffect() call: PASS, return value=0, expected=0
    FAIL, handCount=5, expected=7
    PASS, deckCount=7, expected=7
    FAIL, discardCount=0, expected=1
    PASS: hand contains number of smithys=4, expected=4
    FAIL: hand contains number of golds=1, expected=3
    PASS, otherPlayerHandCount=5, expected=5
    PASS, otherPlayerDeckCount=10, expected=10
    PASS: other player's hand contains number of mines=5, expected=5
    PASS: other player's hand contains number of silvers=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Some tests failed. See bug1.c for details.
File 'dominion.c'
Lines executed:16.59% of 639
Branches executed:15.98% of 463
Taken at least once:12.74% of 463
Calls executed:8.65% of 104
dominion.c:creating 'dominion.c.gcov'

TESTING adventurerEffect():
Testing player 0, and treasure card 4
  PASS, return value=0, expected=0
  FAIL, discardCount=6, expected=5
  PASS, treasureCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0, and treasure card 5
  PASS, return value=0, expected=0
  FAIL, discardCount=6, expected=5
  PASS, treasureCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0, and treasure card 6
  PASS, return value=0, expected=0
  FAIL, discardCount=6, expected=5
  PASS, treasureCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1, and treasure card 4
  PASS, return value=0, expected=0
  FAIL, discardCount=6, expected=5
  PASS, treasureCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1, and treasure card 5
  PASS, return value=0, expected=0
  FAIL, discardCount=6, expected=5
  PASS, treasureCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1, and treasure card 6
  PASS, return value=0, expected=0
  FAIL, discardCount=6, expected=5
  PASS, treasureCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Some tests failed.
NOTE: Some tests may have failed due to bugs introduced in assignment 1. These tests have detected those bugs. See above results for explanation.
File 'dominion.c'
Lines executed:18.62% of 639
Branches executed:18.57% of 463
Taken at least once:14.90% of 463
Calls executed:9.62% of 104
dominion.c:creating 'dominion.c.gcov'

TESTING sea_hag case in cardEffect():
Testing player 0
  --Testing oracle against state before call to cardEffect(sea_hag) for player number 0, opponent number 1--
    PASS: Opponent's card to be discarded=6,expected=6
    PASS: Deck count before discarding top of deck=10,expected=10
    PASS: Hand count before discarding top of deck=10,expected=10
    PASS: Discard count before discarding top of deck=0,expected=0
  --Testing oracle against call to cardEffect(sea_hag) for player number 0, opponent number 1--
    FAIL: Card on top of opponent's discard pile after discarding top of deck=387389207,expected=6
    FAIL: Card on top of opponent's deck after distributing curse=1,expected=0
    FAIL: Deck count after discarding top of deck=7,expected=10
  Testing for unexpected transactions against oracle. Checking supply counts...
      FAIL: number of curse cards=10, expected=9
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1
  --Testing oracle against state before call to cardEffect(sea_hag) for player number 1, opponent number 0--
    PASS: Opponent's card to be discarded=6,expected=6
    PASS: Deck count before discarding top of deck=10,expected=10
    PASS: Hand count before discarding top of deck=10,expected=10
    PASS: Discard count before discarding top of deck=0,expected=0
  --Testing oracle against call to cardEffect(sea_hag) for player number 1, opponent number 0--
    FAIL: Card on top of opponent's discard pile after discarding top of deck=387389207,expected=6
    FAIL: Card on top of opponent's deck after distributing curse=6,expected=0
    PASS: Deck count after discarding top of deck=10,expected=10
  Testing for unexpected transactions against oracle. Checking supply counts...
      FAIL: number of curse cards=10, expected=9
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Some tests failed. See bug1.c for details.
NOTE: I am quite confident that the sea_hag case in cardEffect() has several bugs.
File 'dominion.c'
Lines executed:20.81% of 639
Branches executed:24.41% of 463
Taken at least once:16.20% of 463
Calls executed:10.58% of 104
dominion.c:creating 'dominion.c.gcov'

TESTING steward case in cardEffect():
Testing player 0
    PASS: choice1 != 1, != 2; Discard count after =0,expected=0
  Testing for unexpected transactions against oracle. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
    PASS: choice1==1 Hand count after adding two cards=6,expected=6
  Testing for unexpected transactions against oracle. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
    PASS: choice1==2 Coins after adding two coins=2,expected=2
  Testing for unexpected transactions against oracle. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
    PASS: choice1 != 1, != 2; Discard count after =0,expected=0
  Testing for unexpected transactions against oracle. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1
    PASS: choice1 != 1, != 2; Discard count after =0,expected=0
  Testing for unexpected transactions against oracle. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
    PASS: choice1==1 Hand count after adding two cards=6,expected=6
  Testing for unexpected transactions against oracle. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
    PASS: choice1==2 Coins after adding two coins=2,expected=2
  Testing for unexpected transactions against oracle. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
    PASS: choice1 != 1, != 2; Discard count after =0,expected=0
  Testing for unexpected transactions against oracle. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
All tests passed!
File 'dominion.c'
Lines executed:22.38% of 639
Branches executed:25.27% of 463
Taken at least once:17.71% of 463
Calls executed:15.38% of 104
dominion.c:creating 'dominion.c.gcov'

* * * * * * * * * * * * * * * * Testing minionCard * * * * * * * * * * * * * * * *
Testing minion card choice 1
################################################### 
 Error: bonus coins not updated to + 2. 
################################################### 
Testing minion card choice 2
################################################### 
 Error: expected 10 discard cards played between player 1 and 2 received 5. 
 ################################################### 
All tests passed!
File 'dominion.c'
Lines executed:27.23% of 639
Branches executed:30.45% of 463
Taken at least once:21.81% of 463
Calls executed:25.00% of 104
dominion.c:creating 'dominion.c.gcov'

TESTING fullDeckCount():
Testing player 0 with hand count of 0, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=0, expected=0
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=1, expected=1
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=1, expected=1
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 0, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=1, expected=1
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 1, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 2, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 3, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 4, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=14, expected=14
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=14, expected=14
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=14, expected=14
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 with hand count of 5, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=15, expected=15
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=0, expected=0
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=1, expected=1
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=1, expected=1
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 0, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=1, expected=1
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 1, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=2, expected=2
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 2, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=3, expected=3
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 3, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=4, expected=4
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 4, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=14, expected=14
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 0 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=5, expected=5
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 0 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 0 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 0 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 0 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 0 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 1 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=6, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 1 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 1 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 1 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 1 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 1 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 2 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=7, expected=7
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 2 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 2 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 2 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 2 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 2 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 3 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=8, expected=8
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 3 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 3 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 3 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 3 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 3 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 4 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=9, expected=9
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 4 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 4 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 4 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 4 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 4 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=14, expected=14
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 5 and discardCount of 0:
  fullDeckCount(): PASS, Estate: fullDeckCount=10, expected=10
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 5 and discardCount of 1:
  fullDeckCount(): PASS, Estate: fullDeckCount=11, expected=11
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 5 and discardCount of 2:
  fullDeckCount(): PASS, Estate: fullDeckCount=12, expected=12
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 5 and discardCount of 3:
  fullDeckCount(): PASS, Estate: fullDeckCount=13, expected=13
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 5 and discardCount of 4:
  fullDeckCount(): PASS, Estate: fullDeckCount=14, expected=14
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 with hand count of 5, deck count of 5 and discardCount of 5:
  fullDeckCount(): PASS, Estate: fullDeckCount=15, expected=15
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
All tests passed!
File 'dominion.c'
Lines executed:28.64% of 639
Branches executed:33.05% of 463
Taken at least once:24.41% of 463
Calls executed:25.00% of 104
dominion.c:creating 'dominion.c.gcov'

TESTING discardCard():
Testing player 0 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=0, expected=0
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=1, expected=1
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 1:
  PASS, return value=0, expected=0
  PASS handCount=1, expected=1
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=2, expected=2
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 1:
  PASS, return value=0, expected=0
  PASS handCount=2, expected=2
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 2:
  PASS, return value=0, expected=0
  PASS handCount=2, expected=2
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=3, expected=3
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 1:
  PASS, return value=0, expected=0
  PASS handCount=3, expected=3
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 2:
  PASS, return value=0, expected=0
  PASS handCount=3, expected=3
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 3:
  PASS, return value=0, expected=0
  PASS handCount=3, expected=3
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 1:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 2:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 3:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 0 and discard card position of 4:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=0, expected=0
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=1, expected=1
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 1:
  PASS, return value=0, expected=0
  PASS handCount=1, expected=1
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=2, expected=2
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 1:
  PASS, return value=0, expected=0
  PASS handCount=2, expected=2
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 2:
  PASS, return value=0, expected=0
  PASS handCount=2, expected=2
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=3, expected=3
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 1:
  PASS, return value=0, expected=0
  PASS handCount=3, expected=3
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 2:
  PASS, return value=0, expected=0
  PASS handCount=3, expected=3
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 3:
  PASS, return value=0, expected=0
  PASS handCount=3, expected=3
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 0:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 1:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 2:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 3:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Testing player 1 and discard card position of 4:
  PASS, return value=0, expected=0
  PASS handCount=4, expected=4
  FAIL, discardCount=0, expected=1
  FAIL, discardedCard=387389207, expected=6
  Testing for unexpected transactions. Checking supply counts...
      PASS: number of curse=10, expected=10
    Checking Victory cards in supply:
      PASS: number of estate=8, expected=8
      PASS: number of duchy=8, expected=8
      PASS: number of province=8, expected=8
    Checking Treasure cards in supply:
      PASS: number of copper=46, expected=46
      PASS: number of silver=40, expected=40
      PASS: number of gold=30, expected=30
Some tests failed. See bug1.c for details.
File 'dominion.c'
Lines executed:28.64% of 639
Branches executed:33.05% of 463
Taken at least once:24.41% of 463
Calls executed:25.00% of 104
dominion.c:creating 'dominion.c.gcov'

TESTING isGameOver():
  Testing province count=7
    isGameOver(): PASS, gameOver=0, expected=0
  Testing province count=6
    isGameOver(): PASS, gameOver=0, expected=0
  Testing province count=5
    isGameOver(): PASS, gameOver=0, expected=0
  Testing province count=4
    isGameOver(): PASS, gameOver=0, expected=0
  Testing province count=3
    isGameOver(): PASS, gameOver=0, expected=0
  Testing province count=2
    isGameOver(): PASS, gameOver=0, expected=0
  Testing province count=1
    isGameOver(): PASS, gameOver=0, expected=0
  Testing province count=0
    isGameOver(): PASS, gameOver=1, expected=1
  Testing province count=-1
    isGameOver(): PASS, gameOver=0, expected=0
  Testing depletion of 1 supply counts    isGameOver(): PASS, gameOver=0, expected=0
  Testing depletion of 2 supply counts    isGameOver(): PASS, gameOver=0, expected=0
  Testing depletion of 3 supply counts    isGameOver(): PASS, gameOver=1, expected=1
All tests passed!
File 'dominion.c'
Lines executed:30.20% of 639
Branches executed:34.77% of 463
Taken at least once:26.13% of 463
Calls executed:25.00% of 104
dominion.c:creating 'dominion.c.gcov'

TESTING gainCard():
Testing player 0, supply card 0 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 0 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 0 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 1 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 1 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 1 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 2 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 2 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 2 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 3 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 3 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 3 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 4 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 4 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 4 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 5 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 5 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 5 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 6 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 6 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 6 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 7 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 7 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 7 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 8 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 8 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 8 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 9 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 9 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 9 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 10 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 10 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 10 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 11 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 11 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 11 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 12 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 12 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 12 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 13 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 13 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 13 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 14 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 14 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 14 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 15 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 15 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 15 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 16 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 16 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 16 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 17 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 17 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 17 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 18 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 18 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 18 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 19 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 19 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 19 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 20 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 20 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 20 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 21 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 21 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 21 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 22 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 22 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 22 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 23 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 23 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 23 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 24 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 24 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 24 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 25 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 0, supply card 25 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 0, supply card 25 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 0, supply card 26 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 26 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 0, supply card 26 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 0 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 0 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 0 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 1 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 1 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 1 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 2 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 2 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 2 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 3 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 3 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 3 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 4 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 4 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 4 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 5 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 5 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 5 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 6 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 6 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 6 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 7 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 7 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 7 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 8 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 8 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 8 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 9 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 9 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 9 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 10 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 10 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 10 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 11 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 11 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 11 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 12 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 12 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 12 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 13 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 13 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 13 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 14 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 14 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 14 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 15 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 15 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 15 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 16 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 16 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 16 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 17 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 17 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 17 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 18 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 18 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 18 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 19 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 19 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 19 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 20 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 20 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 20 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 21 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 21 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 21 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 22 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 22 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 22 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 23 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 23 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 23 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 24 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 24 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 24 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 25 with gain card flag of 0:
    PASS, gain=0, expected=0
Testing player 1, supply card 25 with gain card flag of 1:
    PASS, gain=0, expected=0
Testing player 1, supply card 25 with gain card flag of 2:
    PASS, gain=0, expected=0
Testing player 1, supply card 26 with gain card flag of 0:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 26 with gain card flag of 1:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
Testing player 1, supply card 26 with gain card flag of 2:
  Attempt to gain a card that is not in the game
    PASS, gain=-1, expected=-1
All tests passed!
File 'dominion.c'
Lines executed:32.55% of 639
Branches executed:36.07% of 463
Taken at least once:27.43% of 463
Calls executed:25.96% of 104
dominion.c:creating 'dominion.c.gcov'

