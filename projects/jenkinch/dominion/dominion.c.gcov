        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
      414:   10:int compare(const void* a, const void* b) {
      414:   11:  if (*(int*)a > *(int*)b)
        9:   12:    return 1;
      405:   13:  if (*(int*)a < *(int*)b)
      117:   14:    return -1;
      288:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
       13:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       13:   46:  SelectStream(1);
       13:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
       13:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       13:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      143:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
     1430:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
     1300:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       13:   75:  if (numPlayers == 2)
        -:   76:    {
       13:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       13:   89:  if (numPlayers == 2)
        -:   90:    {
       13:   91:      state->supplyCount[estate] = 8;
       13:   92:      state->supplyCount[duchy] = 8;
       13:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       13:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  104:  state->supplyCount[silver] = 40;
       13:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      273:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
     2145:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
     2015:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      152:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
       22:  117:		  if (numPlayers == 2){ 
       22:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      108:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      130:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1885:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       39:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       26:  142:      state->deckCount[i] = 0;
      104:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       78:  145:	  state->deck[i][j] = estate;
       78:  146:	  state->deckCount[i]++;
        -:  147:	}
      208:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
      182:  150:	  state->deck[i][j] = copper;
      182:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       39:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       26:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       39:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       26:  168:      state->handCount[i] = 0;
       26:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      364:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      351:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       13:  184:  state->outpostPlayed = 0;
       13:  185:  state->phase = 0;
       13:  186:  state->numActions = 1;
       13:  187:  state->numBuys = 1;
       13:  188:  state->playedCardCount = 0;
       13:  189:  state->whoseTurn = 0;
       13:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       78:  194:  for (it = 0; it < 5; it++){
       65:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
       13:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
       13:  200:  return 0;
        -:  201:}
        -:  202:
       31:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       31:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       31:  211:  if (state->deckCount[player] < 1)
        2:  212:    return -1;
       29:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      332:  216:  while (state->deckCount[player] > 0) {
      274:  217:    card = floor(Random() * state->deckCount[player]);
      274:  218:    newDeck[newDeckPos] = state->deck[player][card];
      274:  219:    newDeckPos++;
      952:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      678:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      274:  223:    state->deckCount[player]--;
        -:  224:  }
      303:  225:  for (i = 0; i < newDeckPos; i++) {
      274:  226:    state->deck[player][i] = newDeck[i];
      274:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       29:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
    #####:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    #####:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    #####:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    #####:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    #####:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
       19:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
       19:  328:  int count = 0;
        -:  329:
      144:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
      125:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
       74:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
       55:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
      145:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
      126:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
       19:  345:  return count;
        -:  346:}
        -:  347:
        5:  348:int whoseTurn(struct gameState *state) {
        5:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
       12:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
       12:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        1:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
       11:  403:  j = 0;
      286:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      275:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
       14:  408:	  j++;
        -:  409:	}
        -:  410:    }
       11:  411:  if ( j >= 3)
        -:  412:    {
        1:  413:      return 1;
        -:  414:    }
        -:  415:
       10:  416:  return 0;
        -:  417:}
        -:  418:
       48:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
       48:  422:  int score = 0;
        -:  423:  //score from hand
       96:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
       48:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
       48:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
       48:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
       48:  429:      if (state->hand[player][i] == province) { score = score + 6; };
       48:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       48:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
      136:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
       88:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
       88:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
       88:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
       88:  440:      if (state->discard[player][i] == province) { score = score + 6; };
       88:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       88:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
      136:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
       88:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
       88:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
       88:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
       88:  451:      if (state->deck[player][i] == province) { score = score + 6; };
       88:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       88:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
       48:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
       74:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       74:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
        4:  535:    for (i = 0; i < state->discardCount[player];i++){
        3:  536:      state->deck[player][i] = state->discard[player][i];
        3:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
        1:  540:    state->deckCount[player] = state->discardCount[player];
        1:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        1:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        1:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        1:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        1:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        1:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        1:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        1:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
        1:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  565:    state->deckCount[player]--;
        1:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       73:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
       73:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       73:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       73:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       73:  578:    state->deckCount[player]--;
       73:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       74:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        5:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        5:  655:  int currentPlayer = whoseTurn(state);
        5:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        5:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        5:  660:  if (nextPlayer > (state->numPlayers - 1)){
        1:  661:    nextPlayer = 0;
        -:  662:  }
        -:  663:	
        -:  664:  //uses switch to select card and perform actions
        5:  665:  switch( card ) 
        -:  666:    {
        -:  667:    case adventurer:
        2:  668:      return activateAdventurer(currentPlayer, state, temphand);
        -:  669:			
        -:  670:    case council_room:
        -:  671:      //+4 Cards
    #####:  672:      for (i = 0; i < 4; i++)
        -:  673:	{
    #####:  674:	  drawCard(currentPlayer, state);
        -:  675:	}
        -:  676:			
        -:  677:      //+1 Buy
    #####:  678:      state->numBuys++;
        -:  679:			
        -:  680:      //Each other player draws a card
    #####:  681:      for (i = 0; i < state->numPlayers; i++)
        -:  682:	{
    #####:  683:	  if ( i != currentPlayer )
        -:  684:	    {
    #####:  685:	      drawCard(i, state);
        -:  686:	    }
        -:  687:	}
        -:  688:			
        -:  689:      //put played card in played card pile
    #####:  690:      discardCard(handPos, currentPlayer, state, 0);
        -:  691:			
    #####:  692:      return 0;
        -:  693:			
        -:  694:    case feast:
        -:  695:      //gain card with cost up to 5
        -:  696:      //Backup hand
    #####:  697:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:      }
        -:  701:      //Backup hand
        -:  702:
        -:  703:      //Update Coins for Buy
    #####:  704:      updateCoins(currentPlayer, state, 5);
    #####:  705:      x = 1;//Condition to loop on
    #####:  706:      while( x == 1) {//Buy one card
    #####:  707:	if (supplyCount(choice1, state) <= 0){
    #####:  708:	  if (DEBUG)
        -:  709:	    printf("None of that card left, sorry!\n");
        -:  710:
    #####:  711:	  if (DEBUG){
        -:  712:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  713:	  }
        -:  714:	}
    #####:  715:	else if (state->coins < getCost(choice1)){
    #####:  716:	  printf("That card is too expensive!\n");
        -:  717:
    #####:  718:	  if (DEBUG){
        -:  719:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  720:	  }
        -:  721:	}
        -:  722:	else{
        -:  723:
    #####:  724:	  if (DEBUG){
        -:  725:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:	  }
        -:  727:
    #####:  728:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  729:	  x = 0;//No more buying cards
        -:  730:
    #####:  731:	  if (DEBUG){
        -:  732:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:	  }
        -:  734:
        -:  735:	}
        -:  736:      }     
        -:  737:
        -:  738:      //Reset Hand
    #####:  739:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:	state->hand[currentPlayer][i] = temphand[i];
    #####:  741:	temphand[i] = -1;
        -:  742:      }
        -:  743:      //Reset Hand
        -:  744:      			
    #####:  745:      return 0;
        -:  746:			
        -:  747:    case gardens:
    #####:  748:      return -1;
        -:  749:			
        -:  750:    case mine:
    #####:  751:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  752:
    #####:  753:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  754:	{
    #####:  755:	  return -1;
        -:  756:	}
        -:  757:		
    #####:  758:      if (choice2 > treasure_map || choice2 < curse)
        -:  759:	{
    #####:  760:	  return -1;
        -:  761:	}
        -:  762:
    #####:  763:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  764:	{
    #####:  765:	  return -1;
        -:  766:	}
        -:  767:
    #####:  768:      gainCard(choice2, state, 2, currentPlayer);
        -:  769:
        -:  770:      //discard card from hand
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
        -:  772:
        -:  773:      //discard trashed card
    #####:  774:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  775:	{
    #####:  776:	  if (state->hand[currentPlayer][i] == j)
        -:  777:	    {
    #####:  778:	      discardCard(i, currentPlayer, state, 0);			
    #####:  779:	      break;
        -:  780:	    }
        -:  781:	}
        -:  782:			
    #####:  783:      return 0;
        -:  784:			
        -:  785:    case remodel:
    #####:  786:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  787:
    #####:  788:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  789:	{
    #####:  790:	  return -1;
        -:  791:	}
        -:  792:
    #####:  793:      gainCard(choice2, state, 0, currentPlayer);
        -:  794:
        -:  795:      //discard card from hand
    #####:  796:      discardCard(handPos, currentPlayer, state, 0);
        -:  797:
        -:  798:      //discard trashed card
    #####:  799:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  800:	{
    #####:  801:	  if (state->hand[currentPlayer][i] == j)
        -:  802:	    {
    #####:  803:	      discardCard(i, currentPlayer, state, 0);			
    #####:  804:	      break;
        -:  805:	    }
        -:  806:	}
        -:  807:
        -:  808:
    #####:  809:      return 0;
        -:  810:		
        -:  811:    case smithy:
        1:  812:      return activateSmithy(currentPlayer, state, handPos);
        -:  813:		
        -:  814:    case village:
        1:  815:      return activateVillage(currentPlayer, state, handPos);
        -:  816:		
        -:  817:    case baron:
    #####:  818:      state->numBuys++;//Increase buys by 1!
    #####:  819:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  820:	int p = 0;//Iterator for hand!
    #####:  821:	int card_not_discarded = 1;//Flag for discard set!
    #####:  822:	while(card_not_discarded){
    #####:  823:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  824:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  825:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  826:	    state->discardCount[currentPlayer]++;
    #####:  827:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  828:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  829:	    }
    #####:  830:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  831:	    state->handCount[currentPlayer]--;
    #####:  832:	    card_not_discarded = 0;//Exit the loop
        -:  833:	  }
    #####:  834:	  else if (p > state->handCount[currentPlayer]){
    #####:  835:	    if(DEBUG) {
        -:  836:	      printf("No estate cards in your hand, invalid choice\n");
        -:  837:	      printf("Must gain an estate if there are any\n");
        -:  838:	    }
    #####:  839:	    if (supplyCount(estate, state) > 0){
    #####:  840:	      gainCard(estate, state, 0, currentPlayer);
    #####:  841:	      state->supplyCount[estate]--;//Decrement estates
    #####:  842:	      if (supplyCount(estate, state) == 0){
    #####:  843:		isGameOver(state);
        -:  844:	      }
        -:  845:	    }
    #####:  846:	    card_not_discarded = 0;//Exit the loop
        -:  847:	  }
        -:  848:			    
        -:  849:	  else{
    #####:  850:	    p++;//Next card
        -:  851:	  }
        -:  852:	}
        -:  853:      }
        -:  854:			    
        -:  855:      else{
    #####:  856:	if (supplyCount(estate, state) > 0){
    #####:  857:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  858:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  859:	  if (supplyCount(estate, state) == 0){
    #####:  860:	    isGameOver(state);
        -:  861:	  }
        -:  862:	}
        -:  863:      }
        -:  864:	    
        -:  865:      
    #####:  866:      return 0;
        -:  867:		
        -:  868:    case great_hall:
        -:  869:      //+1 Card
        1:  870:      drawCard(currentPlayer, state);
        -:  871:			
        -:  872:      //+1 Actions
        1:  873:      state->numActions++;
        -:  874:			
        -:  875:      //discard card from hand
        1:  876:      discardCard(handPos, currentPlayer, state, 0);
        1:  877:      return 0;
        -:  878:		
        -:  879:    case minion:
    #####:  880:      return activateMinion(currentPlayer, state, handPos, choice1, choice2);
        -:  881:		
        -:  882:    case steward:
    #####:  883:      return activateSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -:  884:		
        -:  885:    case tribute:
    #####:  886:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  887:	if (state->deckCount[nextPlayer] > 0){
    #####:  888:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  889:	  state->deckCount[nextPlayer]--;
        -:  890:	}
    #####:  891:	else if (state->discardCount[nextPlayer] > 0){
    #####:  892:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  893:	  state->discardCount[nextPlayer]--;
        -:  894:	}
        -:  895:	else{
        -:  896:	  //No Card to Reveal
    #####:  897:	  if (DEBUG){
        -:  898:	    printf("No cards to reveal\n");
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:	    
        -:  903:      else{
    #####:  904:	if (state->deckCount[nextPlayer] == 0){
    #####:  905:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  906:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  907:	    state->deckCount[nextPlayer]++;
    #####:  908:	    state->discard[nextPlayer][i] = -1;
    #####:  909:	    state->discardCount[nextPlayer]--;
        -:  910:	  }
        -:  911:			    
    #####:  912:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  913:	} 
    #####:  914:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  916:	state->deckCount[nextPlayer]--;
    #####:  917:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  918:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  919:	state->deckCount[nextPlayer]--;
        -:  920:      }    
        -:  921:		       
    #####:  922:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  923:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  924:	state->playedCardCount++;
    #####:  925:	tributeRevealedCards[1] = -1;
        -:  926:      }
        -:  927:
    #####:  928:      for (i = 0; i <= 2; i ++){
    #####:  929:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  930:	  state->coins += 2;
        -:  931:	}
        -:  932:		    
    #####:  933:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  934:	  drawCard(currentPlayer, state);
    #####:  935:	  drawCard(currentPlayer, state);
        -:  936:	}
        -:  937:	else{//Action Card
    #####:  938:	  state->numActions = state->numActions + 2;
        -:  939:	}
        -:  940:      }
        -:  941:	    
    #####:  942:      return 0;
        -:  943:		
        -:  944:    case ambassador:
    #####:  945:      j = 0;		//used to check if player has enough cards to discard
        -:  946:
    #####:  947:      if (choice2 > 2 || choice2 < 0)
        -:  948:	{
    #####:  949:	  return -1;				
        -:  950:	}
        -:  951:
    #####:  952:      if (choice1 == handPos)
        -:  953:	{
    #####:  954:	  return -1;
        -:  955:	}
        -:  956:
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:	{
    #####:  959:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  960:	    {
    #####:  961:	      j++;
        -:  962:	    }
        -:  963:	}
    #####:  964:      if (j < choice2)
        -:  965:	{
    #####:  966:	  return -1;				
        -:  967:	}
        -:  968:
    #####:  969:      if (DEBUG) 
        -:  970:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  971:
        -:  972:      //increase supply count for choosen card by amount being discarded
    #####:  973:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  974:			
        -:  975:      //each other player gains a copy of revealed card
    #####:  976:      for (i = 0; i < state->numPlayers; i++)
        -:  977:	{
    #####:  978:	  if (i != currentPlayer)
        -:  979:	    {
    #####:  980:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  981:	    }
        -:  982:	}
        -:  983:
        -:  984:      //discard played card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);			
        -:  986:
        -:  987:      //trash copies of cards returned to supply
    #####:  988:      for (j = 0; j < choice2; j++)
        -:  989:	{
    #####:  990:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:	    {
    #####:  992:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  993:		{
    #####:  994:		  discardCard(i, currentPlayer, state, 1);
    #####:  995:		  break;
        -:  996:		}
        -:  997:	    }
        -:  998:	}			
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case cutpurse:
        -: 1003:
    #####: 1004:      updateCoins(currentPlayer, state, 2);
    #####: 1005:      for (i = 0; i < state->numPlayers; i++)
        -: 1006:	{
    #####: 1007:	  if (i != currentPlayer)
        -: 1008:	    {
    #####: 1009:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1010:		{
    #####: 1011:		  if (state->hand[i][j] == copper)
        -: 1012:		    {
    #####: 1013:		      discardCard(j, i, state, 0);
    #####: 1014:		      break;
        -: 1015:		    }
    #####: 1016:		  if (j == state->handCount[i])
        -: 1017:		    {
    #####: 1018:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1019:			{
    #####: 1020:			  if (DEBUG)
        -: 1021:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1022:			}	
    #####: 1023:		      break;
        -: 1024:		    }		
        -: 1025:		}
        -: 1026:					
        -: 1027:	    }
        -: 1028:				
        -: 1029:	}				
        -: 1030:
        -: 1031:      //discard played card from hand
    #####: 1032:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1033:
    #####: 1034:      return 0;
        -: 1035:
        -: 1036:		
        -: 1037:    case embargo: 
        -: 1038:      //+2 Coins
    #####: 1039:      state->coins = state->coins + 2;
        -: 1040:			
        -: 1041:      //see if selected pile is in play
    #####: 1042:      if ( state->supplyCount[choice1] == -1 )
        -: 1043:	{
    #####: 1044:	  return -1;
        -: 1045:	}
        -: 1046:			
        -: 1047:      //add embargo token to selected supply pile
    #####: 1048:      state->embargoTokens[choice1]++;
        -: 1049:			
        -: 1050:      //trash card
    #####: 1051:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case outpost:
        -: 1055:      //set outpost flag
    #####: 1056:      state->outpostPlayed++;
        -: 1057:			
        -: 1058:      //discard card
    #####: 1059:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1060:      return 0;
        -: 1061:		
        -: 1062:    case salvager:
        -: 1063:      //+1 buy
    #####: 1064:      state->numBuys++;
        -: 1065:			
    #####: 1066:      if (choice1)
        -: 1067:	{
        -: 1068:	  //gain coins equal to trashed card
    #####: 1069:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1070:	  //trash card
    #####: 1071:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1072:	}
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case sea_hag:
    #####: 1079:      for (i = 0; i < state->numPlayers; i++){
    #####: 1080:	if (i != currentPlayer){
    #####: 1081:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1082:	  state->discardCount[i]++;
    #####: 1083:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1084:	}
        -: 1085:      }
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case treasure_map:
        -: 1089:      //search hand for another treasure_map
    #####: 1090:      index = -1;
    #####: 1091:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1092:	{
    #####: 1093:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1094:	    {
    #####: 1095:	      index = i;
    #####: 1096:	      break;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (index > -1)
        -: 1100:	{
        -: 1101:	  //trash both treasure cards
    #####: 1102:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1103:	  discardCard(index, currentPlayer, state, 1);
        -: 1104:
        -: 1105:	  //gain 4 Gold cards
    #####: 1106:	  for (i = 0; i < 4; i++)
        -: 1107:	    {
    #####: 1108:	      gainCard(gold, state, 1, currentPlayer);
        -: 1109:	    }
        -: 1110:				
        -: 1111:	  //return success
    #####: 1112:	  return 1;
        -: 1113:	}
        -: 1114:			
        -: 1115:      //no second treasure_map found in hand
    #####: 1116:      return -1;
        -: 1117:    }
        -: 1118:	
    #####: 1119:  return -1;
        -: 1120:}
        -: 1121:
        3: 1122:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1123:{
        -: 1124:	
        -: 1125:  //if card is not trashed, added to Played pile 
        3: 1126:  if (trashFlag < 1)
        -: 1127:    {
        -: 1128:      //add card to played pile
        3: 1129:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1130:      state->playedCardCount++;
        -: 1131:    }
        -: 1132:	
        -: 1133:  //set played card to -1
        3: 1134:  state->hand[currentPlayer][handPos] = -1;
        -: 1135:	
        -: 1136:  //remove card from player's hand
        3: 1137:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1138:    {
        -: 1139:      //reduce number of cards in hand
    #####: 1140:      state->handCount[currentPlayer]--;
        -: 1141:    }
        3: 1142:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
    #####: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
        -: 1147:  else 	
        -: 1148:    {
        -: 1149:      //replace discarded card with last card in hand
        3: 1150:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1151:      //set last card to -1
        3: 1152:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1153:      //reduce number of cards in hand
        3: 1154:      state->handCount[currentPlayer]--;
        -: 1155:    }
        -: 1156:	
        3: 1157:  return 0;
        -: 1158:}
        -: 1159:
    #####: 1160:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1161:{
        -: 1162:  //Note: supplyPos is enum of choosen card
        -: 1163:	
        -: 1164:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1165:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1166:    {
    #####: 1167:      return -1;
        -: 1168:    }
        -: 1169:	
        -: 1170:  //added card for [whoseTurn] current player:
        -: 1171:  // toFlag = 0 : add to discard
        -: 1172:  // toFlag = 1 : add to deck
        -: 1173:  // toFlag = 2 : add to hand
        -: 1174:
    #####: 1175:  if (toFlag == 1)
        -: 1176:    {
    #####: 1177:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1178:      state->deckCount[player]++;
        -: 1179:    }
    #####: 1180:  else if (toFlag == 2)
        -: 1181:    {
    #####: 1182:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1183:      state->handCount[player]++;
        -: 1184:    }
        -: 1185:  else
        -: 1186:    {
    #####: 1187:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1188:      state->discardCount[player]++;
        -: 1189:    }
        -: 1190:	
        -: 1191:  //decrease number in supply pile
    #####: 1192:  state->supplyCount[supplyPos]--;
        -: 1193:	 
    #####: 1194:  return 0;
        -: 1195:}
        -: 1196:
       13: 1197:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1198:{
        -: 1199:  int i;
        -: 1200:	
        -: 1201:  //reset coin count
       13: 1202:  state->coins = 0;
        -: 1203:
        -: 1204:  //add coins for each Treasure card in player's hand
       78: 1205:  for (i = 0; i < state->handCount[player]; i++)
        -: 1206:    {
       65: 1207:      if (state->hand[player][i] == copper)
        -: 1208:	{
       52: 1209:	  state->coins += 1;
        -: 1210:	}
       13: 1211:      else if (state->hand[player][i] == silver)
        -: 1212:	{
    #####: 1213:	  state->coins += 2;
        -: 1214:	}
       13: 1215:      else if (state->hand[player][i] == gold)
        -: 1216:	{
    #####: 1217:	  state->coins += 3;
        -: 1218:	}	
        -: 1219:    }	
        -: 1220:
        -: 1221:  //add bonus
       13: 1222:  state->coins += bonus;
        -: 1223:
       13: 1224:  return 0;
        -: 1225:}
        -: 1226:
        1: 1227:int activateSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1228:{
        1: 1229:    int i = 0;
        -: 1230:    
        -: 1231:    //+3 Cards
        3: 1232:    for (i = 0; i < 3; i++)
        -: 1233:	{
        2: 1234:        drawCard(currentPlayer, state);
        2: 1235:        i++;
        -: 1236:	}
        -: 1237:			
        -: 1238:    //discard card from hand
        1: 1239:    discardCard(currentPlayer, handPos, state, 0);
        -: 1240:    
        1: 1241:    return 0;
        -: 1242:}
        -: 1243:
        2: 1244:int activateAdventurer(int currentPlayer, struct gameState *state, int temphand[MAX_HAND])
        -: 1245:{
        2: 1246:    int z = 0;// this is the counter for the temp hand
        2: 1247:    int drawntreasure = 0;
        -: 1248:    int cardDrawn;
        -: 1249:    
        9: 1250:    while(drawntreasure < 2){
        5: 1251:        if (state->deckCount[currentPlayer] <2){ //if the deck is empty we need to shuffle discard and add to deck
        2: 1252:            shuffle(currentPlayer, state);
        -: 1253:        }
        -: 1254:        
        5: 1255:        drawCard(currentPlayer, state);
        5: 1256:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; //top card of hand is most recently drawn card.
        -: 1257:        
        9: 1258:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
        4: 1259:            drawntreasure++;
        4: 1260:            z++;
        -: 1261:        }
        -: 1262:        else{
        1: 1263:            temphand[z]=cardDrawn;
        1: 1264:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1265:        }
        -: 1266:    }
        -: 1267:    
        8: 1268:    while(z-1 >= 0){
        4: 1269:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4: 1270:        z = z-1;
        -: 1271:    }
        -: 1272:    
        2: 1273:    return 0;
        -: 1274:}
        -: 1275:
        1: 1276:int activateVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1277:{
        -: 1278:    //+1 Card
        1: 1279:    drawCard(currentPlayer, state);
        -: 1280:			
        -: 1281:    //+2 Actions
        1: 1282:    state->numActions = state->supplyCount[0] + 2;
        -: 1283:			
        -: 1284:    //discard played card from hand
        1: 1285:    discardCard(handPos, currentPlayer, state, 0);
        -: 1286:    
        1: 1287:    return 0;
        -: 1288:}
        -: 1289:
    #####: 1290:int activateSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1291:{
    #####: 1292:    if (choice1 == 1)
        -: 1293:	{
        -: 1294:        //+2 cards
    #####: 1295:        drawCard(currentPlayer, state);
    #####: 1296:        drawCard(currentPlayer, state);
        -: 1297:	}
    #####: 1298:    else if (choice1 == 2)
        -: 1299:	{
        -: 1300:        //+2 coins
    #####: 1301:        state->coins = state->coins + 2;
        -: 1302:	}
        -: 1303:    else
        -: 1304:	{
        -: 1305:        //trash 2 cards in hand
    #####: 1306:        discardCard(currentPlayer, choice2, state, 1);
    #####: 1307:        discardCard(currentPlayer, choice3, state, 1);
        -: 1308:	}
        -: 1309:			
        -: 1310:    //discard card from hand
    #####: 1311:    discardCard(handPos, currentPlayer, state, 0);
        -: 1312:    
    #####: 1313:    return 0;
        -: 1314:}
        -: 1315:
    #####: 1316:int activateMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1317:{
        -: 1318:    int i, j;
        -: 1319:    
        -: 1320:    //+1 action
    #####: 1321:    state->numActions++;
        -: 1322:			
        -: 1323:    //discard card from hand
    #####: 1324:    discardCard(handPos, currentPlayer, state, 0);
        -: 1325:			
    #####: 1326:    if (choice1) //+2 coins
        -: 1327:	{
    #####: 1328:        state->coins = state->coins + 2;
        -: 1329:	}
        -: 1330:			
    #####: 1331:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1332:	{
        -: 1333:        //discard hand
    #####: 1334:        while(numHandCards(state) > 0)
        -: 1335:	    {
    #####: 1336:            discardCard(handPos, currentPlayer, state, 0);
        -: 1337:	    }
        -: 1338:				
        -: 1339:	    //draw 4
    #####: 1340:	    for (i = 0; i < 4; i++)
        -: 1341:	    {
    #####: 1342:            drawCard(currentPlayer, state);
        -: 1343:	    }
        -: 1344:				
        -: 1345:	    //other players discard hand and redraw if hand size > 4
    #####: 1346:	    for (i = 0; i < state->numPlayers; i++)
        -: 1347:	    {
    #####: 1348:            if (i != currentPlayer)
        -: 1349:            {
    #####: 1350:                if (state->handCount[i] > 4)
        -: 1351:                {
        -: 1352:                    //discard hand
    #####: 1353:                    while(state->handCount[i] > 0)
        -: 1354:                    {
    #####: 1355:                        discardCard(handPos, i, state, 0);
        -: 1356:                    }
        -: 1357:                                    
        -: 1358:                    //draw 4
    #####: 1359:                    for (j = 0; j <= 4; j++)
        -: 1360:                    {
    #####: 1361:                        drawCard(i, state);
        -: 1362:                    }
        -: 1363:                }
        -: 1364:            }
        -: 1365:	    }		
        -: 1366:	}
        -: 1367:    
    #####: 1368:    return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
