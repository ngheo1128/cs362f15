TESTING smithyCard():
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 8
Should be 7
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 8
Should be 10
TEST FAILED
Card in players hand before smithy: 8
Card in players hand after smithy: 7
Should be 10
TEST FAILED
Card in players hand before smithy: 7
Card in players hand after smithy: 6
Should be 9
TEST FAILED
Card in players hand before smithy: 6
Card in players hand after smithy: 5
Should be 8
TEST FAILED
TESTING villlageCard():
Actions in players hand before village: 0
Actions in players hand after village: 2
Should be: 2
Actions in players hand before village: 2
Actions in players hand after village: 4
Should be: 5
TEST FAILED
Actions in players hand before village: 4
Actions in players hand after village: 6
Should be: 8
TEST FAILED
Actions in players hand before village: 6
Actions in players hand after village: 8
Should be: 11
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 10
Should be: 14
TEST FAILED
Actions in players hand before village: 1
Actions in players hand after village: 3
Should be: 2
TEST FAILED
Actions in players hand before village: 3
Actions in players hand after village: 5
Should be: 5
Actions in players hand before village: 5
Actions in players hand after village: 7
Should be: 8
TEST FAILED
Actions in players hand before village: 7
Actions in players hand after village: 9
Should be: 11
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 11
Should be: 14
TEST FAILED
Actions in players hand before village: 2
Actions in players hand after village: 4
Should be: 2
TEST FAILED
Actions in players hand before village: 4
Actions in players hand after village: 6
Should be: 5
TEST FAILED
Actions in players hand before village: 6
Actions in players hand after village: 8
Should be: 8
Actions in players hand before village: 8
Actions in players hand after village: 10
Should be: 11
TEST FAILED
Actions in players hand before village: 10
Actions in players hand after village: 12
Should be: 14
TEST FAILED
Actions in players hand before village: 3
Actions in players hand after village: 5
Should be: 2
TEST FAILED
Actions in players hand before village: 5
Actions in players hand after village: 7
Should be: 5
TEST FAILED
Actions in players hand before village: 7
Actions in players hand after village: 9
Should be: 8
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 11
Should be: 11
Actions in players hand before village: 11
Actions in players hand after village: 13
Should be: 14
TEST FAILED
Actions in players hand before village: 4
Actions in players hand after village: 6
Should be: 2
TEST FAILED
Actions in players hand before village: 6
Actions in players hand after village: 8
Should be: 5
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 10
Should be: 8
TEST FAILED
Actions in players hand before village: 10
Actions in players hand after village: 12
Should be: 11
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 14
Should be: 14
Actions in players hand before village: 5
Actions in players hand after village: 7
Should be: 2
TEST FAILED
Actions in players hand before village: 7
Actions in players hand after village: 9
Should be: 5
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 11
Should be: 8
TEST FAILED
Actions in players hand before village: 11
Actions in players hand after village: 13
Should be: 11
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 15
Should be: 14
TEST FAILED
Actions in players hand before village: 6
Actions in players hand after village: 8
Should be: 2
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 10
Should be: 5
TEST FAILED
Actions in players hand before village: 10
Actions in players hand after village: 12
Should be: 8
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 14
Should be: 11
TEST FAILED
Actions in players hand before village: 14
Actions in players hand after village: 16
Should be: 14
TEST FAILED
Actions in players hand before village: 7
Actions in players hand after village: 9
Should be: 2
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 11
Should be: 5
TEST FAILED
Actions in players hand before village: 11
Actions in players hand after village: 13
Should be: 8
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 15
Should be: 11
TEST FAILED
Actions in players hand before village: 15
Actions in players hand after village: 17
Should be: 14
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 10
Should be: 2
TEST FAILED
Actions in players hand before village: 10
Actions in players hand after village: 12
Should be: 5
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 14
Should be: 8
TEST FAILED
Actions in players hand before village: 14
Actions in players hand after village: 16
Should be: 11
TEST FAILED
Actions in players hand before village: 16
Actions in players hand after village: 18
Should be: 14
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 11
Should be: 2
TEST FAILED
Actions in players hand before village: 11
Actions in players hand after village: 13
Should be: 5
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 15
Should be: 8
TEST FAILED
Actions in players hand before village: 15
Actions in players hand after village: 17
Should be: 11
TEST FAILED
Actions in players hand before village: 17
Actions in players hand after village: 19
Should be: 14
TEST FAILED
TESTING runAdventurer():
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 5
Should be: 6
TEST FAILED
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 5
Should be: 5
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 5
Should be: 6
TEST FAILED
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 5
Should be: 5
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 5
Should be: 6
TEST FAILED
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 5
Should be: 5
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 5
Should be: 6
TEST FAILED
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 5
Should be: 5
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 5
Should be: 6
TEST FAILED
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 5
Should be: 5
TESTING runAdventurer():
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 7
Should be: 8
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 8
Should be: 9
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 8
Should be: 9
TEST FAILED
Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 6
Should be: 7
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 8
Should be: 9
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 11
Should be: 12
TEST FAILED
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 10
Should be: 11
TEST FAILED
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 14
Should be: 15
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 12
Should be: 13
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 12
Should be: 13
TEST FAILED
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 14
Should be: 15
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 8
Should be: 9
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 12
Should be: 13
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 14
Should be: 15
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 11
Should be: 12
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 11
Should be: 12
TEST FAILED
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 10
Should be: 11
TEST FAILED
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 7
Should be: 8
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 11
Should be: 12
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 11
Should be: 12
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 8
Should be: 9
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 11
Should be: 12
TEST FAILED
Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 6
Should be: 7
TEST FAILED
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 14
Should be: 15
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 12
Should be: 13
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 8
Should be: 9
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 7
Should be: 8
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 12
Should be: 13
TEST FAILED
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 10
Should be: 11
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 14
Should be: 15
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 8
Should be: 9
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 12
Should be: 13
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 12
Should be: 13
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 1
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 11
Should be: 12
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 12
Should be: 13
TEST FAILED
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 10
Should be: 11
TEST FAILED
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 7
Should be: 8
TEST FAILED
TESTING smithyCard():
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: 8
Should be 7
TEST FAILED
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: -4
Should be 7
TEST FAILED
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: 2
Should be 7
TEST FAILED
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: -3
Should be 7
TEST FAILED
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: -1
Should be 7
TEST FAILED
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: -3
Should be 7
TEST FAILED
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: 4
Should be 7
TEST FAILED
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: 5
Should be 7
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: 6
Should be 7
TEST FAILED
Card in players hand before random smithy calls: 5
Card in players hand after random smithy calls: 3
Should be 7
TEST FAILED
File 'dominion.c'
Lines executed:22.89% of 651
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     2380:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     2380:   11:  if (*(int*)a < *(int*)b)
      850:   12:    return -1;
     1530:   13:  return 0;
     2380:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       85:   44:  SelectStream(1);
       85:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      170:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       85:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1870:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    18700:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    16150:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     8500:   65:        }
      850:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       85:   73:  if (numPlayers == 2)
        -:   74:    {
       85:   75:      state->supplyCount[curse] = 10;
       85:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       85:   87:  if (numPlayers == 2)
        -:   88:    {
       85:   89:      state->supplyCount[estate] = 8;
       85:   90:      state->supplyCount[duchy] = 8;
       85:   91:      state->supplyCount[province] = 8;
       85:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       85:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       85:  102:  state->supplyCount[silver] = 40;
       85:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3570:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    28050:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    13175:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1615:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      170:  115:		  if (numPlayers == 2){ 
      170:  116:		    state->supplyCount[i] = 8; 
      170:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
      170:  119:		}
        -:  120:	      else
        -:  121:		{
      680:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      850:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    12325:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    12325:  130:	}
        -:  131:
     1700:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      510:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      170:  140:      state->deckCount[i] = 0;
     1360:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      510:  143:	  state->deck[i][j] = estate;
      510:  144:	  state->deckCount[i]++;
      510:  145:	}
     2720:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     1190:  148:	  state->deck[i][j] = copper;
     1190:  149:	  state->deckCount[i]++;		
     1190:  150:	}
      170:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      510:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      170:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      170:  160:    }
        -:  161:
        -:  162:  //draw player hands
      510:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      170:  166:      state->handCount[i] = 0;
      170:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      170:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4760:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     2295:  178:      state->embargoTokens[i] = 0;
     2295:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       85:  182:  state->outpostPlayed = 0;
       85:  183:  state->phase = 0;
       85:  184:  state->numActions = 1;
       85:  185:  state->numBuys = 1;
       85:  186:  state->playedCardCount = 0;
       85:  187:  state->whoseTurn = 0;
       85:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1020:  192:  for (it = 0; it < 5; it++){
      425:  193:    drawCard(state->whoseTurn, state);
      425:  194:  }
        -:  195:
       85:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       85:  198:  return 0;
       85:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      587:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      587:  209:  if (state->deckCount[player] < 1)
      417:  210:    return -1;
      170:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3740:  214:  while (state->deckCount[player] > 0) {
     1700:  215:    card = floor(Random() * state->deckCount[player]);
     1700:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1700:  217:    newDeckPos++;
    11900:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     4250:  219:      state->deck[player][i] = state->deck[player][i+1];
     4250:  220:    }
     1700:  221:    state->deckCount[player]--;
        -:  222:  }
     3740:  223:  for (i = 0; i < newDeckPos; i++) {
     1700:  224:    state->deck[player][i] = newDeck[i];
     1700:  225:    state->deckCount[player]++;
     1700:  226:  }
        -:  227:
      170:  228:  return 0;
      587:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1042:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      834:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
      417:  538:    state->deckCount[player] = state->discardCount[player];
      417:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      417:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      417:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      417:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      417:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      417:  559:    if (deckCounter == 0)
      417:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
      625:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      625:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      625:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      625:  576:    state->deckCount[player]--;
      625:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      625:  580:  return 0;
     1042:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646://adventurer function
        -:  647:int adventurerEffect(struct gameState *state, int currentPlayer) {
       55:  648:	int drawntreasure = 1;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       55:  651:	int z = 0; //temphand counter
        -:  652:	
      220:  653:      while(drawntreasure < 2){
       55:  654:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:	  shuffle(currentPlayer, state);
    #####:  656:	}
       55:  657:	drawCard(currentPlayer, state);
       55:  658:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       55:  659:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       55:  660:	  drawntreasure++;
        -:  661:	else{
    #####:  662:	  temphand[z]=cardDrawn;
    #####:  663:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:	  z++;
        -:  665:	}
        -:  666:      }
      110:  667:      while(z-1>=0){
    #####:  668:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:	z=z-1;
        -:  670:      }
       55:  671:      return 0;
        -:  672:}
        -:  673:  
        -:  674://smithy function
        -:  675:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -:  676:    int i;
        -:  677:	
        -:  678:	//+3 Cards
     1280:  679:    for (i = 0; i <= 3; i++)
        -:  680:	{
      512:  681:	  drawCard(currentPlayer, state);
      512:  682:	}
        -:  683:			
        -:  684:      //discard card from hand
      128:  685:      discardCard(handPos, currentPlayer, state, 0);
      128:  686:      return 0;
        -:  687:}
        -:  688:  
        -:  689://village function
        -:  690:int villageEffect(struct gameState *state, int currentPlayer, int handPos) {
        -:  691:    //+1 Card
       50:  692:    drawCard(currentPlayer, state);
        -:  693:			
        -:  694:    //+2 Actions
       50:  695:    state->numActions = state->numActions + 2;
        -:  696:			
        -:  697:    //discard played card from hand
       50:  698:    discardCard(handPos, currentPlayer, state, 0);
       50:  699:    return 0;  
        -:  700:}
        -:  701:  
        -:  702:// great hall function
        -:  703:int greathallEffect(struct gameState *state, int currentPlayer, int handPos) {
        -:  704:      //+1 Card
    #####:  705:      drawCard(currentPlayer, state);
        -:  706:			
        -:  707:      //discard card from hand
    #####:  708:      discardCard(handPos, currentPlayer, state, 0);
    #####:  709:      return 0;
        -:  710:}  
        -:  711:  
        -:  712://embargo function
        -:  713:int embargoEffect(struct gameState *state, int currentPlayer, int handPos, int choice1) {
        -:  714:      //+2 Coins
    #####:  715:      state->coins = state->coins + 2;
        -:  716:			
        -:  717:      //see if selected pile is in play
    #####:  718:      if ( state->supplyCount[choice1] == -1 )
        -:  719:	{
    #####:  720:	  return -1;
        -:  721:	}
        -:  722:			
        -:  723:      //add embargo token to selected supply pile
    #####:  724:      state->embargoTokens[choice1]++;
        -:  725:			
        -:  726:      //trash card
    #####:  727:      discardCard(handPos, currentPlayer, state, 0);		
    #####:  728:      return 0;
    #####:  729:}
        -:  730:
        -:  731:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  732:{
        -:  733:  int i;
        -:  734:  int j;
        -:  735:  int k;
        -:  736:  int x;
        -:  737:  int index;
    #####:  738:  int currentPlayer = whoseTurn(state);
    #####:  739:  int nextPlayer = currentPlayer + 1;
        -:  740:
    #####:  741:  int tributeRevealedCards[2] = {-1, -1};
        -:  742:  int temphand[MAX_HAND];// moved above the if statement
    #####:  743:  int drawntreasure=0;
        -:  744:  int cardDrawn;
    #####:  745:  int z = 0;// this is the counter for the temp hand
    #####:  746:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  747:    nextPlayer = 0;
    #####:  748:  }
        -:  749:  
        -:  750:  
        -:  751:
        -:  752:	
        -:  753:  //uses switch to select card and perform actions
    #####:  754:  switch( card ) 
        -:  755:    {
        -:  756:    case adventurer:
    #####:  757:      adventurerEffect(state, currentPlayer);
    #####:  758:      return 0;
        -:  759:	  break;
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
    #####:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
    #####:  765:	  drawCard(currentPlayer, state);
    #####:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
    #####:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
    #####:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
    #####:  774:	  if ( i != currentPlayer )
        -:  775:	    {
    #####:  776:	      drawCard(i, state);
    #####:  777:	    }
    #####:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
    #####:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
    #####:  903:	  smithyEffect(state, currentPlayer, handPos);
    #####:  904:	  return 0;
        -:  905:	  break;
        -:  906:		
        -:  907:    case village:
    #####:  908:      villageEffect(state, currentPlayer, handPos);
    #####:  909:      return 0;
        -:  910:	  break;
        -:  911:		
        -:  912:    case baron:
    #####:  913:      state->numBuys++;//Increase buys by 1!
    #####:  914:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  915:	int p = 0;//Iterator for hand!
    #####:  916:	int card_not_discarded = 1;//Flag for discard set!
    #####:  917:	while(card_not_discarded){
    #####:  918:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  919:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  920:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  921:	    state->discardCount[currentPlayer]++;
    #####:  922:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  923:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  924:	    }
    #####:  925:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  926:	    state->handCount[currentPlayer]--;
    #####:  927:	    card_not_discarded = 0;//Exit the loop
    #####:  928:	  }
    #####:  929:	  else if (p > state->handCount[currentPlayer]){
        -:  930:	    if(DEBUG) {
        -:  931:	      printf("No estate cards in your hand, invalid choice\n");
        -:  932:	      printf("Must gain an estate if there are any\n");
        -:  933:	    }
    #####:  934:	    if (supplyCount(estate, state) > 0){
    #####:  935:	      gainCard(estate, state, 0, currentPlayer);
    #####:  936:	      state->supplyCount[estate]--;//Decrement estates
    #####:  937:	      if (supplyCount(estate, state) == 0){
    #####:  938:		isGameOver(state);
    #####:  939:	      }
    #####:  940:	    }
    #####:  941:	    card_not_discarded = 0;//Exit the loop
    #####:  942:	  }
        -:  943:			    
        -:  944:	  else{
    #####:  945:	    p++;//Next card
        -:  946:	  }
        -:  947:	}
    #####:  948:      }
        -:  949:			    
        -:  950:      else{
    #####:  951:	if (supplyCount(estate, state) > 0){
    #####:  952:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  953:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  954:	  if (supplyCount(estate, state) == 0){
    #####:  955:	    isGameOver(state);
    #####:  956:	  }
    #####:  957:	}
        -:  958:      }
        -:  959:	    
        -:  960:      
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case great_hall:
    #####:  964:      greathallEffect(state, currentPlayer, handPos);
    #####:  965:      return 0;
        -:  966:	  break;
        -:  967:		
        -:  968:    case minion:
        -:  969:      //+1 action
    #####:  970:      state->numActions++;
        -:  971:			
        -:  972:      //discard card from hand
    #####:  973:      discardCard(handPos, currentPlayer, state, 0);
        -:  974:			
    #####:  975:      if (choice1)		//+2 coins
        -:  976:	{
    #####:  977:	  state->coins = state->coins + 2;
    #####:  978:	}
        -:  979:			
    #####:  980:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  981:	{
        -:  982:	  //discard hand
    #####:  983:	  while(numHandCards(state) > 0)
        -:  984:	    {
    #####:  985:	      discardCard(handPos, currentPlayer, state, 0);
        -:  986:	    }
        -:  987:				
        -:  988:	  //draw 4
    #####:  989:	  for (i = 0; i < 4; i++)
        -:  990:	    {
    #####:  991:	      drawCard(currentPlayer, state);
    #####:  992:	    }
        -:  993:				
        -:  994:	  //other players discard hand and redraw if hand size > 4
    #####:  995:	  for (i = 0; i < state->numPlayers; i++)
        -:  996:	    {
    #####:  997:	      if (i != currentPlayer)
        -:  998:		{
    #####:  999:		  if ( state->handCount[i] > 4 )
        -: 1000:		    {
        -: 1001:		      //discard hand
    #####: 1002:		      while( state->handCount[i] > 0 )
        -: 1003:			{
    #####: 1004:			  discardCard(handPos, i, state, 0);
        -: 1005:			}
        -: 1006:							
        -: 1007:		      //draw 4
    #####: 1008:		      for (j = 0; j < 4; j++)
        -: 1009:			{
    #####: 1010:			  drawCard(i, state);
    #####: 1011:			}
    #####: 1012:		    }
    #####: 1013:		}
    #####: 1014:	    }
        -: 1015:				
    #####: 1016:	}
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case steward:
    #####: 1020:      if (choice1 == 1)
        -: 1021:	{
        -: 1022:	  //+2 cards
    #####: 1023:	  drawCard(currentPlayer, state);
    #####: 1024:	  drawCard(currentPlayer, state);
    #####: 1025:	}
    #####: 1026:      else if (choice1 == 2)
        -: 1027:	{
        -: 1028:	  //+2 coins
    #####: 1029:	  state->coins = state->coins + 2;
    #####: 1030:	}
        -: 1031:      else
        -: 1032:	{
        -: 1033:	  //trash 2 cards in hand
    #####: 1034:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1035:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1036:	}
        -: 1037:			
        -: 1038:      //discard card from hand
    #####: 1039:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case tribute:
    #####: 1043:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1044:	if (state->deckCount[nextPlayer] > 0){
    #####: 1045:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	  state->deckCount[nextPlayer]--;
    #####: 1047:	}
    #####: 1048:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1050:	  state->discardCount[nextPlayer]--;
    #####: 1051:	}
        -: 1052:	else{
        -: 1053:	  //No Card to Reveal
        -: 1054:	  if (DEBUG){
        -: 1055:	    printf("No cards to reveal\n");
        -: 1056:	  }
        -: 1057:	}
    #####: 1058:      }
        -: 1059:	    
        -: 1060:      else{
    #####: 1061:	if (state->deckCount[nextPlayer] == 0){
    #####: 1062:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1063:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1064:	    state->deckCount[nextPlayer]++;
    #####: 1065:	    state->discard[nextPlayer][i] = -1;
    #####: 1066:	    state->discardCount[nextPlayer]--;
    #####: 1067:	  }
        -: 1068:			    
    #####: 1069:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1070:	} 
    #####: 1071:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1072:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1073:	state->deckCount[nextPlayer]--;
    #####: 1074:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
        -: 1077:      }    
        -: 1078:		       
    #####: 1079:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1080:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1081:	state->playedCardCount++;
    #####: 1082:	tributeRevealedCards[1] = -1;
    #####: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i <= 2; i ++){
    #####: 1086:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1087:	  state->coins += 2;
    #####: 1088:	}
        -: 1089:		    
    #####: 1090:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1091:	  drawCard(currentPlayer, state);
    #####: 1092:	  drawCard(currentPlayer, state);
    #####: 1093:	}
        -: 1094:	else{//Action Card
    #####: 1095:	  state->numActions = state->numActions + 2;
        -: 1096:	}
    #####: 1097:      }
        -: 1098:	    
    #####: 1099:      return 0;
        -: 1100:		
        -: 1101:    case ambassador:
    #####: 1102:      j = 0;		//used to check if player has enough cards to discard
        -: 1103:
    #####: 1104:      if (choice2 > 2 || choice2 < 0)
        -: 1105:	{
    #####: 1106:	  return -1;				
        -: 1107:	}
        -: 1108:
    #####: 1109:      if (choice1 == handPos)
        -: 1110:	{
    #####: 1111:	  return -1;
        -: 1112:	}
        -: 1113:
    #####: 1114:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	{
    #####: 1116:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1117:	    {
    #####: 1118:	      j++;
    #####: 1119:	    }
    #####: 1120:	}
    #####: 1121:      if (j < choice2)
        -: 1122:	{
    #####: 1123:	  return -1;				
        -: 1124:	}
        -: 1125:
        -: 1126:      if (DEBUG) 
        -: 1127:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1128:
        -: 1129:      //increase supply count for choosen card by amount being discarded
    #####: 1130:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1131:			
        -: 1132:      //each other player gains a copy of revealed card
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:	{
    #####: 1135:	  if (i != currentPlayer)
        -: 1136:	    {
    #####: 1137:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1138:	    }
    #####: 1139:	}
        -: 1140:
        -: 1141:      //discard played card from hand
    #####: 1142:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1143:
        -: 1144:      //trash copies of cards returned to supply
    #####: 1145:      for (j = 0; j < choice2; j++)
        -: 1146:	{
    #####: 1147:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1148:	    {
    #####: 1149:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1150:		{
    #####: 1151:		  discardCard(i, currentPlayer, state, 1);
    #####: 1152:		  break;
        -: 1153:		}
    #####: 1154:	    }
    #####: 1155:	}			
        -: 1156:
    #####: 1157:      return 0;
        -: 1158:		
        -: 1159:    case cutpurse:
        -: 1160:
    #####: 1161:      updateCoins(currentPlayer, state, 2);
    #####: 1162:      for (i = 0; i < state->numPlayers; i++)
        -: 1163:	{
    #####: 1164:	  if (i != currentPlayer)
        -: 1165:	    {
    #####: 1166:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1167:		{
    #####: 1168:		  if (state->hand[i][j] == copper)
        -: 1169:		    {
    #####: 1170:		      discardCard(j, i, state, 0);
    #####: 1171:		      break;
        -: 1172:		    }
    #####: 1173:		  if (j == state->handCount[i])
        -: 1174:		    {
    #####: 1175:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1176:			{
        -: 1177:			  if (DEBUG)
        -: 1178:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1179:			}	
    #####: 1180:		      break;
        -: 1181:		    }		
    #####: 1182:		}
        -: 1183:					
    #####: 1184:	    }
        -: 1185:				
    #####: 1186:	}				
        -: 1187:
        -: 1188:      //discard played card from hand
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1190:
    #####: 1191:      return 0;
        -: 1192:
        -: 1193:		
        -: 1194:    case embargo: 
    #####: 1195:		embargoEffect(state, currentPlayer, handPos, choice1);
    #####: 1196:		break;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    #####: 1224:	if (i != currentPlayer){
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1228:	}
    #####: 1229:      }
    #####: 1230:      return 0;
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
        -: 1241:	    }
    #####: 1242:	}
    #####: 1243:      if (index > -1)
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return -1;
    #####: 1264:}
        -: 1265:
        -: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
      178: 1270:  if (trashFlag < 1)
        -: 1271:    {
        -: 1272:      //add card to played pile
      178: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      178: 1274:      state->playedCardCount++;
      178: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
      178: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
      178: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
        4: 1284:      state->handCount[currentPlayer]--;
        4: 1285:    }
      174: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    #####: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
      174: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
      174: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
      174: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
      178: 1301:  return 0;
        -: 1302:}
        -: 1303:
        -: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1309:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
    #####: 1319:  if (toFlag == 1)
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
    #####: 1323:    }
    #####: 1324:  else if (toFlag == 2)
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
    #####: 1328:    }
        -: 1329:  else
        -: 1330:    {
    #####: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
    #####: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
    #####: 1338:  return 0;
    #####: 1339:}
        -: 1340:
        -: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
       85: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
     1020: 1349:  for (i = 0; i < state->handCount[player]; i++)
        -: 1350:    {
      425: 1351:      if (state->hand[player][i] == copper)
        -: 1352:	{
      340: 1353:	  state->coins += 1;
      340: 1354:	}
       85: 1355:      else if (state->hand[player][i] == silver)
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
    #####: 1358:	}
       85: 1359:      else if (state->hand[player][i] == gold)
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
    #####: 1362:	}	
      425: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
       85: 1366:  state->coins += bonus;
        -: 1367:
       85: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
