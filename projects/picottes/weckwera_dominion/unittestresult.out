TESTING smithyCard():
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
TESTING villlageCard():
Actions in players hand before village: 0
Actions in players hand after village: 4
Should be: 2
TEST FAILED
Actions in players hand before village: 4
Actions in players hand after village: 8
Should be: 4
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 12
Should be: 6
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 16
Should be: 8
TEST FAILED
Actions in players hand before village: 16
Actions in players hand after village: 20
Should be: 10
TEST FAILED
Actions in players hand before village: 1
Actions in players hand after village: 5
Should be: 2
TEST FAILED
Actions in players hand before village: 5
Actions in players hand after village: 9
Should be: 4
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 13
Should be: 6
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 17
Should be: 8
TEST FAILED
Actions in players hand before village: 17
Actions in players hand after village: 21
Should be: 10
TEST FAILED
Actions in players hand before village: 2
Actions in players hand after village: 6
Should be: 2
TEST FAILED
Actions in players hand before village: 6
Actions in players hand after village: 10
Should be: 4
TEST FAILED
Actions in players hand before village: 10
Actions in players hand after village: 14
Should be: 6
TEST FAILED
Actions in players hand before village: 14
Actions in players hand after village: 18
Should be: 8
TEST FAILED
Actions in players hand before village: 18
Actions in players hand after village: 22
Should be: 10
TEST FAILED
Actions in players hand before village: 3
Actions in players hand after village: 7
Should be: 2
TEST FAILED
Actions in players hand before village: 7
Actions in players hand after village: 11
Should be: 4
TEST FAILED
Actions in players hand before village: 11
Actions in players hand after village: 15
Should be: 6
TEST FAILED
Actions in players hand before village: 15
Actions in players hand after village: 19
Should be: 8
TEST FAILED
Actions in players hand before village: 19
Actions in players hand after village: 23
Should be: 10
TEST FAILED
Actions in players hand before village: 4
Actions in players hand after village: 8
Should be: 2
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 12
Should be: 4
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 16
Should be: 6
TEST FAILED
Actions in players hand before village: 16
Actions in players hand after village: 20
Should be: 8
TEST FAILED
Actions in players hand before village: 20
Actions in players hand after village: 24
Should be: 10
TEST FAILED
Actions in players hand before village: 5
Actions in players hand after village: 9
Should be: 2
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 13
Should be: 4
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 17
Should be: 6
TEST FAILED
Actions in players hand before village: 17
Actions in players hand after village: 21
Should be: 8
TEST FAILED
Actions in players hand before village: 21
Actions in players hand after village: 25
Should be: 10
TEST FAILED
Actions in players hand before village: 6
Actions in players hand after village: 10
Should be: 2
TEST FAILED
Actions in players hand before village: 10
Actions in players hand after village: 14
Should be: 4
TEST FAILED
Actions in players hand before village: 14
Actions in players hand after village: 18
Should be: 6
TEST FAILED
Actions in players hand before village: 18
Actions in players hand after village: 22
Should be: 8
TEST FAILED
Actions in players hand before village: 22
Actions in players hand after village: 26
Should be: 10
TEST FAILED
Actions in players hand before village: 7
Actions in players hand after village: 11
Should be: 2
TEST FAILED
Actions in players hand before village: 11
Actions in players hand after village: 15
Should be: 4
TEST FAILED
Actions in players hand before village: 15
Actions in players hand after village: 19
Should be: 6
TEST FAILED
Actions in players hand before village: 19
Actions in players hand after village: 23
Should be: 8
TEST FAILED
Actions in players hand before village: 23
Actions in players hand after village: 27
Should be: 10
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 12
Should be: 2
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 16
Should be: 4
TEST FAILED
Actions in players hand before village: 16
Actions in players hand after village: 20
Should be: 6
TEST FAILED
Actions in players hand before village: 20
Actions in players hand after village: 24
Should be: 8
TEST FAILED
Actions in players hand before village: 24
Actions in players hand after village: 28
Should be: 10
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 13
Should be: 2
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 17
Should be: 4
TEST FAILED
Actions in players hand before village: 17
Actions in players hand after village: 21
Should be: 6
TEST FAILED
Actions in players hand before village: 21
Actions in players hand after village: 25
Should be: 8
TEST FAILED
Actions in players hand before village: 25
Actions in players hand after village: 29
Should be: 10
TEST FAILED
TESTING adventurer():
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
All tests passed!
TESTING Adventurer():
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 12
Should be: 12
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 7
Should be: 7
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 12
Should be: 12
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 13
Should be: 13
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 12
Should be: 12
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 13
Should be: 13
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 13
Should be: 13
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 7
Should be: 7
Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 7
Should be: 7
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 7
Should be: 7
File 'dominion.c'
Lines executed:24.24% of 660
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     2100:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     2100:   11:  if (*(int*)a < *(int*)b)
      750:   12:    return -1;
     1350:   13:  return 0;
     2100:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       75:   44:  SelectStream(1);
       75:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      150:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       75:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1650:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    16500:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    14250:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     7500:   65:        }
      750:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       75:   73:  if (numPlayers == 2)
        -:   74:    {
       75:   75:      state->supplyCount[curse] = 10;
       75:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       75:   87:  if (numPlayers == 2)
        -:   88:    {
       75:   89:      state->supplyCount[estate] = 8;
       75:   90:      state->supplyCount[duchy] = 8;
       75:   91:      state->supplyCount[province] = 8;
       75:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       75:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       75:  102:  state->supplyCount[silver] = 40;
       75:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3150:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    24750:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    11625:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1425:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      150:  115:		  if (numPlayers == 2){
      150:  116:		    state->supplyCount[i] = 8;
      150:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
      150:  119:		}
        -:  120:	      else
        -:  121:		{
      600:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      750:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    10875:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    10875:  130:	}
        -:  131:
     1500:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      450:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      150:  140:      state->deckCount[i] = 0;
     1200:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      450:  143:	  state->deck[i][j] = estate;
      450:  144:	  state->deckCount[i]++;
      450:  145:	}
     2400:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     1050:  148:	  state->deck[i][j] = copper;
     1050:  149:	  state->deckCount[i]++;
     1050:  150:	}
      150:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      450:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      150:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      150:  160:    }
        -:  161:
        -:  162:  //draw player hands
      450:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
      150:  166:      state->handCount[i] = 0;
      150:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      150:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     4200:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     2025:  178:      state->embargoTokens[i] = 0;
     2025:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       75:  182:  state->outpostPlayed = 0;
       75:  183:  state->phase = 0;
       75:  184:  state->numActions = 1;
       75:  185:  state->numBuys = 1;
       75:  186:  state->playedCardCount = 0;
       75:  187:  state->whoseTurn = 0;
       75:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      900:  192:  for (it = 0; it < 5; it++){
      375:  193:    drawCard(state->whoseTurn, state);
      375:  194:  }
        -:  195:
       75:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       75:  198:  return 0;
       75:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      252:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      252:  209:  if (state->deckCount[player] < 1)
      102:  210:    return -1;
      150:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3300:  214:  while (state->deckCount[player] > 0) {
     1500:  215:    card = floor(Random() * state->deckCount[player]);
     1500:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1500:  217:    newDeckPos++;
    10500:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     3750:  219:      state->deck[player][i] = state->deck[player][i+1];
     3750:  220:    }
     1500:  221:    state->deckCount[player]--;
        -:  222:  }
     3300:  223:  for (i = 0; i < newDeckPos; i++) {
     1500:  224:    state->deck[player][i] = newDeck[i];
     1500:  225:    state->deckCount[player]++;
     1500:  226:  }
        -:  227:
      150:  228:  return 0;
      252:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
      105:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      750:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      152:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
       76:  538:    state->deckCount[player] = state->discardCount[player];
       76:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       76:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       76:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       76:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       76:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       76:  559:    if (deckCounter == 0)
       76:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
      674:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      674:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      674:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      674:  576:    state->deckCount[player]--;
      674:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      674:  580:  return 0;
      750:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
        -:  646://Function for refactored and buggy adventurer card
        -:  647:int adventurerCard(struct gameState *state)
        -:  648:{
       55:  649:  int currentPlayer = whoseTurn(state);
        -:  650:  int temphand[MAX_HAND];// moved above the if statement
       55:  651:  int drawntreasure=0;
        -:  652:  int cardDrawn;
       55:  653:  int z = 0;// this is the counter for the temp hand
        -:  654:
      460:  655:  while(drawntreasure<2){
      175:  656:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       26:  657:	  shuffle(currentPlayer, state);
       26:  658:	}
      175:  659:	drawCard(currentPlayer, state);
        -:  660:    /*
        -:  661:     * INTRODUCED BUG HERE
        -:  662:     */
        -:  663:	//original: cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
      175:  664:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-2];
        -:  665:    //top card of hand is second-most recently drawn card.
        -:  666:    /*
        -:  667:     * END BUG
        -:  668:     */
        -:  669:
      305:  670:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      110:  671:	  drawntreasure++;
        -:  672:	else{
       65:  673:	  temphand[z]=cardDrawn;
       65:  674:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       65:  675:	  z++;
        -:  676:	}
        -:  677:      }
      240:  678:      while(z-1>=0){
       65:  679:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       65:  680:	z=z-1;
        -:  681:      }
       55:  682:      return 0;
        -:  683:}
        -:  684:
        -:  685://Function for refactored and buggy smithy card
        -:  686:int smithyCard(int handPos, struct gameState *state)
        -:  687:{
       50:  688:  int currentPlayer = whoseTurn(state);
        -:  689:  int i;
        -:  690:
        -:  691:   //+3 Cards
      400:  692:      for (i = 0; i < 3; i++)
        -:  693:	{
        -:  694:     //BUG INTRODUCED HERE
        -:  695:	  //original: drawCard(currentPlayer, state);
      150:  696:	  drawCard(currentPlayer + 1, state);
        -:  697:      // END BUG
      150:  698:	}
        -:  699:
        -:  700:      //discard card from hand
       50:  701:      discardCard(handPos, currentPlayer, state, 0);
       50:  702:      return 0;
        -:  703:}
        -:  704:
        -:  705://Function for refactored and buggy village card
        -:  706:int villageCard(int currentPlayer, struct gameState *state, int handPos)
        -:  707:{
        -:  708:      //+1 Card
       50:  709:      drawCard(currentPlayer, state);
        -:  710:
        -:  711:      //+2 Actions
        -:  712:      //
        -:  713:      //BUG BEGINS
        -:  714:      // original: state->numActions = state->numActions + 2;
       50:  715:      state->numActions = state->numActions + 2;
       50:  716:      state->numActions = state->numActions + 2;
        -:  717:      //END BUG
        -:  718:
        -:  719:      //discard played card from hand
       50:  720:      discardCard(handPos, currentPlayer, state, 0);
       50:  721:      return 0;
        -:  722:}
        -:  723:
        -:  724://Function for the refactored and buggy Feast card
        -:  725:int feastCard(int card, int choice1, int choice2, int choice3, struct
        -:  726:        gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  727:{
        -:  728:  int i;
        -:  729:  int x;
    #####:  730:  int nextPlayer = currentPlayer + 1;
        -:  731:
        -:  732:  int temphand[MAX_HAND];// moved above the if statement
    #####:  733:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:    nextPlayer = 0;
    #####:  735:  }
        -:  736:      //gain card with cost up to 5
        -:  737:      //Backup hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  739:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  740:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  741:      }
        -:  742:      //Backup hand
        -:  743:
        -:  744:      //Update Coins for Buy
    #####:  745:      updateCoins(currentPlayer, state, 5);
    #####:  746:      x = 1;//Condition to loop on
    #####:  747:      while( x == 1) {//Buy one card
    #####:  748:	if (supplyCount(choice1, state) <= 0){
        -:  749:	  if (DEBUG)
        -:  750:	    printf("None of that card left, sorry!\n");
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  754:	  }
    #####:  755:	}
    #####:  756:	else if (state->coins < getCost(choice1)){
    #####:  757:	  printf("That card is too expensive!\n");
        -:  758:
        -:  759:	  if (DEBUG){
        -:  760:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  761:	  }
    #####:  762:	}
        -:  763:	else{
        -:  764:
        -:  765:	  if (DEBUG){
        -:  766:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  767:	  }
        -:  768:
    #####:  769:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  770:	  x = 0;//No more buying cards
        -:  771:
        -:  772:	  if (DEBUG){
        -:  773:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  774:	  }
        -:  775:
        -:  776:	}
        -:  777:      }
        -:  778:
        -:  779:      //Reset Hand
        -:  780:      // BUG INTRODUCED HERE
        -:  781:      //
        -:  782:      //original:
        -:  783://      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  784://	state->hand[currentPlayer][i] = temphand[i];
        -:  785://	temphand[i] = -1;
    #####:  786:      for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  787:	state->hand[currentPlayer][i] = temphand[i];
    #####:  788:	temphand[i] = -1;
    #####:  789:      }
        -:  790:      //END BUG
        -:  791:
        -:  792:
        -:  793:      //Reset Hand
        -:  794:
    #####:  795:      return 0;
        -:  796:}
        -:  797:
        -:  798://Function for the refactored Remodel card
        -:  799:int remodelCard(struct gameState *state, int currentPlayer,
        -:  800:        int choice1, int choice2, int handPos)
        -:  801:{
        -:  802:    int i;
        -:  803:    int j;
        -:  804:
    #####:  805:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  806:
    #####:  807:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  808:	{
    #####:  809:	  return -1;
        -:  810:	}
        -:  811:
    #####:  812:      gainCard(choice2, state, 0, currentPlayer);
        -:  813:
        -:  814:      //discard card from hand
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:
        -:  817:      //discard trashed card
    #####:  818:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  819:	{
    #####:  820:	  if (state->hand[currentPlayer][i] == j)
        -:  821:	    {
    #####:  822:	      discardCard(i, currentPlayer, state, 0);
    #####:  823:	      break;
        -:  824:	    }
    #####:  825:	}
        -:  826:
    #####:  827:  return 0;
    #####:  828:}
        -:  829:
        -:  830:
        -:  831:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  832:{
        -:  833:  int i;
        -:  834:  int j;
        -:  835:  int k;
        -:  836:  int x;
        -:  837:  int index;
    #####:  838:  int currentPlayer = whoseTurn(state);
    #####:  839:  int nextPlayer = currentPlayer + 1;
        -:  840:
    #####:  841:  int tributeRevealedCards[2] = {-1, -1};
        -:  842:  int temphand[MAX_HAND];// moved above the if statement
    #####:  843:  int drawntreasure=0;
        -:  844:  int cardDrawn;
    #####:  845:  int z = 0;// this is the counter for the temp hand
    #####:  846:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  847:    nextPlayer = 0;
    #####:  848:  }
        -:  849:
        -:  850:
        -:  851:  //uses switch to select card and perform actions
    #####:  852:  switch( card )
        -:  853:    {
        -:  854:    case adventurer:
    #####:  855:        adventurerCard(state);
        -:  856:    //  while(drawntreasure<2){
        -:  857:	//if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  858:	//  shuffle(currentPlayer, state);
        -:  859:	//}
        -:  860:	//drawCard(currentPlayer, state);
        -:  861:	//cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  862:	//if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  863:	//  drawntreasure++;
        -:  864:	//else{
        -:  865:	//  temphand[z]=cardDrawn;
        -:  866:	//  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  867:	//  z++;
        -:  868:	//}
        -:  869:    //  }
        -:  870:    //  while(z-1>=0){
        -:  871:	//state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  872:	//z=z-1;
        -:  873:    //  }
    #####:  874:      return 0;
        -:  875:
        -:  876:    case council_room:
        -:  877:      //+4 Cards
    #####:  878:      for (i = 0; i < 4; i++)
        -:  879:	{
    #####:  880:	  drawCard(currentPlayer, state);
    #####:  881:	}
        -:  882:
        -:  883:      //+1 Buy
    #####:  884:      state->numBuys++;
        -:  885:
        -:  886:      //Each other player draws a card
    #####:  887:      for (i = 0; i < state->numPlayers; i++)
        -:  888:	{
    #####:  889:	  if ( i != currentPlayer )
        -:  890:	    {
    #####:  891:	      drawCard(i, state);
    #####:  892:	    }
    #####:  893:	}
        -:  894:
        -:  895:      //put played card in played card pile
    #####:  896:      discardCard(handPos, currentPlayer, state, 0);
        -:  897:
    #####:  898:      return 0;
        -:  899:
        -:  900:    case feast:
    #####:  901:        feastCard(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  902:
        -:  903: //     //gain card with cost up to 5
        -:  904: //     //Backup hand
        -:  905: //     for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  906: //   temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  907: //   state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  908: //     }
        -:  909: //     //Backup hand
        -:  910:
        -:  911: //     //Update Coins for Buy
        -:  912: //     updateCoins(currentPlayer, state, 5);
        -:  913: //     x = 1;//Condition to loop on
        -:  914: //     while( x == 1) {//Buy one card
        -:  915: //   if (supplyCount(choice1, state) <= 0){
        -:  916: //     if (DEBUG)
        -:  917: //       printf("None of that card left, sorry!\n");
        -:  918:
        -:  919: //     if (DEBUG){
        -:  920: //       printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  921: //     }
        -:  922: //   }
        -:  923: //   else if (state->coins < getCost(choice1)){
        -:  924: //     printf("That card is too expensive!\n");
        -:  925:
        -:  926: //     if (DEBUG){
        -:  927: //       printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  928: //     }
        -:  929: //   }
        -:  930: //   else{
        -:  931:
        -:  932: //     if (DEBUG){
        -:  933: //       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  934: //     }
        -:  935:
        -:  936: //     gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  937: //     x = 0;//No more buying cards
        -:  938:
        -:  939: //     if (DEBUG){
        -:  940: //       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  941: //     }
        -:  942:
        -:  943: //   }
        -:  944: //     }
        -:  945:
        -:  946: //     //Reset Hand
        -:  947: //     for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  948: //   state->hand[currentPlayer][i] = temphand[i];
        -:  949: //   temphand[i] = -1;
        -:  950: //     }
        -:  951: //     //Reset Hand
        -:  952:
    #####:  953:      return 0;
        -:  954:
        -:  955:    case gardens:
    #####:  956:      return -1;
        -:  957:
        -:  958:    case mine:
    #####:  959:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  960:
    #####:  961:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  962:	{
    #####:  963:	  return -1;
        -:  964:	}
        -:  965:
    #####:  966:      if (choice2 > treasure_map || choice2 < curse)
        -:  967:	{
    #####:  968:	  return -1;
        -:  969:	}
        -:  970:
    #####:  971:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  972:	{
    #####:  973:	  return -1;
        -:  974:	}
        -:  975:
    #####:  976:      gainCard(choice2, state, 2, currentPlayer);
        -:  977:
        -:  978:      //discard card from hand
    #####:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:
        -:  981:      //discard trashed card
    #####:  982:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  983:	{
    #####:  984:	  if (state->hand[currentPlayer][i] == j)
        -:  985:	    {
    #####:  986:	      discardCard(i, currentPlayer, state, 0);
    #####:  987:	      break;
        -:  988:	    }
    #####:  989:	}
        -:  990:
    #####:  991:      return 0;
        -:  992:
        -:  993:    case remodel:
    #####:  994:    remodelCard(state, currentPlayer, choice1, choice2, handPos);
        -:  995://
        -:  996://      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  997://
        -:  998://      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  999://	{
        -: 1000://	  return -1;
        -: 1001://	}
        -: 1002://
        -: 1003://      gainCard(choice2, state, 0, currentPlayer);
        -: 1004://
        -: 1005://      //discard card from hand
        -: 1006://      discardCard(handPos, currentPlayer, state, 0);
        -: 1007://
        -: 1008://      //discard trashed card
        -: 1009://      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1010://	{
        -: 1011://	  if (state->hand[currentPlayer][i] == j)
        -: 1012://	    {
        -: 1013://	      discardCard(i, currentPlayer, state, 0);
        -: 1014://	      break;
        -: 1015://	    }
        -: 1016://	}
        -: 1017://
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case smithy:
    #####: 1021:      smithyCard(handPos, state);
        -: 1022:    //  //+3 Cards
        -: 1023:    //  for (i = 0; i < 3; i++)
        -: 1024:	//{
        -: 1025:	//  drawCard(currentPlayer, state);
        -: 1026:	//}
        -: 1027:
        -: 1028:    //  //discard card from hand
        -: 1029:    //  discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:
        -: 1032:    case village:
    #####: 1033:      villageCard(currentPlayer, state, handPos);
        -: 1034:
        -: 1035:      //for non-separate-function implementation:
        -: 1036:      ////+1 Card
        -: 1037:      //drawCard(currentPlayer, state);
        -: 1038:
        -: 1039:      ////+2 Actions
        -: 1040:      //state->numActions = state->numActions + 2;
        -: 1041:
        -: 1042:      ////discard played card from hand
        -: 1043:      //discardCard(handPos, currentPlayer, state, 0);
    #####: 1044:      return 0;
        -: 1045:
        -: 1046:    case baron:
    #####: 1047:      state->numBuys++;//Increase buys by 1!
    #####: 1048:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1049:	int p = 0;//Iterator for hand!
    #####: 1050:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1051:	while(card_not_discarded){
    #####: 1052:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1053:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1054:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1055:	    state->discardCount[currentPlayer]++;
    #####: 1056:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1057:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1058:	    }
    #####: 1059:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1060:	    state->handCount[currentPlayer]--;
    #####: 1061:	    card_not_discarded = 0;//Exit the loop
    #####: 1062:	  }
    #####: 1063:	  else if (p > state->handCount[currentPlayer]){
        -: 1064:	    if(DEBUG) {
        -: 1065:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1066:	      printf("Must gain an estate if there are any\n");
        -: 1067:	    }
    #####: 1068:	    if (supplyCount(estate, state) > 0){
    #####: 1069:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1070:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1071:	      if (supplyCount(estate, state) == 0){
    #####: 1072:		isGameOver(state);
    #####: 1073:	      }
    #####: 1074:	    }
    #####: 1075:	    card_not_discarded = 0;//Exit the loop
    #####: 1076:	  }
        -: 1077:
        -: 1078:	  else{
    #####: 1079:	    p++;//Next card
        -: 1080:	  }
        -: 1081:	}
    #####: 1082:      }
        -: 1083:
        -: 1084:      else{
    #####: 1085:	if (supplyCount(estate, state) > 0){
    #####: 1086:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1087:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1088:	  if (supplyCount(estate, state) == 0){
    #####: 1089:	    isGameOver(state);
    #####: 1090:	  }
    #####: 1091:	}
        -: 1092:      }
        -: 1093:
        -: 1094:
    #####: 1095:      return 0;
        -: 1096:
        -: 1097:    case great_hall:
        -: 1098:      //+1 Card
    #####: 1099:      drawCard(currentPlayer, state);
        -: 1100:
        -: 1101:      //+1 Actions
    #####: 1102:      state->numActions++;
        -: 1103:
        -: 1104:      //discard card from hand
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:      return 0;
        -: 1107:
        -: 1108:    case minion:
        -: 1109:      //+1 action
    #####: 1110:      state->numActions++;
        -: 1111:
        -: 1112:      //discard card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
    #####: 1115:      if (choice1)		//+2 coins
        -: 1116:	{
    #####: 1117:	  state->coins = state->coins + 2;
    #####: 1118:	}
        -: 1119:
    #####: 1120:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1121:	{
        -: 1122:	  //discard hand
    #####: 1123:	  while(numHandCards(state) > 0)
        -: 1124:	    {
    #####: 1125:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1126:	    }
        -: 1127:
        -: 1128:	  //draw 4
    #####: 1129:	  for (i = 0; i < 4; i++)
        -: 1130:	    {
    #####: 1131:	      drawCard(currentPlayer, state);
    #####: 1132:	    }
        -: 1133:
        -: 1134:	  //other players discard hand and redraw if hand size > 4
    #####: 1135:	  for (i = 0; i < state->numPlayers; i++)
        -: 1136:	    {
    #####: 1137:	      if (i != currentPlayer)
        -: 1138:		{
    #####: 1139:		  if ( state->handCount[i] > 4 )
        -: 1140:		    {
        -: 1141:		      //discard hand
    #####: 1142:		      while( state->handCount[i] > 0 )
        -: 1143:			{
    #####: 1144:			  discardCard(handPos, i, state, 0);
        -: 1145:			}
        -: 1146:
        -: 1147:		      //draw 4
    #####: 1148:		      for (j = 0; j < 4; j++)
        -: 1149:			{
    #####: 1150:			  drawCard(i, state);
    #####: 1151:			}
    #####: 1152:		    }
    #####: 1153:		}
    #####: 1154:	    }
        -: 1155:
    #####: 1156:	}
    #####: 1157:      return 0;
        -: 1158:
        -: 1159:    case steward:
    #####: 1160:      if (choice1 == 1)
        -: 1161:	{
        -: 1162:	  //+2 cards
    #####: 1163:	  drawCard(currentPlayer, state);
    #####: 1164:	  drawCard(currentPlayer, state);
    #####: 1165:	}
    #####: 1166:      else if (choice1 == 2)
        -: 1167:	{
        -: 1168:	  //+2 coins
    #####: 1169:	  state->coins = state->coins + 2;
    #####: 1170:	}
        -: 1171:      else
        -: 1172:	{
        -: 1173:	  //trash 2 cards in hand
    #####: 1174:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1175:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1176:	}
        -: 1177:
        -: 1178:      //discard card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case tribute:
    #####: 1183:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1184:	if (state->deckCount[nextPlayer] > 0){
    #####: 1185:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1186:	  state->deckCount[nextPlayer]--;
    #####: 1187:	}
    #####: 1188:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1189:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1190:	  state->discardCount[nextPlayer]--;
    #####: 1191:	}
        -: 1192:	else{
        -: 1193:	  //No Card to Reveal
        -: 1194:	  if (DEBUG){
        -: 1195:	    printf("No cards to reveal\n");
        -: 1196:	  }
        -: 1197:	}
    #####: 1198:      }
        -: 1199:
        -: 1200:      else{
    #####: 1201:	if (state->deckCount[nextPlayer] == 0){
    #####: 1202:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1203:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1204:	    state->deckCount[nextPlayer]++;
    #####: 1205:	    state->discard[nextPlayer][i] = -1;
    #####: 1206:	    state->discardCount[nextPlayer]--;
    #####: 1207:	  }
        -: 1208:
    #####: 1209:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1210:	}
    #####: 1211:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1212:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1213:	state->deckCount[nextPlayer]--;
    #####: 1214:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1215:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1216:	state->deckCount[nextPlayer]--;
        -: 1217:      }
        -: 1218:
    #####: 1219:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1220:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1221:	state->playedCardCount++;
    #####: 1222:	tributeRevealedCards[1] = -1;
    #####: 1223:      }
        -: 1224:
    #####: 1225:      for (i = 0; i <= 2; i ++){
    #####: 1226:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1227:	  state->coins += 2;
    #####: 1228:	}
        -: 1229:
    #####: 1230:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1231:	  drawCard(currentPlayer, state);
    #####: 1232:	  drawCard(currentPlayer, state);
    #####: 1233:	}
        -: 1234:	else{//Action Card
    #####: 1235:	  state->numActions = state->numActions + 2;
        -: 1236:	}
    #####: 1237:      }
        -: 1238:
    #####: 1239:      return 0;
        -: 1240:
        -: 1241:    case ambassador:
    #####: 1242:      j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:      if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:	  return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:      if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:	  return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:	    {
    #####: 1258:	      j++;
    #####: 1259:	    }
    #####: 1260:	}
    #####: 1261:      if (j < choice2)
        -: 1262:	{
    #####: 1263:	  return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:      if (DEBUG)
        -: 1267:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:      //increase supply count for choosen card by amount being discarded
    #####: 1270:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:      //each other player gains a copy of revealed card
    #####: 1273:      for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:	  if (i != currentPlayer)
        -: 1276:	    {
    #####: 1277:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1278:	    }
    #####: 1279:	}
        -: 1280:
        -: 1281:      //discard played card from hand
    #####: 1282:      discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:      //trash copies of cards returned to supply
    #####: 1285:      for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:	    {
    #####: 1289:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:		{
    #####: 1291:		  discardCard(i, currentPlayer, state, 1);
    #####: 1292:		  break;
        -: 1293:		}
    #####: 1294:	    }
    #####: 1295:	}
        -: 1296:
    #####: 1297:      return 0;
        -: 1298:
        -: 1299:    case cutpurse:
        -: 1300:
    #####: 1301:      updateCoins(currentPlayer, state, 2);
    #####: 1302:      for (i = 0; i < state->numPlayers; i++)
        -: 1303:	{
    #####: 1304:	  if (i != currentPlayer)
        -: 1305:	    {
    #####: 1306:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1307:		{
    #####: 1308:		  if (state->hand[i][j] == copper)
        -: 1309:		    {
    #####: 1310:		      discardCard(j, i, state, 0);
    #####: 1311:		      break;
        -: 1312:		    }
    #####: 1313:		  if (j == state->handCount[i])
        -: 1314:		    {
    #####: 1315:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1316:			{
        -: 1317:			  if (DEBUG)
        -: 1318:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1319:			}
    #####: 1320:		      break;
        -: 1321:		    }
    #####: 1322:		}
        -: 1323:
    #####: 1324:	    }
        -: 1325:
    #####: 1326:	}
        -: 1327:
        -: 1328:      //discard played card from hand
    #####: 1329:      discardCard(handPos, currentPlayer, state, 0);
        -: 1330:
    #####: 1331:      return 0;
        -: 1332:
        -: 1333:
        -: 1334:    case embargo:
        -: 1335:      //+2 Coins
    #####: 1336:      state->coins = state->coins + 2;
        -: 1337:
        -: 1338:      //see if selected pile is in play
    #####: 1339:      if ( state->supplyCount[choice1] == -1 )
        -: 1340:	{
    #####: 1341:	  return -1;
        -: 1342:	}
        -: 1343:
        -: 1344:      //add embargo token to selected supply pile
    #####: 1345:      state->embargoTokens[choice1]++;
        -: 1346:
        -: 1347:      //trash card
    #####: 1348:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1349:      return 0;
        -: 1350:
        -: 1351:    case outpost:
        -: 1352:      //set outpost flag
    #####: 1353:      state->outpostPlayed++;
        -: 1354:
        -: 1355:      //discard card
    #####: 1356:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1357:      return 0;
        -: 1358:
        -: 1359:    case salvager:
        -: 1360:      //+1 buy
    #####: 1361:      state->numBuys++;
        -: 1362:
    #####: 1363:      if (choice1)
        -: 1364:	{
        -: 1365:	  //gain coins equal to trashed card
    #####: 1366:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1367:	  //trash card
    #####: 1368:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1369:	}
        -: 1370:
        -: 1371:      //discard card
    #####: 1372:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1373:      return 0;
        -: 1374:
        -: 1375:    case sea_hag:
    #####: 1376:      for (i = 0; i < state->numPlayers; i++){
    #####: 1377:	if (i != currentPlayer){
    #####: 1378:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1379:	  state->discardCount[i]++;
    #####: 1380:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1381:	}
    #####: 1382:      }
    #####: 1383:      return 0;
        -: 1384:
        -: 1385:    case treasure_map:
        -: 1386:      //search hand for another treasure_map
    #####: 1387:      index = -1;
    #####: 1388:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1389:	{
    #####: 1390:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1391:	    {
    #####: 1392:	      index = i;
    #####: 1393:	      break;
        -: 1394:	    }
    #####: 1395:	}
    #####: 1396:      if (index > -1)
        -: 1397:	{
        -: 1398:	  //trash both treasure cards
    #####: 1399:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1400:	  discardCard(index, currentPlayer, state, 1);
        -: 1401:
        -: 1402:	  //gain 4 Gold cards
    #####: 1403:	  for (i = 0; i < 4; i++)
        -: 1404:	    {
    #####: 1405:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1406:	    }
        -: 1407:
        -: 1408:	  //return success
    #####: 1409:	  return 1;
        -: 1410:	}
        -: 1411:
        -: 1412:      //no second treasure_map found in hand
    #####: 1413:      return -1;
        -: 1414:    }
        -: 1415:
    #####: 1416:  return -1;
    #####: 1417:}
        -: 1418:
        -: 1419:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1420:{
        -: 1421:
        -: 1422:  //if card is not trashed, added to Played pile
      100: 1423:  if (trashFlag < 1)
        -: 1424:    {
        -: 1425:      //add card to played pile
      100: 1426:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      100: 1427:      state->playedCardCount++;
      100: 1428:    }
        -: 1429:
        -: 1430:  //set played card to -1
      100: 1431:  state->hand[currentPlayer][handPos] = -1;
        -: 1432:
        -: 1433:  //remove card from player's hand
      100: 1434:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1435:    {
        -: 1436:      //reduce number of cards in hand
       50: 1437:      state->handCount[currentPlayer]--;
       50: 1438:    }
       50: 1439:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1440:    {
        -: 1441:      //reduce number of cards in hand
    #####: 1442:      state->handCount[currentPlayer]--;
    #####: 1443:    }
        -: 1444:  else
        -: 1445:    {
        -: 1446:      //replace discarded card with last card in hand
       50: 1447:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1448:      //set last card to -1
       50: 1449:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1450:      //reduce number of cards in hand
       50: 1451:      state->handCount[currentPlayer]--;
        -: 1452:    }
        -: 1453:
      100: 1454:  return 0;
        -: 1455:}
        -: 1456:
        -: 1457:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1458:{
        -: 1459:  //Note: supplyPos is enum of choosen card
        -: 1460:
        -: 1461:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1462:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1463:    {
    #####: 1464:        printf ("Supply count = %d\n", supplyCount(supplyPos, state));
    #####: 1465:      return -1;
        -: 1466:    }
        -: 1467:
        -: 1468:  //added card for [whoseTurn] current player:
        -: 1469:  // toFlag = 0 : add to discard
        -: 1470:  // toFlag = 1 : add to deck
        -: 1471:  // toFlag = 2 : add to hand
        -: 1472:
    #####: 1473:  if (toFlag == 1)
        -: 1474:    {
    #####: 1475:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1476:      state->deckCount[player]++;
    #####: 1477:    }
    #####: 1478:  else if (toFlag == 2)
        -: 1479:    {
    #####: 1480:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1481:      state->handCount[player]++;
    #####: 1482:    }
        -: 1483:  else
        -: 1484:    {
    #####: 1485:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1486:      state->discardCount[player]++;
        -: 1487:    }
        -: 1488:
        -: 1489:  //decrease number in supply pile
    #####: 1490:  state->supplyCount[supplyPos]--;
        -: 1491:
    #####: 1492:  return 0;
    #####: 1493:}
        -: 1494:
        -: 1495:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1496:{
        -: 1497:  int i;
        -: 1498:
        -: 1499:  //reset coin count
       75: 1500:  state->coins = 0;
        -: 1501:
        -: 1502:  //add coins for each Treasure card in player's hand
      900: 1503:  for (i = 0; i < state->handCount[player]; i++)
        -: 1504:    {
      375: 1505:      if (state->hand[player][i] == copper)
        -: 1506:	{
      300: 1507:	  state->coins += 1;
      300: 1508:	}
       75: 1509:      else if (state->hand[player][i] == silver)
        -: 1510:	{
    #####: 1511:	  state->coins += 2;
    #####: 1512:	}
       75: 1513:      else if (state->hand[player][i] == gold)
        -: 1514:	{
    #####: 1515:	  state->coins += 3;
    #####: 1516:	}
      375: 1517:    }
        -: 1518:
        -: 1519:  //add bonus
       75: 1520:  state->coins += bonus;
        -: 1521:
       75: 1522:  return 0;
        -: 1523:}
        -: 1524:
        -: 1525://end of dominion.c
        -: 1526:
TESTING smithyCard():
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
Card in players hand before smithy: 5
Card in players hand after smithy: 4
Should be 7
TEST FAILED
Card in players hand before smithy: 4
Card in players hand after smithy: 3
Should be 6
TEST FAILED
Card in players hand before smithy: 3
Card in players hand after smithy: 2
Should be 5
TEST FAILED
Card in players hand before smithy: 2
Card in players hand after smithy: 1
Should be 4
TEST FAILED
Card in players hand before smithy: 1
Card in players hand after smithy: 0
Should be 3
TEST FAILED
TESTING villlageCard():
Actions in players hand before village: 0
Actions in players hand after village: 4
Should be: 2
TEST FAILED
Actions in players hand before village: 4
Actions in players hand after village: 8
Should be: 4
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 12
Should be: 6
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 16
Should be: 8
TEST FAILED
Actions in players hand before village: 16
Actions in players hand after village: 20
Should be: 10
TEST FAILED
Actions in players hand before village: 1
Actions in players hand after village: 5
Should be: 2
TEST FAILED
Actions in players hand before village: 5
Actions in players hand after village: 9
Should be: 4
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 13
Should be: 6
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 17
Should be: 8
TEST FAILED
Actions in players hand before village: 17
Actions in players hand after village: 21
Should be: 10
TEST FAILED
Actions in players hand before village: 2
Actions in players hand after village: 6
Should be: 2
TEST FAILED
Actions in players hand before village: 6
Actions in players hand after village: 10
Should be: 4
TEST FAILED
Actions in players hand before village: 10
Actions in players hand after village: 14
Should be: 6
TEST FAILED
Actions in players hand before village: 14
Actions in players hand after village: 18
Should be: 8
TEST FAILED
Actions in players hand before village: 18
Actions in players hand after village: 22
Should be: 10
TEST FAILED
Actions in players hand before village: 3
Actions in players hand after village: 7
Should be: 2
TEST FAILED
Actions in players hand before village: 7
Actions in players hand after village: 11
Should be: 4
TEST FAILED
Actions in players hand before village: 11
Actions in players hand after village: 15
Should be: 6
TEST FAILED
Actions in players hand before village: 15
Actions in players hand after village: 19
Should be: 8
TEST FAILED
Actions in players hand before village: 19
Actions in players hand after village: 23
Should be: 10
TEST FAILED
Actions in players hand before village: 4
Actions in players hand after village: 8
Should be: 2
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 12
Should be: 4
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 16
Should be: 6
TEST FAILED
Actions in players hand before village: 16
Actions in players hand after village: 20
Should be: 8
TEST FAILED
Actions in players hand before village: 20
Actions in players hand after village: 24
Should be: 10
TEST FAILED
Actions in players hand before village: 5
Actions in players hand after village: 9
Should be: 2
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 13
Should be: 4
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 17
Should be: 6
TEST FAILED
Actions in players hand before village: 17
Actions in players hand after village: 21
Should be: 8
TEST FAILED
Actions in players hand before village: 21
Actions in players hand after village: 25
Should be: 10
TEST FAILED
Actions in players hand before village: 6
Actions in players hand after village: 10
Should be: 2
TEST FAILED
Actions in players hand before village: 10
Actions in players hand after village: 14
Should be: 4
TEST FAILED
Actions in players hand before village: 14
Actions in players hand after village: 18
Should be: 6
TEST FAILED
Actions in players hand before village: 18
Actions in players hand after village: 22
Should be: 8
TEST FAILED
Actions in players hand before village: 22
Actions in players hand after village: 26
Should be: 10
TEST FAILED
Actions in players hand before village: 7
Actions in players hand after village: 11
Should be: 2
TEST FAILED
Actions in players hand before village: 11
Actions in players hand after village: 15
Should be: 4
TEST FAILED
Actions in players hand before village: 15
Actions in players hand after village: 19
Should be: 6
TEST FAILED
Actions in players hand before village: 19
Actions in players hand after village: 23
Should be: 8
TEST FAILED
Actions in players hand before village: 23
Actions in players hand after village: 27
Should be: 10
TEST FAILED
Actions in players hand before village: 8
Actions in players hand after village: 12
Should be: 2
TEST FAILED
Actions in players hand before village: 12
Actions in players hand after village: 16
Should be: 4
TEST FAILED
Actions in players hand before village: 16
Actions in players hand after village: 20
Should be: 6
TEST FAILED
Actions in players hand before village: 20
Actions in players hand after village: 24
Should be: 8
TEST FAILED
Actions in players hand before village: 24
Actions in players hand after village: 28
Should be: 10
TEST FAILED
Actions in players hand before village: 9
Actions in players hand after village: 13
Should be: 2
TEST FAILED
Actions in players hand before village: 13
Actions in players hand after village: 17
Should be: 4
TEST FAILED
Actions in players hand before village: 17
Actions in players hand after village: 21
Should be: 6
TEST FAILED
Actions in players hand before village: 21
Actions in players hand after village: 25
Should be: 8
TEST FAILED
Actions in players hand before village: 25
Actions in players hand after village: 29
Should be: 10
TEST FAILED
TESTING adventurer():
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Treasures in players hand before adventurer: 4
Treasures in players hand after adventurer: 6
Should be: 6
Hand = 4

Hand = 4

Hand = 1

Hand = 4

Hand = 4

Hand = 4

Hand = 6

Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 6
Should be: 6
All tests passed!
TESTING Adventurer():
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 13
Should be: 13
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 13
Should be: 13
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 13
Should be: 13
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 12
Should be: 12
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 13
Should be: 13
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 12
Should be: 12
Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 7
Should be: 7
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 11
Treasures in players hand after adventurer: 13
Should be: 13
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 12
Should be: 12
Treasures in players hand before adventurer: 5
Treasures in players hand after adventurer: 7
Should be: 7
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 0
Treasures in players hand after adventurer: 0
Should be: 2
TEST FAILED
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
Treasures in players hand before adventurer: 6
Treasures in players hand after adventurer: 8
Should be: 8
Treasures in players hand before adventurer: 9
Treasures in players hand after adventurer: 11
Should be: 11
Treasures in players hand before adventurer: 10
Treasures in players hand after adventurer: 12
Should be: 12
Treasures in players hand before adventurer: 13
Treasures in players hand after adventurer: 15
Should be: 15
Treasures in players hand before adventurer: 7
Treasures in players hand after adventurer: 9
Should be: 9
