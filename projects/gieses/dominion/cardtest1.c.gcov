        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define NOISY_TEST 0
        -:    9:
        -:   10://test adventurer function
function main called 1 returned 100% blocks executed 100%
        1:   11:int main(){
        -:   12:	int i;
        1:   13:	int numPlayers = 2;
        1:   14:	int p = 0;
        1:   15:	int seed = 1000;
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:	           , remodel, smithy, village, baron, great_hall};
        -:   18:	struct gameState G;
        -:   19:	
        1:   20:	printf("Testing adventurerCard()\n");
call    0 returned 100%
        -:   21:	
        1:   22:	memset(&G, 23, sizeof(struct gameState));
        1:   23:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   24:	
        1:   25:	G.discardCount[p] = 5;
        1:   26:	G.handCount[p] = 5;
        1:   27:	G.hand[p][0] = smithy;
        1:   28:	G.hand[p][1] = great_hall;
        1:   29:	G.hand[p][2] = adventurer;
        1:   30:	G.hand[p][3] = gold;
        1:   31:	G.hand[p][4] = silver;
        -:   32:	
        1:   33:	G.deck[p][0] = smithy;
        1:   34:	G.deck[p][1] = gold;
        1:   35:	G.deck[p][2] = estate;
        1:   36:	G.deck[p][3] = silver;
        1:   37:	G.deck[p][4] = adventurer;
        -:   38:	
        -:   39:	#if (NOISY_TEST == 1)
        -:   40:	printf("Pre player hand count: %d\n", G.handCount[p]);
        -:   41:	printf("Pre player discard count: %d\n", G.discardCount[p]);
        -:   42:	printf("Pre deck count: %d\n", G.deckCount[p]);
        -:   43:	#endif
        -:   44:	
        1:   45:	adventurerCard(&G);
call    0 returned 100%
        -:   46:	
        -:   47:	#if (NOISY_TEST == 1)
        -:   48:	printf("Post player hand count: %d\n", G.handCount[p]);
        -:   49:	printf("Post player discard count: %d\n", G.discardCount[p]);
        -:   50:	printf("Post deck count: %d\n", G.deckCount[p]);
        -:   51:	#endif
        -:   52:	
        1:   53:	if(G.hand[p][G.handCount[p - 1]] == silver){
        -:   54:		#if (NOISY_TEST == 1)
        -:   55:		printf("Test passed!\n");
        -:   56:		#endif
        -:   57:	}else{
        -:   58:		#if (NOISY_TEST == 1)
        -:   59:		printf("Test failed!\n");
        -:   60:		#endif
        -:   61:	}
        1:   62:	if(G.hand[p][G.handCount[p - 2]] == gold){
        -:   63:		#if (NOISY_TEST == 1)
        -:   64:		printf("Test passed!\n");
        -:   65:		#endif
        -:   66:	}else{
        -:   67:		#if (NOISY_TEST == 1)
        -:   68:		printf("Test failed!\n");
        -:   69:		#endif
        -:   70:	}
        -:   71:
        -:   72:	
        1:   73:	printf("All tests passed!\n");
call    0 returned 100%
        -:   74:	
        1:   75:	return 0;
        -:   76:}