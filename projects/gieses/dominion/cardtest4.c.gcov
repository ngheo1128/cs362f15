        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define NOISY_TEST 1
        -:    9:
        -:   10://test village function
function main called 1 returned 100% blocks executed 84%
        1:   11:int main(){
        -:   12:	int i;
        1:   13:	int numPlayers = 2;
        1:   14:	int p = 0;
        1:   15:	int seed = 1000;
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:	           , remodel, smithy, village, baron, great_hall};
        -:   18:	struct gameState G;
        -:   19:	
        1:   20:	printf("Testing village card()\n");
call    0 returned 100%
        -:   21:	
        1:   22:	memset(&G, 23, sizeof(struct gameState));
        1:   23:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   24:	
        1:   25:	G.discardCount[p] = 5;
        1:   26:	G.handCount[p] = 5;
        1:   27:	G.hand[p][0] = smithy;
        1:   28:	G.hand[p][1] = great_hall;
        1:   29:	G.hand[p][2] = adventurer;
        1:   30:	G.hand[p][3] = village;
        1:   31:	G.hand[p][4] = silver;
        -:   32:	
        1:   33:	int preHand = G.handCount[p];
        1:   34:	int preDiscard = G.discardCount[p];
        1:   35:	int preActions = G.numActions;
        -:   36:	
        -:   37:	#if (NOISY_TEST == 1)
        1:   38:	printf("Pre player hand count: %d\n", preHand);
call    0 returned 100%
        1:   39:	printf("Pre player discard count: %d\n", preDiscard);
call    0 returned 100%
        1:   40:	printf("Pre player action count: %d\n", preActions);
call    0 returned 100%
        -:   41:	#endif
        -:   42:	
        1:   43:	villageCard(&G, 3);
call    0 returned 100%
        -:   44:	
        -:   45:	#if (NOISY_TEST == 1)
        1:   46:	printf("Post player hand count: %d\n", G.handCount[p]);
call    0 returned 100%
        1:   47:	printf("Post player discard count: %d\n", G.discardCount[p]);
call    0 returned 100%
        1:   48:	printf("Post player action count: %d\n", G.numActions);
call    0 returned 100%
        -:   49:	#endif
        -:   50:	
        1:   51:	if(preHand == G.handCount[p]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   52:		#if (NOISY_TEST == 1)
        1:   53:		printf("Test passed!\n");
call    0 returned 100%
        -:   54:		#endif
        -:   55:	}else{
        -:   56:		#if (NOISY_TEST == 1)
    #####:   57:		printf("Test failed!\n");
call    0 never executed
        -:   58:		#endif
        -:   59:	}
        -:   60:	
        1:   61:	if(preDiscard < G.discardCount[p]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   62:		#if (NOISY_TEST == 1)
        1:   63:		printf("Test passed!\n");
call    0 returned 100%
        -:   64:		#endif
        -:   65:	}else{
        -:   66:		#if (NOISY_TEST == 1)
    #####:   67:		printf("Test failed!\n");
call    0 never executed
        -:   68:		#endif
        -:   69:	}
        -:   70:	
        1:   71:	if(preActions < G.numActions){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   72:		#if (NOISY_TEST == 1)
        1:   73:		printf("Test passed!\n");
call    0 returned 100%
        -:   74:		#endif
        -:   75:	}else{
        -:   76:		#if (NOISY_TEST == 1)
    #####:   77:		printf("Test failed!\n");
call    0 never executed
        -:   78:		#endif
        -:   79:	}
        -:   80:	
        1:   81:	return 0;
        -:   82:}