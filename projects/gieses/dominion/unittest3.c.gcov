        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define NOISY_TEST 0
        -:    9:
        -:   10://test isGameOver function
function main called 1 returned 100% blocks executed 83%
        1:   11:int main(){
        -:   12:	int i;
        1:   13:	int numPlayers = 2;
        1:   14:	int seed = 1000;
        -:   15:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   16:               , remodel, smithy, village, baron, great_hall};
        -:   17:	struct gameState G;
        -:   18:	
        1:   19:	printf("Testing isGameOver()\n");
call    0 returned 100%
        -:   20:	
        -:   21:	//check if all supplies full
        1:   22:	memset(&G, 23, sizeof(struct gameState));
        1:   23:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
       28:   24:	for (i = 0; i < treasure_map + 1; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:   25:		G.supplyCount[i] = 3;
        -:   26:	}
        -:   27:	//game should not be over
        1:   28:	assert(isGameOver(&G) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   29:	#if (NOISY_TEST == 1)
        -:   30:	printf("Passed!\n");
        -:   31:	#endif
        -:   32:	
        -:   33:	//check if province is 0, but there are other piles of cards are left
        1:   34:	memset(&G, 23, sizeof(struct gameState));
        1:   35:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   36:	G.supplyCount[3] = 0;
        -:   37:	//game should be over
        1:   38:	assert(isGameOver(&G) == 1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   39:	#if (NOISY_TEST == 1)
        -:   40:	printf("Passed!\n");
        -:   41:	#endif
        -:   42:	
        -:   43:	//check if province is not zero, and 1 supply empty
        1:   44:	memset(&G, 23, sizeof(struct gameState));
        1:   45:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   46:	G.supplyCount[3] = 3;
        -:   47:	//game should not be over
        1:   48:	assert(isGameOver(&G) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   49:	#if (NOISY_TEST == 1)
        -:   50:	printf("Passed!\n");
        -:   51:	#endif
        -:   52:	
        -:   53:	//check if province is not zero, and 2 supplies empty
        1:   54:	memset(&G, 23, sizeof(struct gameState));
        1:   55:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   56:	G.supplyCount[3] = 3;
        -:   57:	//game should not be over
        1:   58:	assert(isGameOver(&G) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   59:	#if (NOISY_TEST == 1)
        -:   60:	printf("Passed!\n");
        -:   61:	#endif
        -:   62:	
        -:   63:	//check if province is not 0, but all supplies are empty
        1:   64:	memset(&G, 23, sizeof(struct gameState));
        1:   65:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
       28:   66:	for (i = 0; i < treasure_map + 1; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:   67:		G.supplyCount[i] = 0;
        -:   68:	}
        1:   69:	G.supplyCount[3] = 3;
        -:   70:	//game should be over
        1:   71:	assert(isGameOver(&G) == 1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   72:	#if (NOISY_TEST == 1)
        -:   73:	printf("Passed!\n");
        -:   74:	#endif
        -:   75:	
        -:   76:	//check if all supplies are empty
        1:   77:	memset(&G, 23, sizeof(struct gameState));
        1:   78:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
       28:   79:	for (i = 0; i < treasure_map + 1; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:   80:		G.supplyCount[i] = 0;
        -:   81:	}
        -:   82:	//game should be over
        1:   83:	assert(isGameOver(&G) == 1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   84:	#if (NOISY_TEST == 1)
        -:   85:	printf("Passed!\n");
        -:   86:	#endif
        -:   87:	
        1:   88:	printf("All tests passed!\n");
call    0 returned 100%
        -:   89:	
        1:   90:	return 0;
        -:   91:}