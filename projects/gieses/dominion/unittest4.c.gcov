        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define NOISY_TEST 0
        -:    9:
        -:   10://test gainCard function
function main called 1 returned 100% blocks executed 70%
        1:   11:int main(){
        -:   12:	int i;
        1:   13:	int numPlayers = 2;
        1:   14:	int p = 0;
        1:   15:	int seed = 1000;
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:	           , remodel, smithy, village, baron, great_hall};
        -:   18:	struct gameState G;
        -:   19:	
        1:   20:	printf("Testing gainCard()\n");
call    0 returned 100%
        -:   21:	
        1:   22:	memset(&G, 23, sizeof(struct gameState));
        1:   23:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   24:	
        1:   25:	G.discardCount[p] = 7;
        1:   26:	G.deckCount[p] = 3;
        1:   27:	G.handCount[p] = 5;
        -:   28:	
        -:   29:	//check when the card chosen is empty
        1:   30:	G.supplyCount[0] = 0;
        -:   31:	#if (NOISY_TEST == 1)
        -:   32:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:   33:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:   34:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:   35:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:   36:	#endif
        1:   37:	assert(gainCard(0, &G, 0, 0) == -1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   38:	assert(gainCard(0, &G, 1, 0) == -1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   39:	assert(gainCard(0, &G, 2, 0) == -1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   40:	#if (NOISY_TEST == 1)
        -:   41:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:   42:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:   43:	printf("Post Hand: %d\n", G.handCount[p]);
        -:   44:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:   45:	#endif
        -:   46:	
        -:   47:	//reset
        1:   48:	G.deckCount[p] = 3;
        1:   49:	G.handCount[p] = 5;
        1:   50:	G.discardCount[p] = 7;
        -:   51:	
        -:   52:	//check discard when the card chosen is not empty
        1:   53:	G.supplyCount[0] = 6;
        -:   54:	#if (NOISY_TEST == 1)
        -:   55:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:   56:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:   57:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:   58:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:   59:	#endif
        1:   60:	assert(gainCard(0, &G, 0, 0) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   61:	#if (NOISY_TEST == 1)
        -:   62:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:   63:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:   64:	printf("Post Hand: %d\n", G.handCount[p]);
        -:   65:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:   66:	#endif
        -:   67:	
        -:   68:	//check deck when the card chosen is not empty
        -:   69:	#if (NOISY_TEST == 1)
        -:   70:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:   71:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:   72:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:   73:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:   74:	#endif
        1:   75:	assert(gainCard(0, &G, 1, 0) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   76:	#if (NOISY_TEST == 1)
        -:   77:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:   78:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:   79:	printf("Post Hand: %d\n", G.handCount[p]);
        -:   80:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:   81:	#endif
        -:   82:	
        -:   83:	//check hand when the card chosen is not empty
        -:   84:	#if (NOISY_TEST == 1)
        -:   85:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:   86:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:   87:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:   88:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:   89:	#endif
        1:   90:	assert(gainCard(0, &G, 2, 0) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   91:	#if (NOISY_TEST == 1)
        -:   92:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:   93:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:   94:	printf("Post Hand: %d\n", G.handCount[p]);
        -:   95:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:   96:	#endif
        -:   97:	
        -:   98:	//check when the flag value is negative, should add to discard pile
        -:   99:	#if (NOISY_TEST == 1)
        -:  100:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:  101:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:  102:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:  103:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:  104:	#endif
        1:  105:	assert(gainCard(0, &G, -10, 0) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  106:	#if (NOISY_TEST == 1)
        -:  107:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:  108:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:  109:	printf("Post Hand: %d\n", G.handCount[p]);
        -:  110:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:  111:	#endif
        -:  112:	
        -:  113:	//check when the flag value is over 2, should add to discard pile
        -:  114:	#if (NOISY_TEST == 1)
        -:  115:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:  116:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:  117:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:  118:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:  119:	#endif
        1:  120:	assert(gainCard(0, &G, 10, 0) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  121:	#if (NOISY_TEST == 1)
        -:  122:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:  123:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:  124:	printf("Post Hand: %d\n", G.handCount[p]);
        -:  125:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:  126:	#endif
        -:  127:	
        -:  128:	//check piles when they are empty
        1:  129:	G.supplyCount[0] = 6;
        1:  130:	G.deckCount[p] = 0;
        1:  131:	G.handCount[p] = 0;
        1:  132:	G.discardCount[p] = 0;
        -:  133:	#if (NOISY_TEST == 1)
        -:  134:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:  135:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:  136:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:  137:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:  138:	#endif
        1:  139:	assert(gainCard(0, &G, 0, 0) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  140:	#if (NOISY_TEST == 1)
        -:  141:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:  142:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:  143:	printf("Post Hand: %d\n", G.handCount[p]);
        -:  144:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:  145:	#endif
        -:  146:	
        -:  147:	#if (NOISY_TEST == 1)
        -:  148:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:  149:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:  150:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:  151:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:  152:	#endif
        1:  153:	assert(gainCard(0, &G, 1, 0) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  154:	#if (NOISY_TEST == 1)
        -:  155:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:  156:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:  157:	printf("Post Hand: %d\n", G.handCount[p]);
        -:  158:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:  159:	#endif
        -:  160:	
        -:  161:	#if (NOISY_TEST == 1)
        -:  162:	printf("Pre Discard: %d\n", G.discardCount[p]);
        -:  163:	printf("Pre Deck: %d\n", G.deckCount[p]);
        -:  164:	printf("Pre Hand: %d\n", G.handCount[p]);
        -:  165:	printf("Pre card count:%d\n", G.supplyCount[0]);
        -:  166:	#endif
        1:  167:	assert(gainCard(0, &G, 2, 0) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  168:	#if (NOISY_TEST == 1)
        -:  169:	printf("Post Discard: %d\n", G.discardCount[p]);
        -:  170:	printf("Post Deck: %d\n", G.deckCount[p]);
        -:  171:	printf("Post Hand: %d\n", G.handCount[p]);
        -:  172:	printf("Post card count:%d\n", G.supplyCount[0]);
        -:  173:	#endif
        -:  174:	
        1:  175:	printf("All tests passed!\n");
call    0 returned 100%
        -:  176:	
        1:  177:	return 0;
        -:  178:}