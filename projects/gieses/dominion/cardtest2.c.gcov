        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define NOISY_TEST 1
        -:    9:
        -:   10://test smithyCard function
function main called 1 returned 100% blocks executed 86%
        1:   11:int main(){
        -:   12:	int i;
        1:   13:	int numPlayers = 2;
        1:   14:	int p = 0;
        1:   15:	int seed = 1000;
        -:   16:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   17:	           , remodel, smithy, village, baron, great_hall};
        -:   18:	struct gameState G;
        -:   19:	
        1:   20:	printf("Testing smithyCard()\n");
call    0 returned 100%
        -:   21:	
        1:   22:	memset(&G, 23, sizeof(struct gameState));
        1:   23:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   24:	
        1:   25:	G.handCount[p] = 5;
        1:   26:	G.discardCount[p] = 5;
        1:   27:	G.hand[p][0] = smithy;
        1:   28:	G.hand[p][1] = great_hall;
        1:   29:	G.hand[p][2] = adventurer;
        1:   30:	G.hand[p][3] = village;
        1:   31:	G.hand[p][4] = silver;
        -:   32:	
        1:   33:	int preHand = G.handCount[p];
        1:   34:	int preDiscard = G.discardCount[p];
        -:   35:	
        -:   36:	#if (NOISY_TEST == 1)
        1:   37:	printf("Pre player hand count: %d\n", preHand);
call    0 returned 100%
        1:   38:	printf("Pre player discard count: %d\n", preDiscard);
call    0 returned 100%
        -:   39:	#endif
        -:   40:	
        1:   41:	smithyCard(&G, 0);
call    0 returned 100%
        -:   42:	
        -:   43:	#if (NOISY_TEST == 1)
        1:   44:	printf("Post player hand count: %d\n", G.handCount[p]);
call    0 returned 100%
        1:   45:	printf("Post player discard count: %d\n", G.discardCount[p]);
call    0 returned 100%
        -:   46:	#endif
        -:   47:	
        1:   48:	if(preHand < G.handCount[p]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   49:		#if (NOISY_TEST == 1)
        1:   50:		printf("Test passed!\n");
call    0 returned 100%
        -:   51:		#endif
        -:   52:	}else{
        -:   53:		#if (NOISY_TEST == 1)
    #####:   54:		printf("Test failed!\n");
call    0 never executed
        -:   55:		#endif
        -:   56:	}
        -:   57:	
        1:   58:	if(preDiscard < G.discardCount[p]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   59:		#if (NOISY_TEST == 1)
        1:   60:		printf("Test passed!\n");
call    0 returned 100%
        -:   61:		#endif
        -:   62:	}else{
        -:   63:		#if (NOISY_TEST == 1)
    #####:   64:		printf("Test failed!\n");
call    0 never executed
        -:   65:		#endif
        -:   66:	}
        -:   67:		
        1:   68:	return 0;
        -:   69:}
        -:   70:    