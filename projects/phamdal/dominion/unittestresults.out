unittest1.c:
TESTING getCost(): 
curse: 0 PASS
estate: 2 PASS
duchy: 5 PASS
province: 8 PASS
copper: 0 PASS
silver: 3 PASS
gold: 6 PASS
adventurer: 6 PASS
council room: 5 PASS
feast: 4 PASS
gardens: 4 PASS
mine: 5 PASS
remodel: 4 PASS
smithy: 4 PASS
village: 3 PASS
baron: 4 PASS
great hall: 3 PASS
minion: 5 PASS
steward: 3 PASS
tribute: 5 PASS
ambassador: 3 PASS
cutpurse: 4 PASS
embargo: 2 PASS
outpost: 5 PASS
salvager: 4 PASS
sea hag: 4 PASS
treasure map: 4 PASS
TESTING ENUM 27 (OUT OF BOUNDS): -1 PASS
NEGATIVE NUMBER TEST: -1 PASS
LARGE NUMBER: -1 PASS

File 'dominion.c'
Lines executed:5.22% of 575
Branches executed:6.71% of 417
Taken at least once:6.71% of 417
Calls executed:0.00% of 95
dominion.c:creating 'dominion.c.gcov'

unittest2.c:
TESTING drawCard()
TEST: Draw a card to a hand of 6 cards
TEST: Draw card to empty hand
TEST: Draw card from empty deck but not empty discard pile
TEST: Draw card from completely empty deck - no cards

File 'dominion.c'
Lines executed:24.52% of 575
Branches executed:23.50% of 417
Taken at least once:21.34% of 417
Calls executed:8.42% of 95
dominion.c:creating 'dominion.c.gcov'

unittest3.c:
TESTING buyCard()
TEST: When NumBuys is 0
TEST: When NumBuys is 1 but not enough coins
TEST: When SupplyCount for card is 0
TEST: Buying an Silver Card

File 'dominion.c'
Lines executed:29.39% of 575
Branches executed:26.38% of 417
Taken at least once:23.50% of 417
Calls executed:13.68% of 95
dominion.c:creating 'dominion.c.gcov'

unittest4.c:
TESTING endTurn()
 Testing game of 3 players
Begin endTurn() Test on Player 1
Begin endTurn() Test on Player 2
Begin endTurn() Test on Player 3

File 'dominion.c'
Lines executed:34.26% of 575
Branches executed:28.30% of 417
Taken at least once:25.90% of 417
Calls executed:16.84% of 95
dominion.c:creating 'dominion.c.gcov'

cardtest1.c:
TESTING smithy_card()
smith_card does not place card in playedCard pile
smithy_card does not incremented playedCardCount
SMITHY_CARD: TESTS FOUND FAILURES

File 'dominion.c'
Lines executed:36.70% of 575
Branches executed:30.22% of 417
Taken at least once:27.10% of 417
Calls executed:18.95% of 95
dominion.c:creating 'dominion.c.gcov'

cardtest2.c:
TESTING adventurer_card()
Testing with deck of 8 cards
Cards: Curse, Feast, Silver, Outpost, Gold, Estate, Adventurer, and Silver
adventurer_card did not draw correct number of cards
adventurer_card did not discard correct number of cards
adventurer_card did not discard correct cards
adventurer_card was not placed in played pile
Testing case where only 1 treasure card in deck
PASSED

Testing with empty deck but populated discard pile
PASSED
ADVENTURER_CARD: TESTING HAS FOUND ERRORS

File 'dominion.c'
Lines executed:39.30% of 575
Branches executed:33.09% of 417
Taken at least once:29.74% of 417
Calls executed:21.05% of 95
dominion.c:creating 'dominion.c.gcov'

cardtest3.c:
TESTING council_room_card()
Game of 3 players
coucil_room_card has not returned successfully
council_room_card deckCount failure
council_room_card does not draw 1 card to each other player
council_room_card deckCount failure in opponent decks
COUNCIL_ROOM_CARD: TESTING HAS FOUND ERRORS

File 'dominion.c'
Lines executed:41.22% of 575
Branches executed:34.53% of 417
Taken at least once:31.41% of 417
Calls executed:24.21% of 95
dominion.c:creating 'dominion.c.gcov'

cardtest4.c:
TESTING sea hag switch case in cardeffect()
 Game of 3 players
sea_hag was not placed in played pile
Incorrect number of cards in Player 1 hand
Player 2/3 decks altered in unexpected way
Player 2/3 did not obtain the curse card at top of deck
Wrong top of deck cards were discarded
SEA_HAG TESTING HAS FOUND ERRORS

File 'dominion.c'
Lines executed:43.65% of 575
Branches executed:41.01% of 417
Taken at least once:32.85% of 417
Calls executed:25.26% of 95
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 512 returned 100% blocks executed 100%
      512:    8:int compare(const void* a, const void* b) {
      512:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        7:   10:    return 1;
      505:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      137:   12:    return -1;
      368:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 15 returned 100% blocks executed 100%
       15:   16:struct gameState* newGame() {
       15:   17:  struct gameState* g = malloc(sizeof(struct gameState));
       15:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 15 returned 100% blocks executed 94%
       15:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
call    0 returned 100%
       15:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       15:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       15:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      165:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1650:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       15:   73:  if (numPlayers == 2)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        3:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        3:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       15:   87:  if (numPlayers == 2)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        3:   95:      state->supplyCount[estate] = 12;
        3:   96:      state->supplyCount[duchy] = 12;
        3:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       15:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  102:  state->supplyCount[silver] = 40;
       15:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      315:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2475:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2325:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      180:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       30:  115:		  if (numPlayers == 2){
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       24:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
        6:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      150:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2175:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       48:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
       33:  140:      state->deckCount[i] = 0;
      132:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       99:  143:	  state->deck[i][j] = estate;
       99:  144:	  state->deckCount[i]++;
        -:  145:	}
      264:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      231:  148:	  state->deck[i][j] = copper;
      231:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       48:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
       33:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       48:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       33:  166:      state->handCount[i] = 0;
       33:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      420:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      405:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       15:  182:  state->outpostPlayed = 0;
       15:  183:  state->phase = 0;
       15:  184:  state->numActions = 1;
       15:  185:  state->numBuys = 1;
       15:  186:  state->playedCardCount = 0;
       15:  187:  state->whoseTurn = 0;
       15:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       90:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       75:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       15:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       15:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 43 returned 100% blocks executed 100%
       43:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       43:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       43:  209:  if (state->deckCount[player] < 1)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
        8:  210:    return -1;
       35:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      411:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      341:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      341:  216:    newDeck[newDeckPos] = state->deck[player][card];
      341:  217:    newDeckPos++;
     1185:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      844:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      341:  221:    state->deckCount[player]--;
        -:  222:  }
      376:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      341:  224:    state->deck[player][i] = newDeck[i];
      341:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       35:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        4:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        1:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        1:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 4 returned 100% blocks executed 100%
        4:  320:int supplyCount(int card, struct gameState *state) {
        4:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 3 returned 100% blocks executed 100%
        3:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:
        -:  355:  //Discard hand
       18:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       18:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 124 returned 100% blocks executed 100%
      124:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      124:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       17:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
       11:  534:      state->deck[player][i] = state->discard[player][i];
       11:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        6:  538:    state->deckCount[player] = state->discardCount[player];
        6:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        6:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        6:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        6:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        6:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        6:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        6:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        6:  559:    if (deckCounter == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        4:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      118:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
      118:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      118:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      118:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      118:  576:    state->deckCount[player]--;
      118:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      120:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 33 returned 100% blocks executed 100%
       33:  583:int getCost(int cardNumber)
        -:  584:{
       33:  585:  switch( cardNumber )
branch  0 taken 3%
branch  1 taken 6%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 9%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 9%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        3:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 1 returned 100% blocks executed 4%
        1:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        1:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        1:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        1:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        1:  660:  int z = 0;// this is the counter for the temp hand
        1:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
        1:  667:  switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 100%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:        return adventurer_card(currentPlayer, state, drawntreasure, cardDrawn, z, temphand);
call    0 never executed
        -:  671:    case council_room:
    #####:  672:        return council_room_card(currentPlayer, state, handPos);
call    0 never executed
        -:  673:    case feast:
        -:  674:      //gain card with cost up to 5
        -:  675:      //Backup hand
    #####:  676:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  677:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  678:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  679:      }
        -:  680:      //Backup hand
        -:  681:
        -:  682:      //Update Coins for Buy
    #####:  683:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  684:      x = 1;//Condition to loop on
    #####:  685:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  686:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  687:	  if (DEBUG)
        -:  688:	    printf("None of that card left, sorry!\n");
        -:  689:
    #####:  690:	  if (DEBUG){
        -:  691:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  692:	  }
        -:  693:	}
    #####:  694:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  695:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  696:
    #####:  697:	  if (DEBUG){
        -:  698:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  699:	  }
        -:  700:	}
        -:  701:	else{
        -:  702:
    #####:  703:	  if (DEBUG){
        -:  704:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  705:	  }
        -:  706:
    #####:  707:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  708:	  x = 0;//No more buying cards
        -:  709:
    #####:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
        -:  714:	}
        -:  715:      }
        -:  716:
        -:  717:      //Reset Hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  719:	state->hand[currentPlayer][i] = temphand[i];
    #####:  720:	temphand[i] = -1;
        -:  721:      }
        -:  722:      //Reset Hand
        -:  723:
    #####:  724:      return 0;
        -:  725:
        -:  726:    case gardens:
    #####:  727:      return -1;
        -:  728:
        -:  729:    case mine:
    #####:  730:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  731:
    #####:  732:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  738:	{
    #####:  739:	  return -1;
        -:  740:	}
        -:  741:
    #####:  742:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  743:	{
    #####:  744:	  return -1;
        -:  745:	}
        -:  746:
    #####:  747:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  748:
        -:  749:      //discard card from hand
    #####:  750:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  751:
        -:  752:      //discard trashed card
    #####:  753:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  756:	    {
    #####:  757:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  758:	      break;
        -:  759:	    }
        -:  760:	}
        -:  761:
    #####:  762:      return 0;
        -:  763:
        -:  764:    case remodel:
    #####:  765:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  766:
    #####:  767:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  768:	{
    #####:  769:	  return -1;
        -:  770:	}
        -:  771:
    #####:  772:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  773:
        -:  774:      //discard card from hand
    #####:  775:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:
        -:  777:      //discard trashed card
    #####:  778:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  779:	{
    #####:  780:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  781:	    {
    #####:  782:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  783:	      break;
        -:  784:	    }
        -:  785:	}
        -:  786:
        -:  787:
    #####:  788:      return 0;
        -:  789:
        -:  790:    case smithy:
    #####:  791:        return smithy_card(currentPlayer, state, handPos);
call    0 never executed
        -:  792:
        -:  793:    case village:
        -:  794:      //+1 Card
    #####:  795:      drawCard(currentPlayer, state);
call    0 never executed
        -:  796:
        -:  797:      //+2 Actions
    #####:  798:      state->numActions = state->numActions + 2;
        -:  799:
        -:  800:      //discard played card from hand
    #####:  801:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  802:      return 0;
        -:  803:
        -:  804:    case baron:
    #####:  805:      state->numBuys++;//Increase buys by 1!
    #####:  806:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  807:	int p = 0;//Iterator for hand!
    #####:  808:	int card_not_discarded = 1;//Flag for discard set!
    #####:  809:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  810:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  811:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  812:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  813:	    state->discardCount[currentPlayer]++;
    #####:  814:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  815:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  816:	    }
    #####:  817:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  818:	    state->handCount[currentPlayer]--;
    #####:  819:	    card_not_discarded = 0;//Exit the loop
        -:  820:	  }
    #####:  821:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  822:	    if(DEBUG) {
        -:  823:	      printf("No estate cards in your hand, invalid choice\n");
        -:  824:	      printf("Must gain an estate if there are any\n");
        -:  825:	    }
    #####:  826:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  828:	      state->supplyCount[estate]--;//Decrement estates
    #####:  829:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  830:		isGameOver(state);
call    0 never executed
        -:  831:	      }
        -:  832:	    }
    #####:  833:	    card_not_discarded = 0;//Exit the loop
        -:  834:	  }
        -:  835:
        -:  836:	  else{
    #####:  837:	    p++;//Next card
        -:  838:	  }
        -:  839:	}
        -:  840:      }
        -:  841:
        -:  842:      else{
    #####:  843:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  845:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  846:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	    isGameOver(state);
call    0 never executed
        -:  848:	  }
        -:  849:	}
        -:  850:      }
        -:  851:
        -:  852:
    #####:  853:      return 0;
        -:  854:
        -:  855:    case great_hall:
    #####:  856:        return great_hall_card(currentPlayer, state, handPos);
call    0 never executed
        -:  857:
        -:  858:    case minion:
        -:  859:      //+1 action
    #####:  860:      state->numActions++;
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  864:
    #####:  865:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  state->coins = state->coins + 2;
        -:  868:	}
        -:  869:
    #####:  870:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  871:	{
        -:  872:	  //discard hand
    #####:  873:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  874:	    {
    #####:  875:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  876:	    }
        -:  877:
        -:  878:	  //draw 4
    #####:  879:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	    {
    #####:  881:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  882:	    }
        -:  883:
        -:  884:	  //other players discard hand and redraw if hand size > 4
    #####:  885:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  888:		{
    #####:  889:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  890:		    {
        -:  891:		      //discard hand
    #####:  892:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  893:			{
    #####:  894:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  895:			}
        -:  896:
        -:  897:		      //draw 4
    #####:  898:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  899:			{
    #####:  900:			  drawCard(i, state);
call    0 never executed
        -:  901:			}
        -:  902:		    }
        -:  903:		}
        -:  904:	    }
        -:  905:
        -:  906:	}
    #####:  907:      return 0;
        -:  908:
        -:  909:    case steward:
    #####:  910:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  911:	{
        -:  912:	  //+2 cards
    #####:  913:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  914:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  915:	}
    #####:  916:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  917:	{
        -:  918:	  //+2 coins
    #####:  919:	  state->coins = state->coins + 2;
        -:  920:	}
        -:  921:      else
        -:  922:	{
        -:  923:	  //trash 2 cards in hand
    #####:  924:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  925:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  926:	}
        -:  927:
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  930:      return 0;
        -:  931:
        -:  932:    case tribute:
    #####:  933:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  934:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  935:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	  state->deckCount[nextPlayer]--;
        -:  937:	}
    #####:  938:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  939:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  940:	  state->discardCount[nextPlayer]--;
        -:  941:	}
        -:  942:	else{
        -:  943:	  //No Card to Reveal
    #####:  944:	  if (DEBUG){
        -:  945:	    printf("No cards to reveal\n");
        -:  946:	  }
        -:  947:	}
        -:  948:      }
        -:  949:
        -:  950:      else{
    #####:  951:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  952:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  953:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  954:	    state->deckCount[nextPlayer]++;
    #####:  955:	    state->discard[nextPlayer][i] = -1;
    #####:  956:	    state->discardCount[nextPlayer]--;
        -:  957:	  }
        -:  958:
    #####:  959:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  960:	}
    #####:  961:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  962:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  963:	state->deckCount[nextPlayer]--;
    #####:  964:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
        -:  967:      }
        -:  968:
    #####:  969:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  970:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  971:	state->playedCardCount++;
    #####:  972:	tributeRevealedCards[1] = -1;
        -:  973:      }
        -:  974:
    #####:  975:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  976:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  977:	  state->coins += 2;
        -:  978:	}
        -:  979:
    #####:  980:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  981:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  982:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  983:	}
        -:  984:	else{//Action Card
    #####:  985:	  state->numActions = state->numActions + 2;
        -:  986:	}
        -:  987:      }
        -:  988:
    #####:  989:      return 0;
        -:  990:
        -:  991:    case ambassador:
    #####:  992:      j = 0;		//used to check if player has enough cards to discard
        -:  993:
    #####:  994:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  995:	{
    #####:  996:	  return -1;
        -:  997:	}
        -:  998:
    #####:  999:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  return -1;
        -: 1002:	}
        -: 1003:
    #####: 1004:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
    #####: 1006:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1007:	    {
    #####: 1008:	      j++;
        -: 1009:	    }
        -: 1010:	}
    #####: 1011:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1012:	{
    #####: 1013:	  return -1;
        -: 1014:	}
        -: 1015:
    #####: 1016:      if (DEBUG)
        -: 1017:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1018:
        -: 1019:      //increase supply count for choosen card by amount being discarded
    #####: 1020:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1021:
        -: 1022:      //each other player gains a copy of revealed card
    #####: 1023:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
    #####: 1025:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1026:	    {
    #####: 1027:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1028:	    }
        -: 1029:	}
        -: 1030:
        -: 1031:      //discard played card from hand
    #####: 1032:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1033:
        -: 1034:      //trash copies of cards returned to supply
    #####: 1035:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1036:	{
    #####: 1037:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1038:	    {
    #####: 1039:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1040:		{
    #####: 1041:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:		  break;
        -: 1043:		}
        -: 1044:	    }
        -: 1045:	}
        -: 1046:
    #####: 1047:      return 0;
        -: 1048:
        -: 1049:    case cutpurse:
    #####: 1050:        return cutpurse_card(currentPlayer, state, handPos);
call    0 never executed
        -: 1051:
        -: 1052:    case embargo:
        -: 1053:      //+2 Coins
    #####: 1054:      state->coins = state->coins + 2;
        -: 1055:
        -: 1056:      //see if selected pile is in play
    #####: 1057:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1058:	{
    #####: 1059:	  return -1;
        -: 1060:	}
        -: 1061:
        -: 1062:      //add embargo token to selected supply pile
    #####: 1063:      state->embargoTokens[choice1]++;
        -: 1064:
        -: 1065:      //trash card
    #####: 1066:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1067:      return 0;
        -: 1068:
        -: 1069:    case outpost:
        -: 1070:      //set outpost flag
    #####: 1071:      state->outpostPlayed++;
        -: 1072:
        -: 1073:      //discard card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1075:      return 0;
        -: 1076:
        -: 1077:    case salvager:
        -: 1078:      //+1 buy
    #####: 1079:      state->numBuys++;
        -: 1080:
    #####: 1081:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
        -: 1083:	  //gain coins equal to trashed card
    #####: 1084:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1085:	  //trash card
    #####: 1086:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1087:	}
        -: 1088:
        -: 1089:      //discard card
    #####: 1090:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1091:      return 0;
        -: 1092:
        -: 1093:    case sea_hag:
        4: 1094:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1095:	if (i != currentPlayer){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2: 1096:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        2: 1097:	  state->discardCount[i]++;
        2: 1098:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1099:	}
        -: 1100:      }
        1: 1101:      return 0;
        -: 1102:
        -: 1103:    case treasure_map:
        -: 1104:      //search hand for another treasure_map
    #####: 1105:      index = -1;
    #####: 1106:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:	{
    #####: 1108:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1109:	    {
    #####: 1110:	      index = i;
    #####: 1111:	      break;
        -: 1112:	    }
        -: 1113:	}
    #####: 1114:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
        -: 1116:	  //trash both treasure cards
    #####: 1117:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1118:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1119:
        -: 1120:	  //gain 4 Gold cards
    #####: 1121:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	    {
    #####: 1123:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1124:	    }
        -: 1125:
        -: 1126:	  //return success
    #####: 1127:	  return 1;
        -: 1128:	}
        -: 1129:
        -: 1130:      //no second treasure_map found in hand
    #####: 1131:      return -1;
        -: 1132:    }
        -: 1133:
    #####: 1134:  return -1;
        -: 1135:}
        -: 1136:
function adventurer_card called 3 returned 100% blocks executed 100%
        3: 1137:int adventurer_card(int currentPlayer, struct gameState *state, int drawntreasure, int cardDrawn, int z, int temphand[]) {
        -: 1138:
       28: 1139:    while(drawntreasure <= 2){
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
       22: 1140:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        4: 1141:        shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1142:	}
        -: 1143:
       22: 1144:	drawCard(currentPlayer, state);
call    0 returned 100%
       22: 1145:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       31: 1146:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
branch  4 taken 24% (fallthrough)
branch  5 taken 76%
        9: 1147:	  drawntreasure++;
        -: 1148:	else{
       13: 1149:	  temphand[z]=cardDrawn;
       13: 1150:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       13: 1151:	  z++;
        -: 1152:        }
        -: 1153:    }
        -: 1154:
       19: 1155:    while(z-1>=0) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
       13: 1156:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       13: 1157:        z=z-1;
        -: 1158:    }
        -: 1159:
        3: 1160:    return 0;
        -: 1161:}
        -: 1162:
function smithy_card called 1 returned 100% blocks executed 100%
        1: 1163:int smithy_card(int currentPlayer, struct gameState *state, int handPos) {
        -: 1164:    //+3 Cards
        -: 1165:    int i;
        4: 1166:    for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1167:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1168:    }
        -: 1169:
        -: 1170:    //discard card from hand
        1: 1171:    discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        1: 1172:    return 0;
        -: 1173:}
        -: 1174:
function great_hall_card called 0 returned 0% blocks executed 0%
    #####: 1175:int great_hall_card(int currentPlayer, struct gameState *state, int handPos) {
        -: 1176:      //+1 Card
    #####: 1177:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1178:
        -: 1179:      //+1 Actions
    #####: 1180:      state->numActions--;
        -: 1181:
        -: 1182:      //discard card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:}
        -: 1186:
function cutpurse_card called 0 returned 0% blocks executed 0%
    #####: 1187:int cutpurse_card(int currentPlayer, struct gameState *state, int handPos) {
        -: 1188:    int i, j, k;
    #####: 1189:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1190:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1191:        if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
        -: 1192:
    #####: 1193:            for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1194:                if (state->hand[j][i] == copper){
branch  0 never executed
branch  1 never executed
    #####: 1195:                    discardCard(j, i, state, 0);
call    0 never executed
    #####: 1196:                    break;
        -: 1197:                }
    #####: 1198:                if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
        -: 1199:
    #####: 1200:                    for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
    #####: 1201:                        if (DEBUG)
        -: 1202:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1203:                    }
    #####: 1204:                    break;
        -: 1205:                }
        -: 1206:            }
        -: 1207:        }
        -: 1208:	}
        -: 1209:
        -: 1210:    //discard played card from hand
    #####: 1211:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1212:    return 0;
        -: 1213:}
        -: 1214:
function council_room_card called 1 returned 100% blocks executed 100%
        1: 1215:int council_room_card(int currentPlayer, struct gameState *state, int handPos) {
        -: 1216:    //+4 Cards
        -: 1217:    int i;
        5: 1218:    for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4: 1219:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1220:	}
        -: 1221:    //+1 Buy
        1: 1222:    state->numBuys++;
        -: 1223:
        -: 1224:    //Each other player draws a card
        4: 1225:    for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1226:        if ( i == currentPlayer ) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1227:	      drawCard(i, state);
call    0 returned 100%
        -: 1228:	    }
        -: 1229:	}
        -: 1230:
        -: 1231:    //put played card in played card pile
        1: 1232:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1233:    return 1;
        -: 1234:}
        -: 1235:
function discardCard called 2 returned 100% blocks executed 75%
        2: 1236:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1237:{
        -: 1238:
        -: 1239:  //if card is not trashed, added to Played pile
        2: 1240:  if (trashFlag < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1241:    {
        -: 1242:      //add card to played pile
        1: 1243:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1244:      state->playedCardCount++;
        -: 1245:    }
        -: 1246:
        -: 1247:  //set played card to -1
        2: 1248:  state->hand[currentPlayer][handPos] = -1;
        -: 1249:
        -: 1250:  //remove card from player's hand
        2: 1251:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1252:    {
        -: 1253:      //reduce number of cards in hand
    #####: 1254:      state->handCount[currentPlayer]--;
        -: 1255:    }
        2: 1256:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1257:    {
        -: 1258:      //reduce number of cards in hand
    #####: 1259:      state->handCount[currentPlayer]--;
        -: 1260:    }
        -: 1261:  else
        -: 1262:    {
        -: 1263:      //replace discarded card with last card in hand
        2: 1264:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1265:      //set last card to -1
        2: 1266:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1267:      //reduce number of cards in hand
        2: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        -: 1270:
        2: 1271:  return 0;
        -: 1272:}
        -: 1273:
function gainCard called 1 returned 100% blocks executed 70%
        1: 1274:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1275:{
        -: 1276:  //Note: supplyPos is enum of choosen card
        -: 1277:
        -: 1278:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1279:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1280:    {
    #####: 1281:      return -1;
        -: 1282:    }
        -: 1283:
        -: 1284:  //added card for [whoseTurn] current player:
        -: 1285:  // toFlag = 0 : add to discard
        -: 1286:  // toFlag = 1 : add to deck
        -: 1287:  // toFlag = 2 : add to hand
        -: 1288:
        1: 1289:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1290:    {
    #####: 1291:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1292:      state->deckCount[player]++;
        -: 1293:    }
        1: 1294:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1295:    {
    #####: 1296:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1297:      state->handCount[player]++;
        -: 1298:    }
        -: 1299:  else
        -: 1300:    {
        1: 1301:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1302:      state->discardCount[player]++;
        -: 1303:    }
        -: 1304:
        -: 1305:  //decrease number in supply pile
        1: 1306:  state->supplyCount[supplyPos]--;
        -: 1307:
        1: 1308:  return 0;
        -: 1309:}
        -: 1310:
function updateCoins called 18 returned 100% blocks executed 80%
       18: 1311:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1312:{
        -: 1313:  int i;
        -: 1314:
        -: 1315:  //reset coin count
       18: 1316:  state->coins = 0;
        -: 1317:
        -: 1318:  //add coins for each Treasure card in player's hand
      108: 1319:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1320:    {
       90: 1321:      if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1322:	{
       70: 1323:	  state->coins += 1;
        -: 1324:	}
       20: 1325:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1326:	{
    #####: 1327:	  state->coins += 2;
        -: 1328:	}
       20: 1329:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1330:	{
    #####: 1331:	  state->coins += 3;
        -: 1332:	}
        -: 1333:    }
        -: 1334:
        -: 1335:  //add bonus
       18: 1336:  state->coins += bonus;
        -: 1337:
       18: 1338:  return 0;
        -: 1339:}
        -: 1340:
        -: 1341:
        -: 1342://end of dominion.c
        -: 1343:
