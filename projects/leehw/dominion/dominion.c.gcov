        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/* instructor comments: file is updated. */
function dummymethod called 0 returned 0% blocks executed 0%
    #####:    9:int dummymethod()
        -:   10:{
    #####:   11:	return 0;
        -:   12:}
function compare called 8036 returned 100% blocks executed 100%
     8036:   13:int compare(const void* a, const void* b) {
     8036:   14:  if (*(int*)a > *(int*)b)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
     3021:   15:    return 1;
     5015:   16:  if (*(int*)a < *(int*)b)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
     3291:   17:    return -1;
     1724:   18:  return 0;
        -:   19:}
        -:   20:
function newGame called 0 returned 0% blocks executed 0%
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
function initializeGame called 101 returned 100% blocks executed 95%
      101:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
      101:   49:  SelectStream(1);
call    0 returned 100%
      101:   50:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   51:  
        -:   52:  //check number of players
      101:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 44% (fallthrough)
branch  3 taken 56%
        -:   54:    {
       44:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
       57:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
      627:   62:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   63:    {
     6270:   64:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:        {
     5700:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
       57:   78:  if (numPlayers == 2)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   79:    {
       29:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
       28:   82:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   83:    {
       28:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
       57:   92:  if (numPlayers == 2)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   93:    {
       29:   94:      state->supplyCount[estate] = 8;
       29:   95:      state->supplyCount[duchy] = 8;
       29:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
       28:  100:      state->supplyCount[estate] = 12;
       28:  101:      state->supplyCount[duchy] = 12;
       28:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
       57:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       57:  107:  state->supplyCount[silver] = 40;
       57:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
     1197:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  112:    {
     9405:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  114:	{
     8835:  115:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
      570:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  119:		{
      226:  120:		  if (numPlayers == 2){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       57:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
       56:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
      457:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
      570:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
     8265:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
      199:  143:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  144:    {
      142:  145:      state->deckCount[i] = 0;
      568:  146:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  147:	{
      426:  148:	  state->deck[i][j] = estate;
      426:  149:	  state->deckCount[i]++;
        -:  150:	}
     1136:  151:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  152:	{
      994:  153:	  state->deck[i][j] = copper;
      994:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
      199:  159:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  160:    {
      142:  161:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
      199:  168:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
      142:  171:      state->handCount[i] = 0;
      142:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
     1596:  181:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  182:    {
     1539:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
       57:  187:  state->outpostPlayed = 0;
       57:  188:  state->phase = 0;
       57:  189:  state->numActions = 1;
       57:  190:  state->numBuys = 1;
       57:  191:  state->playedCardCount = 0;
       57:  192:  state->whoseTurn = 0;
       57:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
      342:  197:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      285:  198:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  199:  }
        -:  200:
       57:  201:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  202:
       57:  203:  return 0;
        -:  204:}
        -:  205:
function shuffle called 157 returned 100% blocks executed 100%
      157:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
      157:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
      157:  214:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  215:    return -1;
      156:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
     2644:  219:  while (state->deckCount[player] > 0) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
     2332:  220:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2332:  221:    newDeck[newDeckPos] = state->deck[player][card];
     2332:  222:    newDeckPos++;
    72120:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
    69788:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
     2332:  226:    state->deckCount[player]--;
        -:  227:  }
     2488:  228:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
     2332:  229:    state->deck[player][i] = newDeck[i];
     2332:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
      156:  233:  return 0;
        -:  234:}
        -:  235:
function playCard called 40 returned 100% blocks executed 80%
       40:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
       40:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
       40:  242:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
       40:  248:  if ( state->numActions < 1 )
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
        -:  249:    {
       34:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
        6:  254:  card = handCard(handPos, state);
call    0 returned 100%
        -:  255:	
        -:  256:  //check if selected card is an action
        6:  257:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
        6:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
        6:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
        6:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  273:	
        6:  274:  return 0;
        -:  275:}
        -:  276:
function buyCard called 31 returned 100% blocks executed 79%
       31:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
       31:  285:  who = state->whoseTurn;
        -:  286:
       31:  287:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
       31:  291:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
       31:  295:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
       31:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
       31:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  303:  
       31:  304:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       31:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
       31:  313:  return 0;
        -:  314:}
        -:  315:
function numHandCards called 236 returned 100% blocks executed 100%
      236:  316:int numHandCards(struct gameState *state) {
      236:  317:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  318:}
        -:  319:
function handCard called 455 returned 100% blocks executed 100%
      455:  320:int handCard(int handPos, struct gameState *state) {
      455:  321:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      455:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
function supplyCount called 62 returned 100% blocks executed 100%
       62:  325:int supplyCount(int card, struct gameState *state) {
       62:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
function whoseTurn called 759 returned 100% blocks executed 100%
      759:  351:int whoseTurn(struct gameState *state) {
      759:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
function endTurn called 31 returned 100% blocks executed 100%
       31:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
       31:  358:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  359:  
        -:  360:  //Discard hand
      200:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 85%
branch  1 taken 16% (fallthrough)
      169:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      169:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
       31:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
       31:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
       16:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
       15:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
       31:  375:  state->outpostPlayed = 0;
       31:  376:  state->phase = 0;
       31:  377:  state->numActions = 1;
       31:  378:  state->coins = 0;
       31:  379:  state->numBuys = 1;
       31:  380:  state->playedCardCount = 0;
       31:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
      186:  385:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      155:  386:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  387:  }
        -:  388:
        -:  389:  //Update money
       31:  390:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  391:
       31:  392:  return 0;
        -:  393:}
        -:  394:
function isGameOver called 32 returned 100% blocks executed 82%
       32:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
       32:  400:  if (state->supplyCount[province] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  401:    {
        1:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
       31:  406:  j = 0;
      806:  407:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  408:    {
      775:  409:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
       31:  414:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
       31:  419:  return 0;
        -:  420:}
        -:  421:
function scoreFor called 2 returned 100% blocks executed 68%
        2:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
        2:  425:  int score = 0;
        -:  426:  //score from hand
        7:  427:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  428:    {
        5:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  432:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        5:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
       34:  438:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  439:    {
       32:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
       32:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  443:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       32:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
       34:  449:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  450:    {
       32:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       32:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  454:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
       32:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  457:    }
        -:  458:
        2:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
function drawCard called 1358 returned 100% blocks executed 92%
     1358:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
     1358:  533:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
      926:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
      912:  538:      state->deck[player][i] = state->discard[player][i];
      912:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
       14:  542:    state->deckCount[player] = state->discardCount[player];
       14:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
       14:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
       14:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
       14:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
       14:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
       14:  563:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  564:      return -1;
        -:  565:
       14:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       14:  567:    state->deckCount[player]--;
       14:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
     1344:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
     1344:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1344:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1344:  580:    state->deckCount[player]--;
     1344:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
     1358:  584:  return 0;
        -:  585:}
        -:  586:
function getCost called 62 returned 100% blocks executed 23%
       62:  587:int getCost(int cardNumber)
        -:  588:{
       62:  589:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 26%
branch  4 taken 0%
branch  5 taken 35%
branch  6 taken 26%
branch  7 taken 6%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  590:    {
        -:  591:    case curse:
    #####:  592:      return 0;
        -:  593:    case estate:
    #####:  594:      return 2;
        -:  595:    case duchy:
    #####:  596:      return 5;
        -:  597:    case province:
       16:  598:      return 8;
        -:  599:    case copper:
    #####:  600:      return 0;
        -:  601:    case silver:
       22:  602:      return 3;
        -:  603:    case gold:
       16:  604:      return 6;
        -:  605:    case adventurer:
        4:  606:      return 6;
        -:  607:    case council_room:
    #####:  608:      return 5;
        -:  609:    case feast:
    #####:  610:      return 4;
        -:  611:    case gardens:
    #####:  612:      return 4;
        -:  613:    case mine:
    #####:  614:      return 5;
        -:  615:    case remodel:
    #####:  616:      return 4;
        -:  617:    case smithy:
        4:  618:      return 4;
        -:  619:    case village:
    #####:  620:      return 3;
        -:  621:    case baron:
    #####:  622:      return 4;
        -:  623:    case great_hall:
    #####:  624:      return 3;
        -:  625:    case minion:
    #####:  626:      return 5;
        -:  627:    case steward:
    #####:  628:      return 3;
        -:  629:    case tribute:
    #####:  630:      return 5;
        -:  631:    case ambassador:
    #####:  632:      return 3;
        -:  633:    case cutpurse:
    #####:  634:      return 4;
        -:  635:    case embargo: 
    #####:  636:      return 2;
        -:  637:    case outpost:
    #####:  638:      return 5;
        -:  639:    case salvager:
    #####:  640:      return 4;
        -:  641:    case sea_hag:
    #####:  642:      return 4;
        -:  643:    case treasure_map:
    #####:  644:      return 4;
        -:  645:    }
        -:  646:	
    #####:  647:  return -1;
        -:  648:}
        -:  649:
function cardEffect called 6 returned 100% blocks executed 5%
        6:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
        6:  657:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
        6:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
        6:  662:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        4:  663:    nextPlayer = 0;
        -:  664:  }
        -:  665:  
        -:  666:	
        -:  667:  //uses switch to select card and perform actions
        6:  668:  switch( card ) 
branch  0 taken 67%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  669:    {
        -:  670:    case adventurer:
        4:  671:      adventurerAction(currentPlayer, state, temphand);
call    0 returned 100%
        4:  672:      return 0;
        -:  673:    case council_room:
    #####:  674:      councilAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  675:      return 0;
        -:  676:    case feast:
        -:  677:      //gain card with cost up to 5
        -:  678:      //Backup hand
    #####:  679:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  680:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:      }
        -:  683:      //Backup hand
        -:  684:
        -:  685:      //Update Coins for Buy
    #####:  686:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  687:      x = 1;//Condition to loop on
    #####:  688:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  689:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  690:	  if (DEBUG)
        -:  691:	    printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:	  if (DEBUG){
        -:  694:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:	  }
        -:  696:	}
    #####:  697:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  698:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  699:
        -:  700:	  if (DEBUG){
        -:  701:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	  }
        -:  703:	}
        -:  704:	else{
        -:  705:
        -:  706:	  if (DEBUG){
        -:  707:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  708:	  }
        -:  709:
    #####:  710:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  711:	  x = 0;//No more buying cards
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:	  }
        -:  716:
        -:  717:	}
        -:  718:      }     
        -:  719:
        -:  720:      //Reset Hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	state->hand[currentPlayer][i] = temphand[i];
    #####:  723:	temphand[i] = -1;
        -:  724:      }
        -:  725:      //Reset Hand
        -:  726:      			
    #####:  727:      return 0;
        -:  728:			
        -:  729:    case gardens:
    #####:  730:      return -1;
        -:  731:			
        -:  732:    case mine:
    #####:  733:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  734:
    #####:  735:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  736:	{
    #####:  737:	  return -1;
        -:  738:	}
        -:  739:		
    #####:  740:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  741:	{
    #####:  742:	  return -1;
        -:  743:	}
        -:  744:
    #####:  745:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  751:
        -:  752:      //discard card from hand
    #####:  753:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  754:
        -:  755:      //discard trashed card
    #####:  756:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  757:	{
    #####:  758:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  759:	    {
    #####:  760:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  761:	      break;
        -:  762:	    }
        -:  763:	}
        -:  764:			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case remodel:
    #####:  768:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  769:
    #####:  770:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  776:
        -:  777:      //discard card from hand
    #####:  778:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  779:
        -:  780:      //discard trashed card
    #####:  781:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  782:	{
    #####:  783:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  784:	    {
    #####:  785:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  786:	      break;
        -:  787:	    }
        -:  788:	}
        -:  789:
        -:  790:
    #####:  791:      return 0;
        -:  792:		
        -:  793:    case smithy:
        2:  794:      smithyAction(currentPlayer, state, handPos);
call    0 returned 100%
        2:  795:		  return 0;
        -:  796:
        -:  797:    case village:
    #####:  798:      villageAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  799:		  return 0;
        -:  800:
        -:  801:    case baron:
    #####:  802:      baronAction(currentPlayer, state, choice1, handPos);
call    0 never executed
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
    #####:  807:      drawCard(currentPlayer, state);
call    0 never executed
        -:  808:			
        -:  809:      //+1 Actions
    #####:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
    #####:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  857:			{
    #####:  858:			  drawCard(i, state);
call    0 never executed
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  872:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  939:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  940:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1085:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
function discardCard called 186 returned 100% blocks executed 78%
      186: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
      186: 1131:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1132:    {
        -: 1133:      //add card to played pile
      186: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      186: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
      186: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
      186: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
    #####: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
      186: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
      186: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
      186: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
      186: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
      186: 1162:  return 0;
        -: 1163:}
        -: 1164:
function gainCard called 31 returned 100% blocks executed 70%
       31: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
       31: 1170:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1171:    {
    #####: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
       31: 1180:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1181:    {
    #####: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1183:      state->deckCount[player]++;
        -: 1184:    }
       31: 1185:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
       31: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       31: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
       31: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
       31: 1199:  return 0;
        -: 1200:}
        -: 1201:
function updateCoins called 94 returned 100% blocks executed 100%
       94: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
       94: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
      578: 1210:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1211:    {
      484: 1212:      if (state->hand[player][i] == copper)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -: 1213:	{
      312: 1214:	  state->coins += 1;
        -: 1215:	}
      172: 1216:      else if (state->hand[player][i] == silver)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1217:	{
       37: 1218:	  state->coins += 2;
        -: 1219:	}
      135: 1220:      else if (state->hand[player][i] == gold)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1221:	{
       19: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
       94: 1227:  state->coins += bonus;
        -: 1228:
       94: 1229:  return 0;
        -: 1230:}
        -: 1231:
        -: 1232:/**************************
        -: 1233:  action card functions   *
        -: 1234: *************************/
        -: 1235:
function smithyAction called 2 returned 100% blocks executed 100%
        2: 1236:int smithyAction(int player, struct gameState *state, int handPos){
        2: 1237:  int i = 0;
        -: 1238: //+3 Cards
       10: 1239:  for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8: 1240:	  drawCard(player, state);
call    0 returned 100%
        -: 1241:	}
        -: 1242:			
        -: 1243:  //discard card from hand
        2: 1244:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -: 1245:  
        2: 1246:  return 0;
        -: 1247:}
        -: 1248:
function adventurerAction called 4 returned 100% blocks executed 93%
        4: 1249:int adventurerAction(int player, struct gameState *state, int temphand[]){
        4: 1250:  int cardDrawn = 0;
        4: 1251:  int z = 0;
        4: 1252:  int drawntreasure = 0;
        4: 1253:  int cycledCards=0;
        -: 1254:
       18: 1255:  while(drawntreasure<2){
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       10: 1256:    if (state->deckCount[player] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        1: 1257:      shuffle(player, state);
call    0 returned 100%
        -: 1258:    }
       10: 1259:    drawCard(player, state);
call    0 returned 100%
       10: 1260:    cycledCards++; //for debugging
       10: 1261:    cardDrawn = state->hand[player][state->handCount[player]-1];//top card of hand is most recently drawn card.
       10: 1262:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        8: 1263:      drawntreasure++;
        -: 1264:    }else{
        2: 1265:      temphand[z]=cardDrawn;
        2: 1266:      state->handCount[player]--; //this should just remove the top card (the most recently drawn one).
        2: 1267:      z = z++;
        -: 1268:    }
        -: 1269:  }
        8: 1270:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1271:    state->discard[player][state->discardCount[player]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1272:    z=z-1;
        -: 1273:  }
        4: 1274:  return cycledCards;
        -: 1275:}
        -: 1276:			
        -: 1277:
function councilAction called 184 returned 100% blocks executed 100%
      184: 1278:int councilAction(int player, struct gameState *state, int handPos){
      184: 1279:  int i = 0;
        -: 1280:  //+4 Cards
      920: 1281:  for (i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      736: 1282:	  drawCard(player, state);
call    0 returned 100%
        -: 1283:	}
        -: 1284:			
        -: 1285:  //+1 Buy
      184: 1286:  state->numBuys++;
        -: 1287:    
        -: 1288:  //Each other player draws a card
18187384588: 1289:  for (i = 0; i < state->numPlayers; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
18187384404: 1290:    if ( i == player ){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      164: 1291:      drawCard(i, state);
call    0 returned 100%
        -: 1292:    }
        -: 1293:  } 
        -: 1294:    
        -: 1295:  //put played card in played card pile
      184: 1296:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -: 1297:  
      184: 1298:  return 0;
        -: 1299:}
        -: 1300:
function villageAction called 0 returned 0% blocks executed 0%
    #####: 1301:int villageAction(int player, struct gameState *state, int handPos){
        -: 1302:      //+1 Card
    #####: 1303:      drawCard(player, state);
call    0 never executed
        -: 1304:			
        -: 1305:      //+2 Actions
    #####: 1306:      state->numActions = 2;
        -: 1307:			
        -: 1308:      //discard played card from hand
    #####: 1309:      discardCard(handPos, player, state, 0);
call    0 never executed
    #####: 1310:      return 0;
        -: 1311:}
        -: 1312:
function baronAction called 0 returned 0% blocks executed 0%
    #####: 1313:int baronAction(int player, struct gameState *state, int choice1, int handPos){
    #####: 1314:  state->numBuys++;//Increase buys by 1!
        -: 1315:
    #####: 1316:  if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1317:    int p = 0;//Iterator for hand!
    #####: 1318:    int card_not_discarded = 1;//Flag for discard set!
        -: 1319:  
    #####: 1320:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1321:      if(state->hand[player][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1322:        state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1323:        state->discard[player][state->discardCount[player]] = state->hand[player][p];
    #####: 1324:        state->discardCount[player]++;
    #####: 1325:        for (;p < state->handCount[player]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1326:          state->hand[player][p] = state->hand[player][p+1];
        -: 1327:        }
    #####: 1328:        state->hand[player][state->handCount[player]] = -1;
    #####: 1329:        state->handCount[player]--;
    #####: 1330:        card_not_discarded = 0;//Exit the loop
    #####: 1331:      }else if (p > state->handCount[player]){
branch  0 never executed
branch  1 never executed
        -: 1332:        if(DEBUG) {
        -: 1333:          printf("No estate cards in your hand, invalid choice\n");
        -: 1334:          printf("Must gain an estate if there are any\n");
        -: 1335:        }
    #####: 1336:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1337:          gainCard(estate, state, 0, player);
call    0 never executed
    #####: 1338:          state->supplyCount[estate]--;//Decrement estates
    #####: 1339:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1340:            isGameOver(state);
call    0 never executed
        -: 1341:          }
        -: 1342:        }
    #####: 1343:        card_not_discarded = 0;//Exit the loop
        -: 1344:      }      
        -: 1345:      else{
    #####: 1346:        p++;//Next card
        -: 1347:      }
        -: 1348:    }
        -: 1349:  //player decides not to discard an estate card
        -: 1350:  }else{
        -: 1351:    //if estate card pile is not empty, draw one
    #####: 1352:  	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1353:	    gainCard(estate, state, 0, player);//Gain an estate
call    0 never executed
    #####: 1354:	    state->supplyCount[estate]--;//Decrement Estates
        -: 1355:    }
        -: 1356:    //else if it is empty, 
    #####: 1357:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1358:	    isGameOver(state);
call    0 never executed
        -: 1359:	  }
        -: 1360:  }
        -: 1361:
    #####: 1362:  return 0;
        -: 1363:}
        -: 1364:
        -: 1365://end of dominion.c
        -: 1366:
