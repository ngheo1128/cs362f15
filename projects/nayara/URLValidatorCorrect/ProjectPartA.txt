Computer Science 362
Final Project Part A
Scott Milton, Ashok Nayar, Andrew Shen

1) Explain testIsValid Function of UrlValidator test code:

A high level overview of this function would be that all the individual parts that make up a URL are passed individually to the function. The function iterates through the parts, verifying that each part is actually a valid part of a URL adding it to a URL string, and then validating that the final URL is a valid URL as well.
The function passes a series of URLs to the isValid function. These URLs are constructed by the test function from a number of parts (scheme, authority, port, path, and query). The test function iterates over collections of these parts in order to combine them in every way possible and to pass each permutation to the isValid function for testing. The validity of each individual part in the collection is known in advance, and a constructed URL is expected to be valid only if all its constituent parts are valid. An assertion is made for each URL, where the result returned from the isValid function is compared to the expected result in order to determine whether or not the isValid function is working properly.

2) Give how many total number of urls it is testing. Also, explain how it is building all the urls:

A total of 35,912 URLs are tested. A master list is provided to the function and contained within this list are parts of the URL broken down even further. The parts collections contain 9 different schemes, 19 authorities, 7 ports, 10 paths, and 3 queries. Thus, a total of 35,910 permutations are generated by the testIsValid function. The URLs are built in the function through the arguments given to the function. These parts that are provided to the function may or may not be valid and the function tests the validity of each part. If it is valid, it is added to a string that builds the URL. The function iterates through each of these parts and builds all possible combinations of these. A total of 35910 potential URLs are passed to the function, but since several parts are actually not valid, only 31920 URLs are tested. To this we add 2 more tests from the calls to isValid and assertions at the beginning of the function, used to make sure isValid is working properly with whole URLs before beginning to construct them. This makes a total of 31922 URLs tested.

3) Give an example of valid url being tested by testIsValid() method:

A valid URL tested by the function is: http://www.google.com:80/test1

4) Give an example of an invalid url being tested by testIsValid() method:

An invalid URL is: http://www.google.com:80/..?action=view
In this case, the path part (/..) is invalid so the entire URL is determined to be invalid.

5) Do you think that a real world test (URL Validator's testIsValid() test in this case) is  very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines:

No, I donâ€™t believe that this test is that much different. The test is building parts of the URL and combining them into a final URL. Both the individual parts and the final URL are tested for validity so there are two kinds of verification happening. This test does lack a bit of random testing behavior as the URLs are built in a specific order (for example, http:// always goes at the front and is never place at the end). This type of random testing, where URLs are built out of order, may help to discover any additional bugs that the URL validator may have.
In both cases, we are comparing the actual results to the expected results.


