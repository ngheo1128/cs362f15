        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      427:    9:  if (*(int*)a > *(int*)b)
        3:   10:    return 1;
      424:   11:  if (*(int*)a < *(int*)b)
      151:   12:    return -1;
      273:   13:  return 0;
      427:   14:}
        -:   15:struct gameState* newGame() {
    #####:   16:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   17:  return g;
        -:   18:}
        -:   19:
        -:   20:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   21:		  int k8, int k9, int k10) {
    #####:   22:  int* k = malloc(10 * sizeof(int));
    #####:   23:  k[0] = k1;
    #####:   24:  k[1] = k2;
    #####:   25:  k[2] = k3;
    #####:   26:  k[3] = k4;
    #####:   27:  k[4] = k5;
    #####:   28:  k[5] = k6;
    #####:   29:  k[6] = k7;
    #####:   30:  k[7] = k8;
    #####:   31:  k[8] = k9;
    #####:   32:  k[9] = k10;
    #####:   33:  return k;
        -:   34:}
        -:   35:
        -:   36:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   37:		   struct gameState *state) {
        -:   38:
        -:   39:  int i;
        -:   40:  int j;
        -:   41:  int it;			
        -:   42:  //set up random number generator
       15:   43:  SelectStream(1);
       15:   44:  PutSeed((long)randomSeed);
        -:   45:  
        -:   46:  //check number of players
       30:   47:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   48:    {
    #####:   49:      return -1;
        -:   50:    }
        -:   51:
        -:   52:  //set number of players
       15:   53:  state->numPlayers = numPlayers;
        -:   54:
        -:   55:  //check selected kingdom cards are different
      330:   56:  for (i = 0; i < 10; i++)
        -:   57:    {
     3300:   58:      for (j = 0; j < 10; j++)
        -:   59:        {
     2850:   60:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   61:	    {
    #####:   62:	      return -1;
        -:   63:	    }
     1500:   64:        }
      150:   65:    }
        -:   66:
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
       15:   72:  if (numPlayers == 2)
        -:   73:    {
       15:   74:      state->supplyCount[curse] = 10;
       15:   75:    }
    #####:   76:  else if (numPlayers == 3)
        -:   77:    {
    #####:   78:      state->supplyCount[curse] = 20;
    #####:   79:    }
        -:   80:  else
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
       15:   86:  if (numPlayers == 2)
        -:   87:    {
       15:   88:      state->supplyCount[estate] = 8;
       15:   89:      state->supplyCount[duchy] = 8;
       15:   90:      state->supplyCount[province] = 8;
       15:   91:    }
        -:   92:  else
        -:   93:    {
    #####:   94:      state->supplyCount[estate] = 12;
    #####:   95:      state->supplyCount[duchy] = 12;
    #####:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
       15:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  101:  state->supplyCount[silver] = 40;
       15:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      630:  105:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  106:    {
     4950:  107:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  108:	{
     2325:  109:	  if (kingdomCards[j] == i)
        -:  110:	    {
        -:  111:	      //check if card is a 'Victory' Kingdom card
      285:  112:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:		{
       30:  114:		  if (numPlayers == 2){ 
       30:  115:		    state->supplyCount[i] = 8; 
       30:  116:		  }
    #####:  117:		  else{ state->supplyCount[i] = 12; }
       30:  118:		}
        -:  119:	      else
        -:  120:		{
      120:  121:		  state->supplyCount[i] = 10;
        -:  122:		}
      150:  123:	      break;
        -:  124:	    }
        -:  125:	  else    //card is not in the set choosen for the game
        -:  126:	    {
     2175:  127:	      state->supplyCount[i] = -1;
        -:  128:	    }
     2175:  129:	}
        -:  130:
      300:  131:    }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       90:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:    {
       30:  139:      state->deckCount[i] = 0;
      240:  140:      for (j = 0; j < 3; j++)
        -:  141:	{
       90:  142:	  state->deck[i][j] = estate;
       90:  143:	  state->deckCount[i]++;
       90:  144:	}
      480:  145:      for (j = 3; j < 10; j++)
        -:  146:	{
      210:  147:	  state->deck[i][j] = copper;
      210:  148:	  state->deckCount[i]++;		
      210:  149:	}
       30:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
       90:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:    {
       30:  155:      if ( shuffle(i, state) < 0 )
        -:  156:	{
    #####:  157:	  return -1;
        -:  158:	}
       30:  159:    }
        -:  160:
        -:  161:  //draw player hands
       90:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
       30:  165:      state->handCount[i] = 0;
       30:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
       30:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      840:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:    {
      405:  177:      state->embargoTokens[i] = 0;
      405:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
       15:  181:  state->outpostPlayed = 0;
       15:  182:  state->phase = 0;
       15:  183:  state->numActions = 1;
       15:  184:  state->numBuys = 1;
       15:  185:  state->playedCardCount = 0;
       15:  186:  state->whoseTurn = 0;
       15:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
      180:  191:  for (it = 0; it < 5; it++){
       75:  192:    drawCard(state->whoseTurn, state);
       75:  193:  }
        -:  194:
       15:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
       15:  197:  return 0;
       15:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       35:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       35:  208:  if (state->deckCount[player] < 1)
        4:  209:    return -1;
       31:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      672:  213:  while (state->deckCount[player] > 0) {
      305:  214:    card = floor(Random() * state->deckCount[player]);
      305:  215:    newDeck[newDeckPos] = state->deck[player][card];
      305:  216:    newDeckPos++;
     1906:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      648:  218:      state->deck[player][i] = state->deck[player][i+1];
      648:  219:    }
      305:  220:    state->deckCount[player]--;
        -:  221:  }
      672:  222:  for (i = 0; i < newDeckPos; i++) {
      305:  223:    state->deck[player][i] = newDeck[i];
      305:  224:    state->deckCount[player]++;
      305:  225:  }
        -:  226:
       31:  227:  return 0;
       35:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:	
    #####:  268:  return 0;
    #####:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    #####:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
    #####:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
    #####:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
    #####:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
       12:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
        1:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
       11:  400:  j = 0;
      572:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
      275:  403:      if (state->supplyCount[i] == 0)
        -:  404:	{
        6:  405:	  j++;
        6:  406:	}
      275:  407:    }
       11:  408:  if ( j >= 3)
        -:  409:    {
        1:  410:      return 1;
        -:  411:    }
        -:  412:
       10:  413:  return 0;
       12:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    #####:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
        -:  473:	}
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
        -:  481:	{
    #####:  482:	  j = i;
    #####:  483:	}
    #####:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
        -:  492:	{
    #####:  493:	  players[i]++;
    #####:  494:	}
    #####:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
        -:  502:	{
    #####:  503:	  j = i;
    #####:  504:	}
    #####:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
        -:  512:	{
    #####:  513:	  players[i] = 1;
    #####:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
    #####:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
       89:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
        4:  532:    for (i = 0; i < state->discardCount[player];i++){
    #####:  533:      state->deck[player][i] = state->discard[player][i];
    #####:  534:      state->discard[player][i] = -1;
    #####:  535:    }
        -:  536:
        2:  537:    state->deckCount[player] = state->discardCount[player];
        2:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
        2:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
        2:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
        2:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
        2:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
        2:  558:    if (deckCounter == 0)
        2:  559:      return -1;
        -:  560:
    #####:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  562:    state->deckCount[player]--;
    #####:  563:    state->handCount[player]++;//Increment hand count
    #####:  564:  }
        -:  565:
        -:  566:  else{
       87:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       87:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       87:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       87:  575:    state->deckCount[player]--;
       87:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       87:  579:  return 0;
       89:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
    #####:  584:  switch( cardNumber ) 
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
    #####:  643:}
        -:  644:
        -:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int x;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
    #####:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
    #####:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
    #####:  657:  int drawntreasure=0;
        -:  658:  int cardDrawn;
    #####:  659:  int z = 0;// this is the counter for the temp hand
    #####:  660:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  	
        -:  664:  //uses switch to select card and perform actions
    #####:  665:  switch( card ) 
        -:  666:    {
        -:  667:    case adventurer:
        -:  668:
    #####:  669:      return adventurer_card(currentPlayer, cardDrawn, drawntreasure, z, temphand, state);
        -:  670:		
        -:  671:    case council_room:
        -:  672:
    #####:  673:      return council_room_card(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
        -:  793:
    #####:  794:      return smithy_card(currentPlayer, handPos, state);
        -:  795:      		
        -:  796:    case village:
        -:  797:      
    #####:  798:      return village_card(currentPlayer, handPos, state);
        -:  799:		
        -:  800:    case baron:
    #####:  801:      state->numBuys++;//Increase buys by 1!
    #####:  802:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  803:	int p = 0;//Iterator for hand!
    #####:  804:	int card_not_discarded = 1;//Flag for discard set!
    #####:  805:	while(card_not_discarded){
    #####:  806:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  807:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  808:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  809:	    state->discardCount[currentPlayer]++;
    #####:  810:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  811:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  812:	    }
    #####:  813:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  814:	    state->handCount[currentPlayer]--;
    #####:  815:	    card_not_discarded = 0;//Exit the loop
    #####:  816:	  }
    #####:  817:	  else if (p > state->handCount[currentPlayer]){
        -:  818:	    if(DEBUG) {
        -:  819:	      printf("No estate cards in your hand, invalid choice\n");
        -:  820:	      printf("Must gain an estate if there are any\n");
        -:  821:	    }
    #####:  822:	    if (supplyCount(estate, state) > 0){
    #####:  823:	      gainCard(estate, state, 0, currentPlayer);
    #####:  824:	      state->supplyCount[estate]--;//Decrement estates
    #####:  825:	      if (supplyCount(estate, state) == 0){
    #####:  826:		isGameOver(state);
    #####:  827:	      }
    #####:  828:	    }
    #####:  829:	    card_not_discarded = 0;//Exit the loop
    #####:  830:	  }
        -:  831:			    
        -:  832:	  else{
    #####:  833:	    p++;//Next card
        -:  834:	  }
        -:  835:	}
    #####:  836:      }
        -:  837:			    
        -:  838:      else{
    #####:  839:	if (supplyCount(estate, state) > 0){
    #####:  840:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  841:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  842:	  if (supplyCount(estate, state) == 0){
    #####:  843:	    isGameOver(state);
    #####:  844:	  }
    #####:  845:	}
        -:  846:      }
        -:  847:	    
        -:  848:      
    #####:  849:      return 0;
        -:  850:		
        -:  851:    case great_hall:
        -:  852:      //+1 Card
    #####:  853:      drawCard(currentPlayer, state);
        -:  854:			
        -:  855:      //+1 Actions
    #####:  856:      state->numActions++;
        -:  857:			
        -:  858:      //discard card from hand
    #####:  859:      discardCard(handPos, currentPlayer, state, 0);
    #####:  860:      return 0;
        -:  861:		
        -:  862:    case minion:
        -:  863:      //+1 action
    #####:  864:      state->numActions++;
        -:  865:			
        -:  866:      //discard card from hand
    #####:  867:      discardCard(handPos, currentPlayer, state, 0);
        -:  868:			
    #####:  869:      if (choice1)		//+2 coins
        -:  870:	{
    #####:  871:	  state->coins = state->coins + 2;
    #####:  872:	}
        -:  873:			
    #####:  874:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  875:	{
        -:  876:	  //discard hand
    #####:  877:	  while(numHandCards(state) > 0)
        -:  878:	    {
    #####:  879:	      discardCard(handPos, currentPlayer, state, 0);
        -:  880:	    }
        -:  881:				
        -:  882:	  //draw 4
    #####:  883:	  for (i = 0; i < 4; i++)
        -:  884:	    {
    #####:  885:	      drawCard(currentPlayer, state);
    #####:  886:	    }
        -:  887:				
        -:  888:	  //other players discard hand and redraw if hand size > 4
    #####:  889:	  for (i = 0; i < state->numPlayers; i++)
        -:  890:	    {
    #####:  891:	      if (i != currentPlayer)
        -:  892:		{
    #####:  893:		  if ( state->handCount[i] > 4 )
        -:  894:		    {
        -:  895:		      //discard hand
    #####:  896:		      while( state->handCount[i] > 0 )
        -:  897:			{
    #####:  898:			  discardCard(handPos, i, state, 0);
        -:  899:			}
        -:  900:							
        -:  901:		      //draw 4
    #####:  902:		      for (j = 0; j < 4; j++)
        -:  903:			{
    #####:  904:			  drawCard(i, state);
    #####:  905:			}
    #####:  906:		    }
    #####:  907:		}
    #####:  908:	    }
        -:  909:				
    #####:  910:	}
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case steward:
        -:  914:
    #####:  915:      return steward_card(currentPlayer, handPos, state, choice1, choice2, choice3);
        -:  916:		
        -:  917:    case tribute:
    #####:  918:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  919:	if (state->deckCount[nextPlayer] > 0){
    #####:  920:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  921:	  state->deckCount[nextPlayer]--;
    #####:  922:	}
    #####:  923:	else if (state->discardCount[nextPlayer] > 0){
    #####:  924:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  925:	  state->discardCount[nextPlayer]--;
    #####:  926:	}
        -:  927:	else{
        -:  928:	  //No Card to Reveal
        -:  929:	  if (DEBUG){
        -:  930:	    printf("No cards to reveal\n");
        -:  931:	  }
        -:  932:	}
    #####:  933:      }
        -:  934:	    
        -:  935:      else{
    #####:  936:	if (state->deckCount[nextPlayer] == 0){
    #####:  937:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  938:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  939:	    state->deckCount[nextPlayer]++;
    #####:  940:	    state->discard[nextPlayer][i] = -1;
    #####:  941:	    state->discardCount[nextPlayer]--;
    #####:  942:	  }
        -:  943:			    
    #####:  944:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  945:	} 
    #####:  946:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  947:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  948:	state->deckCount[nextPlayer]--;
    #####:  949:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  950:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  951:	state->deckCount[nextPlayer]--;
        -:  952:      }    
        -:  953:		       
    #####:  954:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  955:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  956:	state->playedCardCount++;
    #####:  957:	tributeRevealedCards[1] = -1;
    #####:  958:      }
        -:  959:
    #####:  960:      for (i = 0; i <= 2; i ++){
    #####:  961:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  962:	  state->coins += 2;
    #####:  963:	}
        -:  964:		    
    #####:  965:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  966:	  drawCard(currentPlayer, state);
    #####:  967:	  drawCard(currentPlayer, state);
    #####:  968:	}
        -:  969:	else{//Action Card
    #####:  970:	  state->numActions = state->numActions + 2;
        -:  971:	}
    #####:  972:      }
        -:  973:	    
    #####:  974:      return 0;
        -:  975:		
        -:  976:    case ambassador:
    #####:  977:      j = 0;		//used to check if player has enough cards to discard
        -:  978:
    #####:  979:      if (choice2 > 2 || choice2 < 0)
        -:  980:	{
    #####:  981:	  return -1;				
        -:  982:	}
        -:  983:
    #####:  984:      if (choice1 == handPos)
        -:  985:	{
    #####:  986:	  return -1;
        -:  987:	}
        -:  988:
    #####:  989:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  990:	{
    #####:  991:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  992:	    {
    #####:  993:	      j++;
    #####:  994:	    }
    #####:  995:	}
    #####:  996:      if (j < choice2)
        -:  997:	{
    #####:  998:	  return -1;				
        -:  999:	}
        -: 1000:
        -: 1001:      if (DEBUG) 
        -: 1002:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1003:
        -: 1004:      //increase supply count for choosen card by amount being discarded
    #####: 1005:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1006:			
        -: 1007:      //each other player gains a copy of revealed card
    #####: 1008:      for (i = 0; i < state->numPlayers; i++)
        -: 1009:	{
    #####: 1010:	  if (i != currentPlayer)
        -: 1011:	    {
    #####: 1012:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1013:	    }
    #####: 1014:	}
        -: 1015:
        -: 1016:      //discard played card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1018:
        -: 1019:      //trash copies of cards returned to supply
    #####: 1020:      for (j = 0; j < choice2; j++)
        -: 1021:	{
    #####: 1022:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1023:	    {
    #####: 1024:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1025:		{
    #####: 1026:		  discardCard(i, currentPlayer, state, 1);
    #####: 1027:		  break;
        -: 1028:		}
    #####: 1029:	    }
    #####: 1030:	}			
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case cutpurse:
        -: 1035:
    #####: 1036:      updateCoins(currentPlayer, state, 2);
    #####: 1037:      for (i = 0; i < state->numPlayers; i++)
        -: 1038:	{
    #####: 1039:	  if (i != currentPlayer)
        -: 1040:	    {
    #####: 1041:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1042:		{
    #####: 1043:		  if (state->hand[i][j] == copper)
        -: 1044:		    {
    #####: 1045:		      discardCard(j, i, state, 0);
    #####: 1046:		      break;
        -: 1047:		    }
    #####: 1048:		  if (j == state->handCount[i])
        -: 1049:		    {
    #####: 1050:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1051:			{
        -: 1052:			  if (DEBUG)
        -: 1053:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1054:			}	
    #####: 1055:		      break;
        -: 1056:		    }		
    #####: 1057:		}
        -: 1058:					
    #####: 1059:	    }
        -: 1060:				
    #####: 1061:	}				
        -: 1062:
        -: 1063:      //discard played card from hand
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1065:
    #####: 1066:      return 0;
        -: 1067:
        -: 1068:		
        -: 1069:    case embargo: 
        -: 1070:      //+2 Coins
    #####: 1071:      state->coins = state->coins + 2;
        -: 1072:			
        -: 1073:      //see if selected pile is in play
    #####: 1074:      if ( state->supplyCount[choice1] == -1 )
        -: 1075:	{
    #####: 1076:	  return -1;
        -: 1077:	}
        -: 1078:			
        -: 1079:      //add embargo token to selected supply pile
    #####: 1080:      state->embargoTokens[choice1]++;
        -: 1081:			
        -: 1082:      //trash card
    #####: 1083:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case outpost:
        -: 1087:      //set outpost flag
    #####: 1088:      state->outpostPlayed++;
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case salvager:
        -: 1095:      //+1 buy
    #####: 1096:      state->numBuys++;
        -: 1097:			
    #####: 1098:      if (choice1)
        -: 1099:	{
        -: 1100:	  //gain coins equal to trashed card
    #####: 1101:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1102:	  //trash card
    #####: 1103:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1104:	}
        -: 1105:			
        -: 1106:      //discard card
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case sea_hag:
    #####: 1111:      for (i = 0; i < state->numPlayers; i++){
    #####: 1112:	if (i != currentPlayer){
    #####: 1113:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1114:	  state->discardCount[i]++;
    #####: 1115:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1116:	}
    #####: 1117:      }
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case treasure_map:
        -: 1121:      //search hand for another treasure_map
    #####: 1122:      index = -1;
    #####: 1123:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	{
    #####: 1125:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1126:	    {
    #####: 1127:	      index = i;
    #####: 1128:	      break;
        -: 1129:	    }
    #####: 1130:	}
    #####: 1131:      if (index > -1)
        -: 1132:	{
        -: 1133:	  //trash both treasure cards
    #####: 1134:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1135:	  discardCard(index, currentPlayer, state, 1);
        -: 1136:
        -: 1137:	  //gain 4 Gold cards
    #####: 1138:	  for (i = 0; i < 4; i++)
        -: 1139:	    {
    #####: 1140:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1141:	    }
        -: 1142:				
        -: 1143:	  //return success
    #####: 1144:	  return 1;
        -: 1145:	}
        -: 1146:			
        -: 1147:      //no second treasure_map found in hand
    #####: 1148:      return -1;
        -: 1149:    }
        -: 1150:	
    #####: 1151:  return -1;
    #####: 1152:}
        -: 1153:
        -: 1154:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1155:{
        -: 1156:	
        -: 1157:  //if card is not trashed, added to Played pile 
        7: 1158:  if (trashFlag < 1)
        -: 1159:    {
        -: 1160:      //add card to played pile
        3: 1161:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1162:      state->playedCardCount++;
        3: 1163:    }
        -: 1164:	
        -: 1165:  //set played card to -1
        7: 1166:  state->hand[currentPlayer][handPos] = -1;
        -: 1167:	
        -: 1168:  //remove card from player's hand
        7: 1169:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1170:    {
        -: 1171:      //reduce number of cards in hand
        1: 1172:      state->handCount[currentPlayer]--;
        1: 1173:    }
        6: 1174:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1175:    {
        -: 1176:      //reduce number of cards in hand
    #####: 1177:      state->handCount[currentPlayer]--;
    #####: 1178:    }
        -: 1179:  else 	
        -: 1180:    {
        -: 1181:      //replace discarded card with last card in hand
        6: 1182:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1183:      //set last card to -1
        6: 1184:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1185:      //reduce number of cards in hand
        6: 1186:      state->handCount[currentPlayer]--;
        -: 1187:    }
        -: 1188:	
        7: 1189:  return 0;
        -: 1190:}
        -: 1191:
        -: 1192:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1193:{
        -: 1194:  //Note: supplyPos is enum of choosen card
        -: 1195:	
        -: 1196:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1197:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1198:    {
        1: 1199:      return -1;
        -: 1200:    }
        -: 1201:	
        -: 1202:  //added card for [whoseTurn] current player:
        -: 1203:  // toFlag = 0 : add to discard
        -: 1204:  // toFlag = 1 : add to deck
        -: 1205:  // toFlag = 2 : add to hand
        -: 1206:
        3: 1207:  if (toFlag == 1)
        -: 1208:    {
        1: 1209:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1210:      state->deckCount[player]++;
        1: 1211:    }
        2: 1212:  else if (toFlag == 2)
        -: 1213:    {
        1: 1214:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1215:      state->handCount[player]++;
        1: 1216:    }
        -: 1217:  else
        -: 1218:    {
        1: 1219:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1220:      state->discardCount[player]++;
        -: 1221:    }
        -: 1222:	
        -: 1223:  //decrease number in supply pile
        3: 1224:  state->supplyCount[supplyPos]--;
        -: 1225:	 
        3: 1226:  return 0;
        4: 1227:}
        -: 1228:
        -: 1229:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1230:{
        -: 1231:  int i;
        -: 1232:	
        -: 1233:  //reset coin count
       20: 1234:  state->coins = 0;
        -: 1235:
        -: 1236:  //add coins for each Treasure card in player's hand
      260: 1237:  for (i = 0; i < state->handCount[player]; i++)
        -: 1238:    {
      110: 1239:      if (state->hand[player][i] == copper)
        -: 1240:	{
       66: 1241:	  state->coins += 1;
       66: 1242:	}
       44: 1243:      else if (state->hand[player][i] == silver)
        -: 1244:	{
        7: 1245:	  state->coins += 2;
        7: 1246:	}
       37: 1247:      else if (state->hand[player][i] == gold)
        -: 1248:	{
        6: 1249:	  state->coins += 3;
        6: 1250:	}	
      110: 1251:    }	
        -: 1252:
        -: 1253:  //add bonus
       20: 1254:  state->coins += bonus;
        -: 1255:
       20: 1256:  return 0;
        -: 1257:}
        -: 1258:
        -: 1259:int smithy_card(int currentPlayer, int handPos, struct gameState *state)
        -: 1260:{
        -: 1261:    int i;	
        -: 1262:    //+3 Cards
        8: 1263:    for (i = 0; i < 3; i++)
        -: 1264:    {
        3: 1265:        drawCard(currentPlayer, state);
        3: 1266:    }
        -: 1267:			
        -: 1268:    //discard card from hand
        1: 1269:    discardCard(handPos, currentPlayer, state, 1);
        1: 1270:    return 0;
        -: 1271:}
        -: 1272:
        -: 1273:int adventurer_card(int currentPlayer, int cardDrawn, int drawntreasure, int z, int temphand[], struct gameState *state)
        -: 1274:{
       16: 1275:     while(drawntreasure<=4){
        7: 1276:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2: 1277:	  shuffle(currentPlayer, state);
        2: 1278:	}
        7: 1279:	drawCard(currentPlayer, state);
        7: 1280:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       11: 1281:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        5: 1282:	  drawntreasure++;
        -: 1283:	else{
        2: 1284:	  temphand[z]=cardDrawn;
        2: 1285:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2: 1286:	  z++;
        -: 1287:	}
        -: 1288:      }
        6: 1289:      while(z-1>=0){
        2: 1290:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2: 1291:	z=z-1;
        -: 1292:      }
        1: 1293:      return 0;
        -: 1294:}
        -: 1295:
        -: 1296:int council_room_card(int currentPlayer, struct gameState *state, int handPos)
        -: 1297:{     
        -: 1298:      int i; 
        -: 1299:      //+4 Cards
    #####: 1300:      for (i = 0; i < 4; i++)
        -: 1301:	{
    #####: 1302:	  drawCard(currentPlayer, state);
    #####: 1303:	}
        -: 1304:			
        -: 1305:      //+1 Buy
    #####: 1306:      state->numBuys++;
        -: 1307:			
        -: 1308:      //Each other player draws a card
    #####: 1309:      for (i = 0; i < state->numPlayers; i++)
        -: 1310:	{
    #####: 1311:	  if ( i != currentPlayer )
        -: 1312:	    {
    #####: 1313:	      drawCard(i, state);
    #####: 1314:	    }
    #####: 1315:	}
        -: 1316:			
        -: 1317:      //put played card in played card pile
    #####: 1318:      discardCard(handPos, currentPlayer, state, 0);
        -: 1319:			
    #####: 1320:    return 0;
        -: 1321:}	
        -: 1322:
        -: 1323:int village_card(int currentPlayer, struct gameState *state, int handPos)
        -: 1324:{
        -: 1325:      //+2 Card
        1: 1326:      drawCard(currentPlayer, state);
        1: 1327:      drawCard(currentPlayer, state);
        -: 1328:			
        -: 1329:      //+2 Actions
        1: 1330:      state->numActions = state->numActions + 2;
        -: 1331:			
        -: 1332:      //discard played card from hand
        1: 1333:      discardCard(handPos, currentPlayer, state, 0);
        1: 1334:      return 0;
        -: 1335:}
        -: 1336:
        -: 1337:int steward_card(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1338:{
        3: 1339:      if (choice1 == 1)
        -: 1340:	{
        -: 1341:	  //+2 cards
        1: 1342:	  drawCard(currentPlayer, state);
        1: 1343:	  drawCard(currentPlayer, state);
        1: 1344:	}
        2: 1345:      else if (choice1 == 2)
        -: 1346:	{
        -: 1347:	  //+2 coins
        1: 1348:	  state->coins = state->coins + 2;
        1: 1349:	}
        -: 1350:      else
        -: 1351:	{
        -: 1352:	  //trash 2 cards in hand
        1: 1353:	  discardCard(choice2, currentPlayer, state, 0);
        1: 1354:	  discardCard(choice3, currentPlayer, state, 0);
        -: 1355:	}
        -: 1356:			
        -: 1357:      //discard card from hand
        3: 1358:      discardCard(handPos, currentPlayer, state, 1);
        3: 1359:      return 0;
        -: 1360:}
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
