        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      508:    9:    if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      508:   11:    if (*(int*)a < *(int*)b)
      181:   12:    return -1;
      327:   13:    return 0;
      508:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:    
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
       18:   44:    SelectStream(1);
       18:   45:    PutSeed((long)randomSeed);
        -:   46:    
        -:   47:    //check number of players
       36:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:    
        -:   53:    //set number of players
       18:   54:    state->numPlayers = numPlayers;
        -:   55:    
        -:   56:    //check selected kingdom cards are different
      396:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
     3960:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
     3420:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
     1800:   65:        }
      180:   66:    }
        -:   67:    
        -:   68:    
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:    
        -:   72:    //set number of Curse cards
       18:   73:    if (numPlayers == 2)
        -:   74:    {
       18:   75:        state->supplyCount[curse] = 10;
       18:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:    
        -:   86:    //set number of Victory cards
       18:   87:    if (numPlayers == 2)
        -:   88:    {
       18:   89:        state->supplyCount[estate] = 8;
       18:   90:        state->supplyCount[duchy] = 8;
       18:   91:        state->supplyCount[province] = 8;
       18:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:    
        -:  100:    //set number of Treasure cards
       18:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       18:  102:    state->supplyCount[silver] = 40;
       18:  103:    state->supplyCount[gold] = 30;
        -:  104:    
        -:  105:    //set number of Kingdom cards
      756:  106:    for (i = adventurer; i <= treasure_map; i++)           //loop all cards
        -:  107:    {
     5940:  108:        for (j = 0; j < 10; j++)                   //loop chosen cards
        -:  109:        {
     2790:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      342:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
       36:  115:                    if (numPlayers == 2){
       36:  116:                        state->supplyCount[i] = 8;
       36:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
       36:  119:                }
        -:  120:                else
        -:  121:                {
      144:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
      180:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
     2610:  128:                state->supplyCount[i] = -1;
        -:  129:            }
     2610:  130:        }
        -:  131:        
      360:  132:    }
        -:  133:    
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:    
        -:  137:    //set player decks
      108:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
       36:  140:        state->deckCount[i] = 0;
      288:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
      108:  143:            state->deck[i][j] = estate;
      108:  144:            state->deckCount[i]++;
      108:  145:        }
      576:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
      252:  148:            state->deck[i][j] = copper;
      252:  149:            state->deckCount[i]++;
      252:  150:        }
       36:  151:    }
        -:  152:    
        -:  153:    //shuffle player decks
      108:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
       36:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
       36:  160:    }
        -:  161:    
        -:  162:    //draw player hands
      108:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
       36:  166:        state->handCount[i] = 0;
       36:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //    {
        -:  171:            //      drawCard(i, state);
        -:  172:        //    }
       36:  173:    }
        -:  174:    
        -:  175:    //set embargo tokens to 0 for all supply piles
     1008:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      486:  178:        state->embargoTokens[i] = 0;
      486:  179:    }
        -:  180:    
        -:  181:    //initialize first player's turn
       18:  182:    state->outpostPlayed = 0;
       18:  183:    state->phase = 0;
       18:  184:    state->numActions = 1;
       18:  185:    state->numBuys = 1;
       18:  186:    state->playedCardCount = 0;
       18:  187:    state->whoseTurn = 0;
       18:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:    
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
      216:  192:    for (it = 0; it < 5; it++){
       90:  193:        drawCard(state->whoseTurn, state);
       90:  194:    }
        -:  195:    
       18:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:    
       18:  198:    return 0;
       18:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:    
        -:  203:    
        -:  204:    int newDeck[MAX_DECK];
       37:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:    
       37:  209:    if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       37:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:    
      804:  214:    while (state->deckCount[player] > 0) {
      365:  215:        card = floor(Random() * state->deckCount[player]);
      365:  216:        newDeck[newDeckPos] = state->deck[player][card];
      365:  217:        newDeckPos++;
     2592:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
      931:  219:            state->deck[player][i] = state->deck[player][i+1];
      931:  220:        }
      365:  221:        state->deckCount[player]--;
        -:  222:    }
      804:  223:    for (i = 0; i < newDeckPos; i++) {
      365:  224:        state->deck[player][i] = newDeck[i];
      365:  225:        state->deckCount[player]++;
      365:  226:    }
        -:  227:    
       37:  228:    return 0;
       37:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0;         //tracks coins gain from actions
        -:  235:    
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:    
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:    
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:    
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:    
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:    
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:    
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:    
    #####:  269:    return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...n");
        -:  276:    }
        -:  277:    
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:    
       33:  280:    who = state->whoseTurn;
        -:  281:    
       33:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:        printf("You do not have any buys leftn");
        1:  285:        return -1;
       32:  286:        } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:        printf("There are not any of that type of card leftn");
        1:  289:        return -1;
       31:  290:        } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:        printf("You do not have enough money to buy that. You have %d coins.n", state->coins);
        1:  293:        return -1;
        -:  294:        } else {
       30:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
       30:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:        
       30:  299:        state->coins = (state->coins) - (getCost(supplyPos));
       30:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:        printf("You bought card number %d for %d coins. You now have %d buys and %d coins.n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:    
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:    
       30:  308:    return 0;
       33:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
       66:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:    
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:    
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:    
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:    
    #####:  343:    return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    #####:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:    
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:    
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:    
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:    }
        -:  383:    
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:    
    #####:  387:    return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:    
        -:  394:    //if stack of Province cards is empty, the game ends
       12:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:        return 1;
        -:  398:    }
        -:  399:    
        -:  400:    //if three supply pile are at 0, the game ends
       11:  401:    j = 0;
      572:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
      275:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
        6:  406:            j++;
        6:  407:        }
      275:  408:    }
       11:  409:    if ( j >= 3)
        -:  410:    {
        1:  411:        return 1;
        -:  412:    }
        -:  413:    
       10:  414:    return 0;
       12:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:    
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:    
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:    
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:    
    #####:  454:    return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:    
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
    #####:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
    #####:  475:    }
        -:  476:    
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
    #####:  484:        }
    #####:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:    
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
    #####:  495:        }
    #####:  496:    }
        -:  497:    
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
    #####:  505:        }
    #####:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:    
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
    #####:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
    #####:  520:    }
        -:  521:    
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{    int count;
        -:  527:    int deckCounter;
       99:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:        
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
    #####:  536:        }
        -:  537:        
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:        
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:        
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %dn", state->deckCount[player]);
        -:  546:        }
        -:  547:        
    #####:  548:        state->discardCount[player] = 0;
        -:  549:        
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:        
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %dn", count);
        -:  555:        }
        -:  556:        
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:        
    #####:  559:        if (deckCounter == 0)
    #####:  560:        return -1;
        -:  561:        
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
    #####:  565:    }
        -:  566:    
        -:  567:    else{
       99:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %dn", count);
        -:  572:        }
        -:  573:        
       99:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       99:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       99:  576:        state->deckCount[player]--;
       99:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:    
       99:  580:    return 0;
       99:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
       61:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:        return 0;
        -:  589:        case estate:
    #####:  590:        return 2;
        -:  591:        case duchy:
    #####:  592:        return 5;
        -:  593:        case province:
    #####:  594:        return 8;
        -:  595:        case copper:
    #####:  596:        return 0;
        -:  597:        case silver:
    #####:  598:        return 3;
        -:  599:        case gold:
    #####:  600:        return 6;
        -:  601:        case adventurer:
       61:  602:        return 6;
        -:  603:        case council_room:
    #####:  604:        return 5;
        -:  605:        case feast:
    #####:  606:        return 4;
        -:  607:        case gardens:
    #####:  608:        return 4;
        -:  609:        case mine:
    #####:  610:        return 5;
        -:  611:        case remodel:
    #####:  612:        return 4;
        -:  613:        case smithy:
    #####:  614:        return 4;
        -:  615:        case village:
    #####:  616:        return 3;
        -:  617:        case baron:
    #####:  618:        return 4;
        -:  619:        case great_hall:
    #####:  620:        return 3;
        -:  621:        case minion:
    #####:  622:        return 5;
        -:  623:        case steward:
    #####:  624:        return 3;
        -:  625:        case tribute:
    #####:  626:        return 5;
        -:  627:        case ambassador:
    #####:  628:        return 3;
        -:  629:        case cutpurse:
    #####:  630:        return 4;
        -:  631:        case embargo:
    #####:  632:        return 2;
        -:  633:        case outpost:
    #####:  634:        return 5;
        -:  635:        case salvager:
    #####:  636:        return 4;
        -:  637:        case sea_hag:
    #####:  638:        return 4;
        -:  639:        case treasure_map:
    #####:  640:        return 4;
        -:  641:    }
        -:  642:    
    #####:  643:    return -1;
       61:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:    int i;
        -:  649:    int j;
        -:  650:    int k;
        -:  651:    int x;
        -:  652:    int index;
    #####:  653:    int currentPlayer = whoseTurn(state);
    #####:  654:    int nextPlayer = currentPlayer + 1;
        -:  655:    
    #####:  656:    int tributeRevealedCards[2] = {-1, -1};
        -:  657:    int temphand[MAX_HAND];// moved above the if statement
    #####:  658:    int drawntreasure=0;
    #####:  659:    int cardDrawn=0;
    #####:  660:    int z = 0;// this is the counter for the temp hand
    #####:  661:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:        nextPlayer = 0;
    #####:  663:    }
        -:  664:    
        -:  665:    
        -:  666:    //uses switch to select card and perform actions
    #####:  667:    switch( card )
        -:  668:    {
        -:  669:        case adventurer:
        -:  670:        
    #####:  671:        adventurerCard(temphand, z, cardDrawn, currentPlayer, drawntreasure, state);
    #####:  672:        return 0;
        -:  673:        
        -:  674:        case council_room:
        -:  675:        //+4 Cards
    #####:  676:        for (i = 0; i < 4; i++)
        -:  677:        {
    #####:  678:            drawCard(currentPlayer, state);
    #####:  679:        }
        -:  680:        
        -:  681:        //+1 Buy
    #####:  682:        state->numBuys++;
        -:  683:        
        -:  684:        //Each other player draws a card
    #####:  685:        for (i = 0; i < state->numPlayers; i++)
        -:  686:        {
    #####:  687:            if ( i != currentPlayer )
        -:  688:            {
    #####:  689:                drawCard(i, state);
    #####:  690:            }
    #####:  691:        }
        -:  692:        
        -:  693:        //put played card in played card pile
    #####:  694:        discardCard(handPos, currentPlayer, state, 0);
        -:  695:        
    #####:  696:        return 0;
        -:  697:        
        -:  698:        case feast:
        -:  699:        //gain card with cost up to 5
        -:  700:        //Backup hand
    #####:  701:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  702:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:            state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:        }
        -:  705:        //Backup hand
        -:  706:        
        -:  707:        //Update Coins for Buy
    #####:  708:        updateCoins(currentPlayer, state, 5);
    #####:  709:        x = 1;//Condition to loop on
    #####:  710:        while( x == 1) {//Buy one card
    #####:  711:            if (supplyCount(choice1, state) <= 0){
        -:  712:                if (DEBUG)
        -:  713:                printf("None of that card left, sorry!n");
        -:  714:                
        -:  715:                if (DEBUG){
        -:  716:                    printf("Cards Left: %dn", supplyCount(choice1, state));
        -:  717:                }
    #####:  718:            }
    #####:  719:            else if (state->coins < getCost(choice1)){
    #####:  720:                printf("That card is too expensive!n");
        -:  721:                
        -:  722:                if (DEBUG){
        -:  723:                    printf("Coins: %d < %dn", state->coins, getCost(choice1));
        -:  724:                }
    #####:  725:            }
        -:  726:            else{
        -:  727:                
        -:  728:                if (DEBUG){
        -:  729:                    printf("Deck Count: %dn", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:                }
        -:  731:                
    #####:  732:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:                x = 0;//No more buying cards
        -:  734:                
        -:  735:                if (DEBUG){
        -:  736:                    printf("Deck Count: %dn", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:                }
        -:  738:                
        -:  739:            }
        -:  740:        }
        -:  741:        
        -:  742:        //Reset Hand
    #####:  743:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  744:            state->hand[currentPlayer][i] = temphand[i];
    #####:  745:            temphand[i] = -1;
    #####:  746:        }
        -:  747:        //Reset Hand
        -:  748:        
    #####:  749:        return 0;
        -:  750:        
        -:  751:        case gardens:
    #####:  752:        return -1;
        -:  753:        
        -:  754:        case mine:
    #####:  755:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  756:        
    #####:  757:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  758:        {
    #####:  759:            return -1;
        -:  760:        }
        -:  761:        
    #####:  762:        if (choice2 > treasure_map || choice2 < curse)
        -:  763:        {
    #####:  764:            return -1;
        -:  765:        }
        -:  766:        
    #####:  767:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  768:        {
    #####:  769:            return -1;
        -:  770:        }
        -:  771:        
    #####:  772:        gainCard(choice2, state, 2, currentPlayer);
        -:  773:        
        -:  774:        //discard card from hand
    #####:  775:        discardCard(handPos, currentPlayer, state, 0);
        -:  776:        
        -:  777:        //discard trashed card
    #####:  778:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  779:        {
    #####:  780:            if (state->hand[currentPlayer][i] == j)
        -:  781:            {
    #####:  782:                discardCard(i, currentPlayer, state, 0);
    #####:  783:                break;
        -:  784:            }
    #####:  785:        }
        -:  786:        
    #####:  787:        return 0;
        -:  788:        
        -:  789:        case remodel:
    #####:  790:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  791:        
    #####:  792:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  793:        {
    #####:  794:            return -1;
        -:  795:        }
        -:  796:        
    #####:  797:        gainCard(choice2, state, 0, currentPlayer);
        -:  798:        
        -:  799:        //discard card from hand
    #####:  800:        discardCard(handPos, currentPlayer, state, 0);
        -:  801:        
        -:  802:        //discard trashed card
    #####:  803:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:        {
    #####:  805:            if (state->hand[currentPlayer][i] == j)
        -:  806:            {
    #####:  807:                discardCard(i, currentPlayer, state, 0);
    #####:  808:                break;
        -:  809:            }
    #####:  810:        }
        -:  811:        
        -:  812:        
    #####:  813:        return 0;
        -:  814:        
        -:  815:        case smithy:
        -:  816:        
    #####:  817:        smithyCard(currentPlayer, handPos, state);
    #####:  818:        return 0;
        -:  819:        
        -:  820:        case village:
    #####:  821:        villageCard(currentPlayer, handPos, state);
    #####:  822:        return 0;
        -:  823:        
        -:  824:        case baron:
    #####:  825:        baronCard(choice1, currentPlayer, handPos, state);
    #####:  826:        return 0;
        -:  827:        
        -:  828:        case great_hall:
        -:  829:        //+1 Card
    #####:  830:        drawCard(currentPlayer, state);
        -:  831:        
        -:  832:        //+1 Actions
    #####:  833:        state->numActions++;
        -:  834:        
        -:  835:        //discard card from hand
    #####:  836:        discardCard(handPos, currentPlayer, state, 0);
    #####:  837:        return 0;
        -:  838:        
        -:  839:        case minion:
        -:  840:        //+1 action
    #####:  841:        state->numActions++;
        -:  842:        
        -:  843:        //discard card from hand
    #####:  844:        discardCard(handPos, currentPlayer, state, 0);
        -:  845:        
    #####:  846:        if (choice1)        //+2 coins
        -:  847:        {
    #####:  848:            state->coins = state->coins + 2;
    #####:  849:        }
        -:  850:        
    #####:  851:        else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  852:        {
        -:  853:            //discard hand
    #####:  854:            while(numHandCards(state) > 0)
        -:  855:            {
    #####:  856:                discardCard(handPos, currentPlayer, state, 0);
        -:  857:            }
        -:  858:            
        -:  859:            //draw 4
    #####:  860:            for (i = 0; i < 4; i++)
        -:  861:            {
    #####:  862:                drawCard(currentPlayer, state);
    #####:  863:            }
        -:  864:            
        -:  865:            //other players discard hand and redraw if hand size > 4
    #####:  866:            for (i = 0; i < state->numPlayers; i++)
        -:  867:            {
    #####:  868:                if (i != currentPlayer)
        -:  869:                {
    #####:  870:                    if ( state->handCount[i] > 4 )
        -:  871:                    {
        -:  872:                        //discard hand
    #####:  873:                        while( state->handCount[i] > 0 )
        -:  874:                        {
    #####:  875:                            discardCard(handPos, i, state, 0);
        -:  876:                        }
        -:  877:                        
        -:  878:                        //draw 4
    #####:  879:                        for (j = 0; j < 4; j++)
        -:  880:                        {
    #####:  881:                            drawCard(i, state);
    #####:  882:                        }
    #####:  883:                    }
    #####:  884:                }
    #####:  885:            }
        -:  886:            
    #####:  887:        }
    #####:  888:        return 0;
        -:  889:        
        -:  890:        case steward:
    #####:  891:        stewardCard(choice1, choice2, choice3, currentPlayer, handPos, state);
        -:  892:        
        -:  893:        case tribute:
    #####:  894:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  895:            if (state->deckCount[nextPlayer] > 0){
    #####:  896:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  897:                state->deckCount[nextPlayer]--;
    #####:  898:            }
    #####:  899:            else if (state->discardCount[nextPlayer] > 0){
    #####:  900:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  901:                state->discardCount[nextPlayer]--;
    #####:  902:            }
        -:  903:            else{
        -:  904:                //No Card to Reveal
        -:  905:                if (DEBUG){
        -:  906:                    printf("No cards to revealn");
        -:  907:                }
        -:  908:            }
    #####:  909:        }
        -:  910:        
        -:  911:        else{
    #####:  912:            if (state->deckCount[nextPlayer] == 0){
    #####:  913:                for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  914:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  915:                    state->deckCount[nextPlayer]++;
    #####:  916:                    state->discard[nextPlayer][i] = -1;
    #####:  917:                    state->discardCount[nextPlayer]--;
    #####:  918:                }
        -:  919:                
    #####:  920:                shuffle(nextPlayer,state);//Shuffle the deck
    #####:  921:            }
    #####:  922:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:            state->deckCount[nextPlayer]--;
    #####:  925:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  926:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  927:            state->deckCount[nextPlayer]--;
        -:  928:        }
        -:  929:        
    #####:  930:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  931:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  932:            state->playedCardCount++;
    #####:  933:            tributeRevealedCards[1] = -1;
    #####:  934:        }
        -:  935:        
    #####:  936:        for (i = 0; i <= 2; i ++){
    #####:  937:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  938:                state->coins += 2;
    #####:  939:            }
        -:  940:            
    #####:  941:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  942:                drawCard(currentPlayer, state);
    #####:  943:                drawCard(currentPlayer, state);
    #####:  944:            }
        -:  945:            else{//Action Card
    #####:  946:                state->numActions = state->numActions + 2;
        -:  947:            }
    #####:  948:        }
        -:  949:        
    #####:  950:        return 0;
        -:  951:        
        -:  952:        case ambassador:
    #####:  953:        j = 0;        //used to check if player has enough cards to discard
        -:  954:        
    #####:  955:        if (choice2 > 2 || choice2 < 0)
        -:  956:        {
    #####:  957:            return -1;
        -:  958:        }
        -:  959:        
    #####:  960:        if (choice1 == handPos)
        -:  961:        {
    #####:  962:            return -1;
        -:  963:        }
        -:  964:        
    #####:  965:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:        {
    #####:  967:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  968:            {
    #####:  969:                j++;
    #####:  970:            }
    #####:  971:        }
    #####:  972:        if (j < choice2)
        -:  973:        {
    #####:  974:            return -1;
        -:  975:        }
        -:  976:        
        -:  977:        if (DEBUG)
        -:  978:        printf("Player %d reveals card number: %dn", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  979:        
        -:  980:        //increase supply count for choosen card by amount being discarded
    #####:  981:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  982:        
        -:  983:        //each other player gains a copy of revealed card
    #####:  984:        for (i = 0; i < state->numPlayers; i++)
        -:  985:        {
    #####:  986:            if (i != currentPlayer)
        -:  987:            {
    #####:  988:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  989:            }
    #####:  990:        }
        -:  991:        
        -:  992:        //discard played card from hand
    #####:  993:        discardCard(handPos, currentPlayer, state, 0);
        -:  994:        
        -:  995:        //trash copies of cards returned to supply
    #####:  996:        for (j = 0; j < choice2; j++)
        -:  997:        {
    #####:  998:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  999:            {
    #####: 1000:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1001:                {
    #####: 1002:                    discardCard(i, currentPlayer, state, 1);
    #####: 1003:                    break;
        -: 1004:                }
    #####: 1005:            }
    #####: 1006:        }
        -: 1007:        
    #####: 1008:        return 0;
        -: 1009:        
        -: 1010:        case cutpurse:
        -: 1011:        
    #####: 1012:        updateCoins(currentPlayer, state, 2);
    #####: 1013:        for (i = 0; i < state->numPlayers; i++)
        -: 1014:        {
    #####: 1015:            if (i != currentPlayer)
        -: 1016:            {
    #####: 1017:                for (j = 0; j < state->handCount[i]; j++)
        -: 1018:                {
    #####: 1019:                    if (state->hand[i][j] == copper)
        -: 1020:                    {
    #####: 1021:                        discardCard(j, i, state, 0);
    #####: 1022:                        break;
        -: 1023:                    }
    #####: 1024:                    if (j == state->handCount[i])
        -: 1025:                    {
    #####: 1026:                        for (k = 0; k < state->handCount[i]; k++)
        -: 1027:                        {
        -: 1028:                            if (DEBUG)
        -: 1029:                            printf("Player %d reveals card number %dn", i, state->hand[i][k]);
    #####: 1030:                        }
    #####: 1031:                        break;
        -: 1032:                    }
    #####: 1033:                }
        -: 1034:                
    #####: 1035:            }
        -: 1036:            
    #####: 1037:        }
        -: 1038:        
        -: 1039:        //discard played card from hand
    #####: 1040:        discardCard(handPos, currentPlayer, state, 0);
        -: 1041:        
    #####: 1042:        return 0;
        -: 1043:        
        -: 1044:        
        -: 1045:        case embargo:
        -: 1046:        //+2 Coins
    #####: 1047:        state->coins = state->coins + 2;
        -: 1048:        
        -: 1049:        //see if selected pile is in play
    #####: 1050:        if ( state->supplyCount[choice1] == -1 )
        -: 1051:        {
    #####: 1052:            return -1;
        -: 1053:        }
        -: 1054:        
        -: 1055:        //add embargo token to selected supply pile
    #####: 1056:        state->embargoTokens[choice1]++;
        -: 1057:        
        -: 1058:        //trash card
    #####: 1059:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1060:        return 0;
        -: 1061:        
        -: 1062:        case outpost:
        -: 1063:        //set outpost flag
    #####: 1064:        state->outpostPlayed++;
        -: 1065:        
        -: 1066:        //discard card
    #####: 1067:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:        return 0;
        -: 1069:        
        -: 1070:        case salvager:
        -: 1071:        //+1 buy
    #####: 1072:        state->numBuys++;
        -: 1073:        
    #####: 1074:        if (choice1)
        -: 1075:        {
        -: 1076:            //gain coins equal to trashed card
    #####: 1077:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1078:            //trash card
    #####: 1079:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1080:        }
        -: 1081:        
        -: 1082:        //discard card
    #####: 1083:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1084:        return 0;
        -: 1085:        
        -: 1086:        case sea_hag:
    #####: 1087:        for (i = 0; i < state->numPlayers; i++){
    #####: 1088:            if (i != currentPlayer){
    #####: 1089:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];                state->deckCount[i]--;
    #####: 1090:                state->discardCount[i]++;
    #####: 1091:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1092:            }
    #####: 1093:        }
    #####: 1094:        return 0;
        -: 1095:        
        -: 1096:        case treasure_map:
        -: 1097:        //search hand for another treasure_map
    #####: 1098:        index = -1;
    #####: 1099:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1100:        {
    #####: 1101:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1102:            {
    #####: 1103:                index = i;
    #####: 1104:                break;
        -: 1105:            }
    #####: 1106:        }
    #####: 1107:        if (index > -1)
        -: 1108:        {
        -: 1109:            //trash both treasure cards
    #####: 1110:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1111:            discardCard(index, currentPlayer, state, 1);
        -: 1112:            
        -: 1113:            //gain 4 Gold cards
    #####: 1114:            for (i = 0; i < 4; i++)
        -: 1115:            {
    #####: 1116:                gainCard(gold, state, 1, currentPlayer);
    #####: 1117:            }
        -: 1118:            
        -: 1119:            //return success
    #####: 1120:            return 1;
        -: 1121:        }
        -: 1122:        
        -: 1123:        //no second treasure_map found in hand
    #####: 1124:        return -1;
        -: 1125:    }
        -: 1126:    
    #####: 1127:    return -1;
    #####: 1128:}
        -: 1129:
        -: 1130:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1131:{
        -: 1132:    
        -: 1133:    //if card is not trashed, added to Played pile
        7: 1134:    if (trashFlag < 1)
        -: 1135:    {
        -: 1136:        //add card to played pile
        5: 1137:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        5: 1138:        state->playedCardCount++;
        5: 1139:    }
        -: 1140:    
        -: 1141:    //set played card to -1
        7: 1142:    state->hand[currentPlayer][handPos] = -1;
        -: 1143:    
        -: 1144:    //remove card from player's hand
        7: 1145:    if ( handPos == (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
        -: 1146:    {
        -: 1147:        //reduce number of cards in hand
    #####: 1148:        state->handCount[currentPlayer]--;
    #####: 1149:    }
        7: 1150:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1151:    {
        -: 1152:        //reduce number of cards in hand
    #####: 1153:        state->handCount[currentPlayer]--;
    #####: 1154:    }
        -: 1155:    else
        -: 1156:    {
        -: 1157:        //replace discarded card with last card in hand
        7: 1158:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1159:        //set last card to -1
        7: 1160:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1161:        //reduce number of cards in hand
        7: 1162:        state->handCount[currentPlayer]--;
        -: 1163:    }
        -: 1164:    
        7: 1165:    return 0;
        -: 1166:}
        -: 1167:
        -: 1168:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1169:{
        -: 1170:    //Note: supplyPos is enum of choosen card
        -: 1171:    
        -: 1172:    //check if supply pile is empty (0) or card is not used in game (-1)
       34: 1173:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1174:    {
        1: 1175:        return -1;
        -: 1176:    }
        -: 1177:    
        -: 1178:    //added card for [whoseTurn] current player:
        -: 1179:    // toFlag = 0 : add to discard
        -: 1180:    // toFlag = 1 : add to deck
        -: 1181:    // toFlag = 2 : add to hand
        -: 1182:    
       33: 1183:    if (toFlag == 1)
        -: 1184:    {
        1: 1185:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1186:        state->deckCount[player]++;
        1: 1187:    }
       32: 1188:    else if (toFlag == 2)
        -: 1189:    {
        1: 1190:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1191:        state->handCount[player]++;
        1: 1192:    }
        -: 1193:    else
        -: 1194:    {
       31: 1195:        state->discard[player][ state->discardCount[player] ] = supplyPos;
       31: 1196:        state->discardCount[player]++;
        -: 1197:    }
        -: 1198:    
        -: 1199:    //decrease number in supply pile
       33: 1200:    state->supplyCount[supplyPos]--;
        -: 1201:    
       33: 1202:    return 0;
       34: 1203:}
        -: 1204:
        -: 1205:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1206:{
        -: 1207:    int i;
        -: 1208:    
        -: 1209:    //reset coin count
       23: 1210:    state->coins = 0;
        -: 1211:    
        -: 1212:    //add coins for each Treasure card in player's hand
      296: 1213:    for (i = 0; i < state->handCount[player]; i++)
        -: 1214:    {
      125: 1215:        if (state->hand[player][i] == copper)
        -: 1216:        {
       60: 1217:            state->coins += 1;
       60: 1218:        }
       65: 1219:        else if (state->hand[player][i] == silver)
        -: 1220:        {
        7: 1221:            state->coins += 2;
        7: 1222:        }
       58: 1223:        else if (state->hand[player][i] == gold)
        -: 1224:        {
        6: 1225:            state->coins += 3;
        6: 1226:        }
      125: 1227:    }
        -: 1228:    
        -: 1229:    //add bonus
       23: 1230:    state->coins += bonus;
        -: 1231:    
       23: 1232:    return 0;
        -: 1233:}
        -: 1234:
        -: 1235:void adventurerCard(int temphand[], int z, int cardDrawn, int currentPlayer, int drawntreasure, struct gameState *state) {
        8: 1236:    while(drawntreasure<=2){
        3: 1237:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1238:            shuffle(currentPlayer, state);
    #####: 1239:        }
        3: 1240:        drawCard(currentPlayer, state);
        3: 1241:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3: 1242:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        3: 1243:        drawntreasure++;
        -: 1244:        else{
    #####: 1245:            temphand[z]=cardDrawn;
    #####: 1246:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1247:            z++;
        -: 1248:        }
        -: 1249:    }
        2: 1250:    while(z-1>=0){
    #####: 1251:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1252:        z=z-1;
        -: 1253:    }
        1: 1254:    return;
        -: 1255:}
        -: 1256:
        -: 1257:void smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -: 1258:    
        -: 1259:    int i;
        -: 1260:    //+3 Cards
        6: 1261:    for (i = 1; i < 3; i++)
        -: 1262:    {
        2: 1263:        drawCard(currentPlayer, state);
        2: 1264:    }
        -: 1265:    
        -: 1266:    //discard card from hand
        1: 1267:    discardCard(handPos, currentPlayer, state, 0);
        1: 1268:    return;
        -: 1269:    
        -: 1270:}
        -: 1271:
        -: 1272:void villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -: 1273:    //+1 Card
        1: 1274:    drawCard(currentPlayer, state);
        -: 1275:    
        -: 1276:    //+2 Actions
        1: 1277:    state->numActions = state->numActions + 2;
        -: 1278:    
        -: 1279:    //discard played card from hand
        1: 1280:    drawCard(currentPlayer, state);
        1: 1281:    discardCard(handPos, currentPlayer, state, 0);
        1: 1282:    return;
        -: 1283:}
        -: 1284:
        -: 1285:void stewardCard(int choice1, int choice2, int choice3, int currentPlayer, int handPos, struct gameState *state) {
        3: 1286:    if (choice1 == 1)
        -: 1287:    {
        -: 1288:        //+2 cards
        1: 1289:        drawCard(currentPlayer, state);
        1: 1290:        drawCard(currentPlayer, state);
        1: 1291:    }
        2: 1292:    else if (choice1 == 2)
        -: 1293:    {
        -: 1294:        //+2 coins
        1: 1295:        state->coins = state->coins + 2;
        1: 1296:    }
        -: 1297:    else
        -: 1298:    {
        -: 1299:        //trash 2 cards in hand
        1: 1300:        discardCard(choice2, currentPlayer, state, 1);
        1: 1301:        discardCard(choice2, currentPlayer, state, 1);
        -: 1302:    }
        -: 1303:    
        -: 1304:    //discard card from hand
        3: 1305:    discardCard(handPos, currentPlayer, state, 0);
        3: 1306:    return;
        -: 1307:    
        -: 1308:}
        -: 1309:
        -: 1310:void baronCard(int choice1, int currentPlayer, int handPos, struct gameState *state) {
    #####: 1311:    state->numBuys++;//Increase buys by 1!
    #####: 1312:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1313:        int p = 0;//Iterator for hand!
    #####: 1314:        int card_not_discarded = 1;//Flag for discard set!
    #####: 1315:        while(card_not_discarded){
    #####: 1316:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1317:                state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1318:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1319:                state->discardCount[currentPlayer]++;
    #####: 1320:                for (;p < state->handCount[currentPlayer]; p++){
    #####: 1321:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1322:                }
    #####: 1323:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1324:                state->handCount[currentPlayer]++;
    #####: 1325:                card_not_discarded = 0;//Exit the loop
    #####: 1326:            }
    #####: 1327:            else if (p > state->handCount[currentPlayer]){
        -: 1328:                if(DEBUG) {
        -: 1329:                    printf("No estate cards in your hand, invalid choicen");
        -: 1330:                    printf("Must gain an estate if there are anyn");
        -: 1331:                }
    #####: 1332:                if (supplyCount(estate, state) > 0){
    #####: 1333:                    gainCard(estate, state, 0, currentPlayer);
    #####: 1334:                    state->supplyCount[estate]--;//Decrement estates
    #####: 1335:                    if (supplyCount(estate, state) == 0){
    #####: 1336:                        isGameOver(state);
    #####: 1337:                    }
    #####: 1338:                }
    #####: 1339:                card_not_discarded = 0;//Exit the loop
    #####: 1340:            }
        -: 1341:            
        -: 1342:            else{
    #####: 1343:                p++;//Next card
        -: 1344:            }
        -: 1345:        }
    #####: 1346:    }
        -: 1347:    
        -: 1348:    else{
    #####: 1349:        if (supplyCount(estate, state) > 0){
    #####: 1350:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1351:            state->supplyCount[estate]--;//Decrement Estates
    #####: 1352:            if (supplyCount(estate, state) == 0){
    #####: 1353:                isGameOver(state);
    #####: 1354:            }
    #####: 1355:        }
        -: 1356:    }
        -: 1357:    
        -: 1358:    
    #####: 1359:    return;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
