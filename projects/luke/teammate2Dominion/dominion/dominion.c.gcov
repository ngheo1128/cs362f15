        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/* instructor comments: file is updated. */
        -:    9:int dummymethod()
        -:   10:{
    #####:   11:	return 0;
        -:   12:}
        -:   13:int compare(const void* a, const void* b) {
      426:   14:  if (*(int*)a > *(int*)b)
        2:   15:    return 1;
      424:   16:  if (*(int*)a < *(int*)b)
      151:   17:    return -1;
      273:   18:  return 0;
      426:   19:}
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
        -:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
       15:   49:  SelectStream(1);
       15:   50:  PutSeed((long)randomSeed);
        -:   51:  
        -:   52:  //check number of players
       30:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
       15:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
      330:   62:  for (i = 0; i < 10; i++)
        -:   63:    {
     3300:   64:      for (j = 0; j < 10; j++)
        -:   65:        {
     2850:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
     1500:   70:        }
      150:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
       15:   78:  if (numPlayers == 2)
        -:   79:    {
       15:   80:      state->supplyCount[curse] = 10;
       15:   81:    }
    #####:   82:  else if (numPlayers == 3)
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
    #####:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
       15:   92:  if (numPlayers == 2)
        -:   93:    {
       15:   94:      state->supplyCount[estate] = 8;
       15:   95:      state->supplyCount[duchy] = 8;
       15:   96:      state->supplyCount[province] = 8;
       15:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
       15:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  107:  state->supplyCount[silver] = 40;
       15:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
      630:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  112:    {
     4950:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  114:	{
     2325:  115:	  if (kingdomCards[j] == i)
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
      285:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  119:		{
       30:  120:		  if (numPlayers == 2){ 
       30:  121:		    state->supplyCount[i] = 8; 
       30:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
       30:  124:		}
        -:  125:	      else
        -:  126:		{
      120:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
      150:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
     2175:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
     2175:  135:	}
        -:  136:
      300:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
       90:  143:  for (i = 0; i < numPlayers; i++)
        -:  144:    {
       30:  145:      state->deckCount[i] = 0;
      240:  146:      for (j = 0; j < 3; j++)
        -:  147:	{
       90:  148:	  state->deck[i][j] = estate;
       90:  149:	  state->deckCount[i]++;
       90:  150:	}
      480:  151:      for (j = 3; j < 10; j++)
        -:  152:	{
      210:  153:	  state->deck[i][j] = copper;
      210:  154:	  state->deckCount[i]++;		
      210:  155:	}
       30:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
       90:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {
       30:  161:      if ( shuffle(i, state) < 0 )
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
       30:  165:    }
        -:  166:
        -:  167:  //draw player hands
       90:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
       30:  171:      state->handCount[i] = 0;
       30:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
       30:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
      840:  181:  for (i = 0; i <= treasure_map; i++)
        -:  182:    {
      405:  183:      state->embargoTokens[i] = 0;
      405:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
       15:  187:  state->outpostPlayed = 0;
       15:  188:  state->phase = 0;
       15:  189:  state->numActions = 1;
       15:  190:  state->numBuys = 1;
       15:  191:  state->playedCardCount = 0;
       15:  192:  state->whoseTurn = 0;
       15:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
      180:  197:  for (it = 0; it < 5; it++){
       75:  198:    drawCard(state->whoseTurn, state);
       75:  199:  }
        -:  200:
       15:  201:  updateCoins(state->whoseTurn, state, 0);
        -:  202:
       15:  203:  return 0;
       15:  204:}
        -:  205:
        -:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
       31:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
       31:  214:  if (state->deckCount[player] < 1)
    #####:  215:    return -1;
       31:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
      672:  219:  while (state->deckCount[player] > 0) {
      305:  220:    card = floor(Random() * state->deckCount[player]);
      305:  221:    newDeck[newDeckPos] = state->deck[player][card];
      305:  222:    newDeckPos++;
     2092:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
      741:  224:      state->deck[player][i] = state->deck[player][i+1];
      741:  225:    }
      305:  226:    state->deckCount[player]--;
        -:  227:  }
      672:  228:  for (i = 0; i < newDeckPos; i++) {
      305:  229:    state->deck[player][i] = newDeck[i];
      305:  230:    state->deckCount[player]++;
      305:  231:  }
        -:  232:
       31:  233:  return 0;
       31:  234:}
        -:  235:
        -:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:	
    #####:  274:  return 0;
    #####:  275:}
        -:  276:
        -:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
    #####:  314:}
        -:  315:
        -:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
        -:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
        -:  325:int supplyCount(int card, struct gameState *state) {
        4:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
        -:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
    #####:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
        -:  351:int whoseTurn(struct gameState *state) {
        6:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
        -:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
        -:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
       12:  400:  if (state->supplyCount[province] == 0)
        -:  401:    {
        1:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
       11:  406:  j = 0;
      572:  407:  for (i = 0; i < 25; i++)
        -:  408:    {
      275:  409:      if (state->supplyCount[i] == 0)
        -:  410:	{
        6:  411:	  j++;
        6:  412:	}
      275:  413:    }
       11:  414:  if ( j >= 3)
        -:  415:    {
        1:  416:      return 1;
        -:  417:    }
        -:  418:
       10:  419:  return 0;
       12:  420:}
        -:  421:
        -:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
        -:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
        -:  473:	{
    #####:  474:	  players[i] = -9999;
    #####:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
    #####:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
        -:  487:	{
    #####:  488:	  j = i;
    #####:  489:	}
    #####:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
        -:  498:	{
    #####:  499:	  players[i]++;
    #####:  500:	}
    #####:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
        -:  508:	{
    #####:  509:	  j = i;
    #####:  510:	}
    #####:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
        -:  518:	{
    #####:  519:	  players[i] = 1;
    #####:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
    #####:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
        -:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
       82:  533:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
    #####:  538:    for (i = 0; i < state->discardCount[player];i++){
    #####:  539:      state->deck[player][i] = state->discard[player][i];
    #####:  540:      state->discard[player][i] = -1;
    #####:  541:    }
        -:  542:
    #####:  543:    state->deckCount[player] = state->discardCount[player];
    #####:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
    #####:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
    #####:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
    #####:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
    #####:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
    #####:  564:    if (deckCounter == 0)
    #####:  565:      return -1;
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
    #####:  570:  }
        -:  571:
        -:  572:  else{
       82:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
       82:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
       82:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       82:  581:    state->deckCount[player]--;
       82:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
       82:  585:  return 0;
       82:  586:}
        -:  587:
        -:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
        -:  651:void adventurerCard(struct gameState *state){
        1:  652:	int drawntreasure = 0;
        1:  653:	int currentPlayer = whoseTurn(state);
        -:  654:	int cardDrawn;
        -:  655:	int temphand[MAX_HAND];
        1:  656:	int z = 0;
        -:  657:	
        8:  658:    while(drawntreasure<3){
        3:  659:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  660:		  shuffle(currentPlayer, state);
    #####:  661:		}
        3:  662:		drawCard(currentPlayer, state);
        3:  663:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5:  664:		if (cardDrawn == copper && cardDrawn == silver && cardDrawn == gold)
    #####:  665:		  drawntreasure++;
        -:  666:		else{
        3:  667:		  temphand[z]=cardDrawn;
        3:  668:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        3:  669:		  z++;
        3:  670:		  drawntreasure++;
        -:  671:		}
        -:  672:    }
        8:  673:    while(z-1>=0){
        3:  674:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        3:  675:		z=z-1;
        -:  676:    }
        1:  677:}
        -:  678:
        -:  679:void smithyCard(struct gameState *state, int handPos){
        -:  680:	int i;
        1:  681:	int currentPlayer = whoseTurn(state);
        -:  682:    //+3 Cards
        4:  683:    for (i = 1; i < 2; i++)
        -:  684:	{
        1:  685:	  drawCard(currentPlayer, state);
        1:  686:	}
        -:  687:		
        -:  688:    //discard card from hand
        1:  689:    discardCard(handPos, currentPlayer, state, 0);
        1:  690:}
        -:  691:
        -:  692:void great_hallCard(struct gameState *state, int handPos){
    #####:  693:	int currentPlayer = whoseTurn(state);
        -:  694:    //+1 Card
    #####:  695:    drawCard(currentPlayer, state);
        -:  696:	
        -:  697:    //+1 Card
    #####:  698:    drawCard(currentPlayer, state);
        -:  699:		
        -:  700:    //+1 Actions
    #####:  701:    state->numActions++;
        -:  702:		
        -:  703:    //discard card from hand
    #####:  704:    discardCard(handPos, currentPlayer, state, 0);
    #####:  705:}
        -:  706:
        -:  707:void villageCard(struct gameState *state, int handPos){
        1:  708:	int currentPlayer = whoseTurn(state);
        -:  709:    //+1 Card
        1:  710:    drawCard(currentPlayer, state);
        -:  711:		
        -:  712:    //+2 Actions
        1:  713:    state->numActions = state->numActions + 2;
        -:  714:		
        -:  715:    //discard played card from hand
        1:  716:    discardCard(handPos, currentPlayer, state, 0);
        1:  717:}
        -:  718:
        -:  719:void council_roomCard(struct gameState *state, int handPos){
    #####:  720:	int currentPlayer = whoseTurn(state);
        -:  721:	int i;
        -:  722:    //+4 Cards
    #####:  723:    for (i = 0; i < 6; i++)
        -:  724:	{
    #####:  725:	  drawCard(currentPlayer, state);
    #####:  726:	}
        -:  727:			
        -:  728:	    //+1 Buy
    #####:  729:	    state->numBuys++;
        -:  730:			
        -:  731:	    //Each other player draws a card
    #####:  732:	    for (i = 0; i < state->numPlayers; i++)
        -:  733:	{
    #####:  734:	  if ( i == currentPlayer )
        -:  735:	    {
    #####:  736:	      drawCard(i, state);
    #####:  737:	    }
    #####:  738:	}
        -:  739:		
        -:  740:    //put played card in played card pile
    #####:  741:    discardCard(handPos, currentPlayer, state, 0);
        -:  742:	
    #####:  743:}
        -:  744:
        -:  745:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  746:{
        -:  747:  int i;
        -:  748:  int j;
        -:  749:  int k;
        -:  750:  int x;
        -:  751:  int index;
        3:  752:  int currentPlayer = whoseTurn(state);
        3:  753:  int nextPlayer = currentPlayer + 1;
        -:  754:
        3:  755:  int tributeRevealedCards[2] = {-1, -1};
        -:  756:  int temphand[MAX_HAND];// moved above the if statement
        3:  757:  int drawntreasure=0;
        -:  758:  int cardDrawn;
        3:  759:  int z = 0;// this is the counter for the temp hand
        3:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
    #####:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
        3:  766:  switch( card ) 
        -:  767:    {
        -:  768:    case adventurer:
    #####:  769:		adventurerCard(state);
    #####:  770:		return 0;
        -:  771:			
        -:  772:    case council_room:
    #####:  773:	  council_roomCard(state, handPos);
        -:  774:    	
    #####:  775:      return 0;
        -:  776:			
        -:  777:    case feast:
        -:  778:      //gain card with cost up to 5
        -:  779:      //Backup hand
    #####:  780:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  781:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  782:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  783:      }
        -:  784:      //Backup hand
        -:  785:
        -:  786:      //Update Coins for Buy
    #####:  787:      updateCoins(currentPlayer, state, 5);
    #####:  788:      x = 1;//Condition to loop on
    #####:  789:      while( x == 1) {//Buy one card
    #####:  790:	if (supplyCount(choice1, state) <= 0){
        -:  791:	  if (DEBUG)
        -:  792:	    printf("None of that card left, sorry!\n");
        -:  793:
        -:  794:	  if (DEBUG){
        -:  795:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  796:	  }
    #####:  797:	}
    #####:  798:	else if (state->coins < getCost(choice1)){
    #####:  799:	  printf("That card is too expensive!\n");
        -:  800:
        -:  801:	  if (DEBUG){
        -:  802:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  803:	  }
    #####:  804:	}
        -:  805:	else{
        -:  806:
        -:  807:	  if (DEBUG){
        -:  808:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  809:	  }
        -:  810:
    #####:  811:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  812:	  x = 0;//No more buying cards
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  816:	  }
        -:  817:
        -:  818:	}
        -:  819:      }     
        -:  820:
        -:  821:      //Reset Hand
    #####:  822:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  823:	state->hand[currentPlayer][i] = temphand[i];
    #####:  824:	temphand[i] = -1;
    #####:  825:      }
        -:  826:      //Reset Hand
        -:  827:      			
    #####:  828:      return 0;
        -:  829:			
        -:  830:    case gardens:
    #####:  831:      return -1;
        -:  832:			
        -:  833:    case mine:
    #####:  834:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  835:
    #####:  836:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  837:	{
    #####:  838:	  return -1;
        -:  839:	}
        -:  840:		
    #####:  841:      if (choice2 > treasure_map || choice2 < curse)
        -:  842:	{
    #####:  843:	  return -1;
        -:  844:	}
        -:  845:
    #####:  846:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  847:	{
    #####:  848:	  return -1;
        -:  849:	}
        -:  850:
    #####:  851:      gainCard(choice2, state, 2, currentPlayer);
        -:  852:
        -:  853:      //discard card from hand
    #####:  854:      discardCard(handPos, currentPlayer, state, 0);
        -:  855:
        -:  856:      //discard trashed card
    #####:  857:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  858:	{
    #####:  859:	  if (state->hand[currentPlayer][i] == j)
        -:  860:	    {
    #####:  861:	      discardCard(i, currentPlayer, state, 0);			
    #####:  862:	      break;
        -:  863:	    }
    #####:  864:	}
        -:  865:			
    #####:  866:      return 0;
        -:  867:			
        -:  868:    case remodel:
    #####:  869:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 0, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
    #####:  889:	}
        -:  890:
        -:  891:
    #####:  892:      return 0;
        -:  893:		
        -:  894:    case smithy:
    #####:  895:	  smithyCard(state, handPos);
    #####:  896:      return 0;
        -:  897:		
        -:  898:    case village:
    #####:  899:	  villageCard(state, handPos);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case baron:
    #####:  903:      state->numBuys++;//Increase buys by 1!
    #####:  904:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  905:	int p = 0;//Iterator for hand!
    #####:  906:	int card_not_discarded = 1;//Flag for discard set!
    #####:  907:	while(card_not_discarded){
    #####:  908:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  909:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  910:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  911:	    state->discardCount[currentPlayer]++;
    #####:  912:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  913:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  914:	    }
    #####:  915:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  916:	    state->handCount[currentPlayer]--;
    #####:  917:	    card_not_discarded = 0;//Exit the loop
    #####:  918:	  }
    #####:  919:	  else if (p > state->handCount[currentPlayer]){
        -:  920:	    if(DEBUG) {
        -:  921:	      printf("No estate cards in your hand, invalid choice\n");
        -:  922:	      printf("Must gain an estate if there are any\n");
        -:  923:	    }
    #####:  924:	    if (supplyCount(estate, state) > 0){
    #####:  925:	      gainCard(estate, state, 0, currentPlayer);
    #####:  926:	      state->supplyCount[estate]--;//Decrement estates
    #####:  927:	      if (supplyCount(estate, state) == 0){
    #####:  928:		isGameOver(state);
    #####:  929:	      }
    #####:  930:	    }
    #####:  931:	    card_not_discarded = 0;//Exit the loop
    #####:  932:	  }
        -:  933:			    
        -:  934:	  else{
    #####:  935:	    p++;//Next card
        -:  936:	  }
        -:  937:	}
    #####:  938:      }
        -:  939:			    
        -:  940:      else{
    #####:  941:	if (supplyCount(estate, state) > 0){
    #####:  942:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  943:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  944:	  if (supplyCount(estate, state) == 0){
    #####:  945:	    isGameOver(state);
    #####:  946:	  }
    #####:  947:	}
        -:  948:      }
        -:  949:	    
        -:  950:      
    #####:  951:      return 0;
        -:  952:		
        -:  953:    case great_hall:
    #####:  954:	  great_hallCard(state, handPos);
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case minion:
        -:  958:      //+1 action
    #####:  959:      state->numActions++;
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:			
    #####:  964:      if (choice1)		//+2 coins
        -:  965:	{
    #####:  966:	  state->coins = state->coins + 2;
    #####:  967:	}
        -:  968:			
    #####:  969:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  970:	{
        -:  971:	  //discard hand
    #####:  972:	  while(numHandCards(state) > 0)
        -:  973:	    {
    #####:  974:	      discardCard(handPos, currentPlayer, state, 0);
        -:  975:	    }
        -:  976:				
        -:  977:	  //draw 4
    #####:  978:	  for (i = 0; i < 4; i++)
        -:  979:	    {
    #####:  980:	      drawCard(currentPlayer, state);
    #####:  981:	    }
        -:  982:				
        -:  983:	  //other players discard hand and redraw if hand size > 4
    #####:  984:	  for (i = 0; i < state->numPlayers; i++)
        -:  985:	    {
    #####:  986:	      if (i != currentPlayer)
        -:  987:		{
    #####:  988:		  if ( state->handCount[i] > 4 )
        -:  989:		    {
        -:  990:		      //discard hand
    #####:  991:		      while( state->handCount[i] > 0 )
        -:  992:			{
    #####:  993:			  discardCard(handPos, i, state, 0);
        -:  994:			}
        -:  995:							
        -:  996:		      //draw 4
    #####:  997:		      for (j = 0; j < 4; j++)
        -:  998:			{
    #####:  999:			  drawCard(i, state);
    #####: 1000:			}
    #####: 1001:		    }
    #####: 1002:		}
    #####: 1003:	    }
        -: 1004:				
    #####: 1005:	}
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case steward:
        3: 1009:      if (choice1 == 1)
        -: 1010:	{
        -: 1011:	  //+2 cards
        1: 1012:	  drawCard(currentPlayer, state);
        1: 1013:	  drawCard(currentPlayer, state);
        1: 1014:	}
        2: 1015:      else if (choice1 == 2)
        -: 1016:	{
        -: 1017:	  //+2 coins
        1: 1018:	  state->coins = state->coins + 2;
        1: 1019:	}
        -: 1020:      else
        -: 1021:	{
        -: 1022:	  //trash 2 cards in hand
        1: 1023:	  discardCard(choice2, currentPlayer, state, 1);
        1: 1024:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1025:	}
        -: 1026:			
        -: 1027:      //discard card from hand
        3: 1028:      discardCard(handPos, currentPlayer, state, 0);
        3: 1029:      return 0;
        -: 1030:		
        -: 1031:    case tribute:
    #####: 1032:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1033:	if (state->deckCount[nextPlayer] > 0){
    #####: 1034:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	  state->deckCount[nextPlayer]--;
    #####: 1036:	}
    #####: 1037:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1038:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1039:	  state->discardCount[nextPlayer]--;
    #####: 1040:	}
        -: 1041:	else{
        -: 1042:	  //No Card to Reveal
        -: 1043:	  if (DEBUG){
        -: 1044:	    printf("No cards to reveal\n");
        -: 1045:	  }
        -: 1046:	}
    #####: 1047:      }
        -: 1048:	    
        -: 1049:      else{
    #####: 1050:	if (state->deckCount[nextPlayer] == 0){
    #####: 1051:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1052:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1053:	    state->deckCount[nextPlayer]++;
    #####: 1054:	    state->discard[nextPlayer][i] = -1;
    #####: 1055:	    state->discardCount[nextPlayer]--;
    #####: 1056:	  }
        -: 1057:			    
    #####: 1058:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1059:	} 
    #####: 1060:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
    #####: 1063:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
        -: 1066:      }    
        -: 1067:		       
    #####: 1068:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1069:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1070:	state->playedCardCount++;
    #####: 1071:	tributeRevealedCards[1] = -1;
    #####: 1072:      }
        -: 1073:
    #####: 1074:      for (i = 0; i <= 2; i ++){
    #####: 1075:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1076:	  state->coins += 2;
    #####: 1077:	}
        -: 1078:		    
    #####: 1079:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1080:	  drawCard(currentPlayer, state);
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	}
        -: 1083:	else{//Action Card
    #####: 1084:	  state->numActions = state->numActions + 2;
        -: 1085:	}
    #####: 1086:      }
        -: 1087:	    
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case ambassador:
    #####: 1091:      j = 0;		//used to check if player has enough cards to discard
        -: 1092:
    #####: 1093:      if (choice2 > 2 || choice2 < 0)
        -: 1094:	{
    #####: 1095:	  return -1;				
        -: 1096:	}
        -: 1097:
    #####: 1098:      if (choice1 == handPos)
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1104:	{
    #####: 1105:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1106:	    {
    #####: 1107:	      j++;
    #####: 1108:	    }
    #####: 1109:	}
    #####: 1110:      if (j < choice2)
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
        -: 1115:      if (DEBUG) 
        -: 1116:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1117:
        -: 1118:      //increase supply count for choosen card by amount being discarded
    #####: 1119:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1120:			
        -: 1121:      //each other player gains a copy of revealed card
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
        -: 1125:	    {
    #####: 1126:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1127:	    }
    #####: 1128:	}
        -: 1129:
        -: 1130:      //discard played card from hand
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1132:
        -: 1133:      //trash copies of cards returned to supply
    #####: 1134:      for (j = 0; j < choice2; j++)
        -: 1135:	{
    #####: 1136:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1137:	    {
    #####: 1138:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1139:		{
    #####: 1140:		  discardCard(i, currentPlayer, state, 1);
    #####: 1141:		  break;
        -: 1142:		}
    #####: 1143:	    }
    #####: 1144:	}			
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case cutpurse:
        -: 1149:
    #####: 1150:      updateCoins(currentPlayer, state, 2);
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1156:		{
    #####: 1157:		  if (state->hand[i][j] == copper)
        -: 1158:		    {
    #####: 1159:		      discardCard(j, i, state, 0);
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		  if (j == state->handCount[i])
        -: 1163:		    {
    #####: 1164:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1168:			}	
    #####: 1169:		      break;
        -: 1170:		    }		
    #####: 1171:		}
        -: 1172:					
    #####: 1173:	    }
        -: 1174:				
    #####: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1179:
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
    #####: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
    #####: 1210:      state->numBuys++;
        -: 1211:			
    #####: 1212:      if (choice1)
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
    #####: 1225:      for (i = 0; i < state->numPlayers; i++){
    #####: 1226:	if (i != currentPlayer){
    #####: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1228:	  state->discardCount[i]++;
    #####: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1230:	}
    #####: 1231:      }
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
        -: 1243:	    }
    #####: 1244:	}
    #####: 1245:      if (index > -1)
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return -1;
        3: 1266:}
        -: 1267:
        -: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
        7: 1272:  if (trashFlag < 1)
        -: 1273:    {
        -: 1274:      //add card to played pile
        5: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1276:      state->playedCardCount++;
        5: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
        7: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
        7: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
    #####: 1287:    }
        7: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
    #####: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
        7: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
        7: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
        7: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
        7: 1303:  return 0;
        -: 1304:}
        -: 1305:
        -: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1311:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1312:    {
        1: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
        3: 1321:  if (toFlag == 1)
        -: 1322:    {
        1: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1324:      state->deckCount[player]++;
        1: 1325:    }
        2: 1326:  else if (toFlag == 2)
        -: 1327:    {
        1: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1329:      state->handCount[player]++;
        1: 1330:    }
        -: 1331:  else
        -: 1332:    {
        1: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
        3: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
        3: 1340:  return 0;
        4: 1341:}
        -: 1342:
        -: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
       20: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
      260: 1351:  for (i = 0; i < state->handCount[player]; i++)
        -: 1352:    {
      110: 1353:      if (state->hand[player][i] == copper)
        -: 1354:	{
       76: 1355:	  state->coins += 1;
       76: 1356:	}
       34: 1357:      else if (state->hand[player][i] == silver)
        -: 1358:	{
        7: 1359:	  state->coins += 2;
        7: 1360:	}
       27: 1361:      else if (state->hand[player][i] == gold)
        -: 1362:	{
        6: 1363:	  state->coins += 3;
        6: 1364:	}	
      110: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
       20: 1368:  state->coins += bonus;
        -: 1369:
       20: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
        -: 1375:
