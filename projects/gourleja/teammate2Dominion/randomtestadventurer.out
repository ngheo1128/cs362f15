

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : adventurer()
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 14
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 7
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 8
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 13
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 7 , actual = 10
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 4
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 11
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 2
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 0 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 5 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 6 , actual = 9
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 3 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 9 , actual = 12
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 6
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 1 , actual = 3
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 2 , actual = 5
  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = 8 , actual = 12
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 7
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 9
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = 4 , actual = 8
    Tests Passed    : 500
    Tests Failed    : 1000
-------------------------------------------------------------------------------

File 'randomtestadventurer.c'
Lines executed:92.11% of 76
randomtestadventurer.c:creating 'randomtestadventurer.c.gcov'

File 'dominion.c'
Lines executed:19.61% of 561
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 4 - randomtestadventurer.c
        -:    6: * Description : Random tests for Adventurer card
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include <time.h>
        -:   12:#include "dominion.h"
        -:   13:#include "rngs.h"
        -:   14:
        -:   15:#define CARDNAME    "adventurer"
        -:   16:#define BASESEED    10
        -:   17:#define TESTNUMBER  500
        -:   18:
        -:   19:/*
        -:   20: * Description:     Create a random array of kingdom cards, always including the card under test
        -:   21: * Preconditions:   The card array pointer and size has been provided
        -:   22: * Postconditions:  The randomly generated hand of cards is returned to the calling function
        -:   23: */
     1500:   24:void randomCardSetup(int * kingdomCards, int setupSize)
        -:   25:{
        -:   26:    int i;
        -:   27:
     1500:   28:    kingdomCards[0] = CARDNAME; // Ensure card to test is always in the set of cards
        -:   29:
    15000:   30:    for (i = 1; i<setupSize; i++) {
    13500:   31:        int cardCheck = 0;
    44292:   32:        while(cardCheck == 0) {
    17292:   33:            int testCard = rand()%20 + 7; // 20 kingdom cards available starting at the seventh position
    17292:   34:            if (testCard == CARDNAME) { // Check for duplication of the card under test
    #####:   35:                cardCheck = 0;
        -:   36:            } else { // Check cards that are already pulled into the available set
    17292:   37:                kingdomCards[i] = testCard;
        -:   38:                int j;
    98034:   39:                for (j = 0; j < i; j++) {
    84534:   40:                    if(kingdomCards[j] == testCard) {
     3792:   41:                        cardCheck = 0;
     3792:   42:                        break;
        -:   43:                    } else {
    80742:   44:                        cardCheck = 1;
        -:   45:                    }
        -:   46:                }
        -:   47:            }
        -:   48:        }
        -:   49:    }
     1500:   50:    return;
        -:   51:}
        -:   52:
        -:   53:
        -:   54:/*
        -:   55: * Description:     Create a fully random game
        -:   56: * Preconditions:   The game struct has been provided
        -:   57: * Postconditions:  The new game is created with a full set of random values
        -:   58: */
     1500:   59:void randomGame(struct gameState *state)
        -:   60:{
     1500:   61:    int testSeed = rand()%50000;
     1500:   62:    int testPlayers = rand()%2 + 2;
        -:   63:    int cards[10];
     1500:   64:    randomCardSetup(cards, 10);
     1500:   65:    initializeGame(testPlayers, cards, testSeed, state);
     1500:   66:    return;
        -:   67:}
        -:   68:
        -:   69:/*
        -:   70: * Description:     Test the return values of the adventurer card
        -:   71: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   72: * Postconditions:  The general messages and any failed test messages are displayed
        -:   73: */
        1:   74:int testCard(char* currentTest, int seed, struct gameState *state)
        -:   75:{
        -:   76:    int i;
        1:   77:    int testsPassed = 0;
        1:   78:    int testsFailed = 0;
        1:   79:    int expectedValue = 0;
        -:   80:
        1:   81:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   82:    printf ("-------------------------------------------------------------------------------\n");
        1:   83:    printf ("Testing Method  : %s()\n", currentTest);
        -:   84:
        1:   85:    int currentPlayer = whoseTurn(state);
        1:   86:    int drawntreasure=0;
        1:   87:    int handPos = 0;
        -:   88:    int temphand[MAX_HAND];// moved above the if statement
        1:   89:    int z = 0;// this is the counter for the temp hand
        -:   90:    int cardDrawn;
        -:   91:
        -:   92:    //Check reduction of cards in hand
      501:   93:    for (i=0; i<TESTNUMBER;i++){
      500:   94:        randomGame(state);
      500:   95:        expectedValue = state->handCount[state->whoseTurn] - 1;
      500:   96:        cardEffect_Adventurer(adventurer, 0, 0, 0, state, handPos, 0, drawntreasure, state->whoseTurn, cardDrawn, temphand, z);
      500:   97:        if(state->handCount[state->whoseTurn] < expectedValue) {
    #####:   98:            printf("  TEST FAIL    : Adventurer remove card from hand failed\n");
    #####:   99:            testsFailed++;
      500:  100:        } else {testsPassed++;}
        -:  101:    }
        -:  102:
        -:  103:
        -:  104:    //Check addition of cards to hand
      501:  105:    for (i=0; i<TESTNUMBER;i++){
      500:  106:        randomGame(state);
        -:  107:
      500:  108:        state->handCount[state->whoseTurn] = rand()%10;
        -:  109:
      500:  110:        expectedValue = state->handCount[state->whoseTurn];
      500:  111:        cardEffect_Adventurer(adventurer, 0, 0, 0, state, handPos, 0, drawntreasure, state->whoseTurn, cardDrawn, temphand, z);
        -:  112:        //cardAdventurer(temphand, z, cardDrawn, drawntreasure, handPos, state->whoseTurn, state);
      500:  113:        if(state->handCount[state->whoseTurn] - expectedValue > 1) {
      500:  114:            printf("  TEST FAIL    : Adventurer add correct number of cards to hand failed : ev = %i , actual = %i\n", expectedValue, state->handCount[state->whoseTurn]);
      500:  115:            testsFailed++;
    #####:  116:        } else {testsPassed++;}
        -:  117:    }
        -:  118:
        -:  119:int j;
        -:  120:
      501:  121:    for (i=0; i<TESTNUMBER;i++){
        -:  122:        //Check hand size with lack of treasure cards to add to hand
      500:  123:        randomGame(state);
        -:  124:
        -:  125:        //state->deckCount[state->whoseTurn] = rand()%20;
        -:  126:        //state->handCount[state->whoseTurn] = rand()%10;
      500:  127:        int card = 0;
   250500:  128:        for (j = 0; j < TESTNUMBER; j++)
        -:  129:        {
   250000:  130:          state->deck[state->whoseTurn][i] = card;
   250000:  131:          state->discard[state->whoseTurn][i] = card;
        -:  132:        }
      500:  133:        expectedValue = state->handCount[state->whoseTurn] - 1;
      500:  134:        if (expectedValue == -1) {expectedValue++;}
      500:  135:        cardEffect_Adventurer(adventurer, 0, 0, 0, state, handPos, 0, drawntreasure, state->whoseTurn, cardDrawn, temphand, z);
        -:  136:        //cardAdventurer(temphand, z, cardDrawn, drawntreasure, handPos, state->whoseTurn, state);
      500:  137:        if(state->handCount[state->whoseTurn] != expectedValue) {
      500:  138:            printf("  TEST FAIL    : Adventurer no treasure available but cards to hand failed : ev = %i , actual = %i\n", expectedValue, state->handCount[state->whoseTurn]);
      500:  139:            testsFailed++;
    #####:  140:        } else {testsPassed++;}
        -:  141:    }
        -:  142:
        1:  143:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:  144:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:  145:    printf ("-------------------------------------------------------------------------------\n\n");
        -:  146:
        1:  147:    return 0;
        -:  148:}
        -:  149:
        -:  150:
        -:  151:/*
        -:  152: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:  153: * Postconditions:  Exit the test program normally
        -:  154: */
        1:  155:int main (int argc, char** argv)
        -:  156:{
        -:  157:
        -:  158:    // Setup Game Seed
        1:  159:    srand(time(NULL));
        -:  160:    int seed;
        1:  161:    char* currentTest = CARDNAME;
        1:  162:    if(argv[1]) {
    #####:  163:        seed = atoi(argv[1]);
        -:  164:    } else {
        1:  165:        seed = BASESEED;
        -:  166:    }
        -:  167:
        -:  168:    // Initialize Game State
        -:  169:    struct gameState G;
        1:  170:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:  171:    initializeGame(2, k, seed, &G);
        -:  172:
        1:  173:    testCard(currentTest,seed, &G);
        -:  174:
        1:  175:    return 0;
        -:  176:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
    56070:   10:int compare(const void* a, const void* b) {
    56070:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
    56070:   13:  if (*(int*)a < *(int*)b)
    14952:   14:    return -1;
    41118:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
     1501:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
     1501:   46:  SelectStream(1);
     1501:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
     1501:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
     1501:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
    16511:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
   165110:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
   150100:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
     1501:   75:  if (numPlayers == 2)
        -:   76:    {
      765:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
      736:   79:  else if (numPlayers == 3)
        -:   80:    {
      736:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
     1501:   89:  if (numPlayers == 2)
        -:   90:    {
      765:   91:      state->supplyCount[estate] = 8;
      765:   92:      state->supplyCount[duchy] = 8;
      765:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
      736:   97:      state->supplyCount[estate] = 12;
      736:   98:      state->supplyCount[duchy] = 12;
      736:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
     1501:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1501:  104:  state->supplyCount[silver] = 40;
     1501:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    31521:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
   262665:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
   246155:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
    13510:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
     2704:  117:		  if (numPlayers == 2){ 
      696:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
      656:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
    12158:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
    13510:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
   232645:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
     5239:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
     3738:  142:      state->deckCount[i] = 0;
    14952:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
    11214:  145:	  state->deck[i][j] = estate;
    11214:  146:	  state->deckCount[i]++;
        -:  147:	}
    29904:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
    26166:  150:	  state->deck[i][j] = copper;
    26166:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
     5239:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
     3738:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
     5239:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
     3738:  168:      state->handCount[i] = 0;
     3738:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
    42028:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
    40527:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
     1501:  184:  state->outpostPlayed = 0;
     1501:  185:  state->phase = 0;
     1501:  186:  state->numActions = 1;
     1501:  187:  state->numBuys = 1;
     1501:  188:  state->playedCardCount = 0;
     1501:  189:  state->whoseTurn = 0;
     1501:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
     9006:  194:  for (it = 0; it < 5; it++){
     7505:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
     1501:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
     1501:  200:  return 0;
        -:  201:}
        -:  202:
     3738:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
     3738:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
     3738:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
     3738:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
    44856:  216:  while (state->deckCount[player] > 0) {
    37380:  217:    card = floor(Random() * state->deckCount[player]);
    37380:  218:    newDeck[newDeckPos] = state->deck[player][card];
    37380:  219:    newDeckPos++;
   121915:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
    84535:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
    37380:  223:    state->deckCount[player]--;
        -:  224:  }
    41118:  225:  for (i = 0; i < newDeckPos; i++) {
    37380:  226:    state->deck[player][i] = newDeck[i];
    37380:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
     3738:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
        1:  348:int whoseTurn(struct gameState *state) {
        1:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
    11587:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
    11587:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
    11587:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
    11587:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
    11587:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    11587:  578:    state->deckCount[player]--;
    11587:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
    11587:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:
     1500:  649:int cardEffect_Adventurer(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int drawntreasure, int currentPlayer, int cardDrawn, int temphand[], int z) {
     7082:  650:    while(drawntreasure<2){
     4082:  651:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  652:            shuffle(currentPlayer, state);
        -:  653:        }
     4082:  654:        drawCard(currentPlayer, state);
     4082:  655:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     4082:  656:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     3000:  657:            drawntreasure++;
        -:  658:        else{
     1082:  659:            temphand[z]=cardDrawn;              //this should just remove the top card (the most recently drawn one).
     1082:  660:            z++;
        -:  661:        }
        -:  662:    }
     4082:  663:    while(z-1>=0){
     1082:  664:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1082:  665:        z=z-1;
        -:  666:    }
     1500:  667:    return 0;
        -:  668:}
        -:  669:
    #####:  670:int cardEffect_Smithy(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer, int i) {
        -:  671:    //+3 Cards
    #####:  672:    for (i = 0; i <= 3; i++)
        -:  673:    {
    #####:  674:        drawCard(currentPlayer, state);
        -:  675:    }
        -:  676:    
        -:  677:    //discard card from hand
    #####:  678:    discardCard(handPos, currentPlayer, state, 0);
    #####:  679:    return 0;
        -:  680:}
        -:  681:
        -:  682:
    #####:  683:int cardEffect_GreatHall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer) {
        -:  684:    //+1 Card
    #####:  685:    drawCard(currentPlayer, state);
        -:  686:    
        -:  687:    //+1 Actions
    #####:  688:    state->numActions++;
        -:  689:    
    #####:  690:    return 0;
        -:  691:}
        -:  692:
        -:  693:
    #####:  694:int cardEffect_Village(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer) {
        -:  695:    //+1 Card
    #####:  696:    drawCard(currentPlayer, state);
        -:  697:    
        -:  698:    //+2 Actions
    #####:  699:    state->numActions = state->numActions + 1;
        -:  700:    
        -:  701:    //discard played card from hand
    #####:  702:    discardCard(handPos, currentPlayer, state, 0);
    #####:  703:    return 0;
        -:  704:}
        -:  705:
        -:  706:
    #####:  707:int cardEffect_Salvager(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer) {
        -:  708:    //+1 buy
    #####:  709:    state->numBuys++;
        -:  710:    
    #####:  711:    if (choice2)
        -:  712:    {
        -:  713:        //gain coins equal to trashed card
    #####:  714:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  715:        //trash card
    #####:  716:        discardCard(choice1, currentPlayer, state, 1);
        -:  717:    }
        -:  718:    
        -:  719:    //discard card
    #####:  720:    discardCard(handPos, currentPlayer, state, 0);
    #####:  721:    return 0;
        -:  722:}
        -:  723:
        -:  724:
        -:  725:
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  int drawntreasure=0;
        -:  739:  int cardDrawn;
    #####:  740:  int z = 0;// this is the counter for the temp hand
    #####:  741:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  742:    nextPlayer = 0;
        -:  743:  }
        -:  744:  
        -:  745:	
        -:  746:  //uses switch to select card and perform actions
    #####:  747:  switch( card ) 
        -:  748:    {
        -:  749:    case adventurer:
    #####:  750:        cardEffect_Adventurer(card, choice1, choice2, choice3, state, handPos, bonus, drawntreasure, currentPlayer, cardDrawn, temphand, z);
    #####:  751:        return 0;
        -:  752:			
        -:  753:    case council_room:
        -:  754:      //+4 Cards
    #####:  755:      for (i = 0; i < 4; i++)
        -:  756:	{
    #####:  757:	  drawCard(currentPlayer, state);
        -:  758:	}
        -:  759:			
        -:  760:      //+1 Buy
    #####:  761:      state->numBuys++;
        -:  762:			
        -:  763:      //Each other player draws a card
    #####:  764:      for (i = 0; i < state->numPlayers; i++)
        -:  765:	{
    #####:  766:	  if ( i != currentPlayer )
        -:  767:	    {
    #####:  768:	      drawCard(i, state);
        -:  769:	    }
        -:  770:	}
        -:  771:			
        -:  772:      //put played card in played card pile
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:			
    #####:  775:      return 0;
        -:  776:			
        -:  777:    case feast:
        -:  778:      //gain card with cost up to 5
        -:  779:      //Backup hand
    #####:  780:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  781:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  782:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  783:      }
        -:  784:      //Backup hand
        -:  785:
        -:  786:      //Update Coins for Buy
    #####:  787:      updateCoins(currentPlayer, state, 5);
    #####:  788:      x = 1;//Condition to loop on
    #####:  789:      while( x == 1) {//Buy one card
    #####:  790:	if (supplyCount(choice1, state) <= 0){
        -:  791:	  if (DEBUG)
        -:  792:	    printf("None of that card left, sorry!\n");
        -:  793:
        -:  794:	  if (DEBUG){
        -:  795:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  796:	  }
        -:  797:	}
    #####:  798:	else if (state->coins < getCost(choice1)){
    #####:  799:	  printf("That card is too expensive!\n");
        -:  800:
        -:  801:	  if (DEBUG){
        -:  802:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  803:	  }
        -:  804:	}
        -:  805:	else{
        -:  806:
        -:  807:	  if (DEBUG){
        -:  808:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  809:	  }
        -:  810:
    #####:  811:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  812:	  x = 0;//No more buying cards
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  816:	  }
        -:  817:
        -:  818:	}
        -:  819:      }     
        -:  820:
        -:  821:      //Reset Hand
    #####:  822:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  823:	state->hand[currentPlayer][i] = temphand[i];
    #####:  824:	temphand[i] = -1;
        -:  825:      }
        -:  826:      //Reset Hand
        -:  827:      			
    #####:  828:      return 0;
        -:  829:			
        -:  830:    case gardens:
    #####:  831:      return -1;
        -:  832:			
        -:  833:    case mine:
    #####:  834:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  835:
    #####:  836:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  837:	{
    #####:  838:	  return -1;
        -:  839:	}
        -:  840:		
    #####:  841:      if (choice2 > treasure_map || choice2 < curse)
        -:  842:	{
    #####:  843:	  return -1;
        -:  844:	}
        -:  845:
    #####:  846:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  847:	{
    #####:  848:	  return -1;
        -:  849:	}
        -:  850:
    #####:  851:      gainCard(choice2, state, 2, currentPlayer);
        -:  852:
        -:  853:      //discard card from hand
    #####:  854:      discardCard(handPos, currentPlayer, state, 0);
        -:  855:
        -:  856:      //discard trashed card
    #####:  857:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  858:	{
    #####:  859:	  if (state->hand[currentPlayer][i] == j)
        -:  860:	    {
    #####:  861:	      discardCard(i, currentPlayer, state, 0);			
    #####:  862:	      break;
        -:  863:	    }
        -:  864:	}
        -:  865:			
    #####:  866:      return 0;
        -:  867:			
        -:  868:    case remodel:
    #####:  869:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 0, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:
        -:  891:
    #####:  892:      return 0;
        -:  893:		
        -:  894:    case smithy:
    #####:  895:        cardEffect_Smithy(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer, i);
    #####:  896:        return 0;
        -:  897:		
        -:  898:    case village:
    #####:  899:        cardEffect_Village(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
    #####:  900:        return 0;
        -:  901:		
        -:  902:    case baron:
    #####:  903:      state->numBuys++;//Increase buys by 1!
    #####:  904:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  905:	int p = 0;//Iterator for hand!
    #####:  906:	int card_not_discarded = 1;//Flag for discard set!
    #####:  907:	while(card_not_discarded){
    #####:  908:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  909:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  910:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  911:	    state->discardCount[currentPlayer]++;
    #####:  912:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  913:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  914:	    }
    #####:  915:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  916:	    state->handCount[currentPlayer]--;
    #####:  917:	    card_not_discarded = 0;//Exit the loop
        -:  918:	  }
    #####:  919:	  else if (p > state->handCount[currentPlayer]){
        -:  920:	    if(DEBUG) {
        -:  921:	      printf("No estate cards in your hand, invalid choice\n");
        -:  922:	      printf("Must gain an estate if there are any\n");
        -:  923:	    }
    #####:  924:	    if (supplyCount(estate, state) > 0){
    #####:  925:	      gainCard(estate, state, 0, currentPlayer);
    #####:  926:	      state->supplyCount[estate]--;//Decrement estates
    #####:  927:	      if (supplyCount(estate, state) == 0){
    #####:  928:		isGameOver(state);
        -:  929:	      }
        -:  930:	    }
    #####:  931:	    card_not_discarded = 0;//Exit the loop
        -:  932:	  }
        -:  933:			    
        -:  934:	  else{
    #####:  935:	    p++;//Next card
        -:  936:	  }
        -:  937:	}
        -:  938:      }
        -:  939:			    
        -:  940:      else{
    #####:  941:	if (supplyCount(estate, state) > 0){
    #####:  942:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  943:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  944:	  if (supplyCount(estate, state) == 0){
    #####:  945:	    isGameOver(state);
        -:  946:	  }
        -:  947:	}
        -:  948:      }
        -:  949:	    
        -:  950:      
    #####:  951:      return 0;
        -:  952:		
        -:  953:    case great_hall:
    #####:  954:        cardEffect_GreatHall(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
    #####:  955:        return 0;
        -:  956:		
        -:  957:    case minion:
        -:  958:      //+1 action
    #####:  959:      state->numActions++;
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:			
    #####:  964:      if (choice1)		//+2 coins
        -:  965:	{
    #####:  966:	  state->coins = state->coins + 2;
        -:  967:	}
        -:  968:			
    #####:  969:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  970:	{
        -:  971:	  //discard hand
    #####:  972:	  while(numHandCards(state) > 0)
        -:  973:	    {
    #####:  974:	      discardCard(handPos, currentPlayer, state, 0);
        -:  975:	    }
        -:  976:				
        -:  977:	  //draw 4
    #####:  978:	  for (i = 0; i < 4; i++)
        -:  979:	    {
    #####:  980:	      drawCard(currentPlayer, state);
        -:  981:	    }
        -:  982:				
        -:  983:	  //other players discard hand and redraw if hand size > 4
    #####:  984:	  for (i = 0; i < state->numPlayers; i++)
        -:  985:	    {
    #####:  986:	      if (i != currentPlayer)
        -:  987:		{
    #####:  988:		  if ( state->handCount[i] > 4 )
        -:  989:		    {
        -:  990:		      //discard hand
    #####:  991:		      while( state->handCount[i] > 0 )
        -:  992:			{
    #####:  993:			  discardCard(handPos, i, state, 0);
        -:  994:			}
        -:  995:							
        -:  996:		      //draw 4
    #####:  997:		      for (j = 0; j < 4; j++)
        -:  998:			{
    #####:  999:			  drawCard(i, state);
        -: 1000:			}
        -: 1001:		    }
        -: 1002:		}
        -: 1003:	    }
        -: 1004:				
        -: 1005:	}
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case steward:
    #####: 1009:      if (choice1 == 1)
        -: 1010:	{
        -: 1011:	  //+2 cards
    #####: 1012:	  drawCard(currentPlayer, state);
    #####: 1013:	  drawCard(currentPlayer, state);
        -: 1014:	}
    #####: 1015:      else if (choice1 == 2)
        -: 1016:	{
        -: 1017:	  //+2 coins
    #####: 1018:	  state->coins = state->coins + 2;
        -: 1019:	}
        -: 1020:      else
        -: 1021:	{
        -: 1022:	  //trash 2 cards in hand
    #####: 1023:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1024:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1025:	}
        -: 1026:			
        -: 1027:      //discard card from hand
    #####: 1028:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:    case tribute:
    #####: 1032:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1033:	if (state->deckCount[nextPlayer] > 0){
    #####: 1034:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	  state->deckCount[nextPlayer]--;
        -: 1036:	}
    #####: 1037:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1038:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1039:	  state->discardCount[nextPlayer]--;
        -: 1040:	}
        -: 1041:	else{
        -: 1042:	  //No Card to Reveal
        -: 1043:	  if (DEBUG){
        -: 1044:	    printf("No cards to reveal\n");
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:	    
        -: 1049:      else{
    #####: 1050:	if (state->deckCount[nextPlayer] == 0){
    #####: 1051:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1052:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1053:	    state->deckCount[nextPlayer]++;
    #####: 1054:	    state->discard[nextPlayer][i] = -1;
    #####: 1055:	    state->discardCount[nextPlayer]--;
        -: 1056:	  }
        -: 1057:			    
    #####: 1058:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1059:	} 
    #####: 1060:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
    #####: 1063:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
        -: 1066:      }    
        -: 1067:		       
    #####: 1068:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1069:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1070:	state->playedCardCount++;
    #####: 1071:	tributeRevealedCards[1] = -1;
        -: 1072:      }
        -: 1073:
    #####: 1074:      for (i = 0; i <= 2; i ++){
    #####: 1075:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1076:	  state->coins += 2;
        -: 1077:	}
        -: 1078:		    
    #####: 1079:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1080:	  drawCard(currentPlayer, state);
    #####: 1081:	  drawCard(currentPlayer, state);
        -: 1082:	}
        -: 1083:	else{//Action Card
    #####: 1084:	  state->numActions = state->numActions + 2;
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case ambassador:
    #####: 1091:      j = 0;		//used to check if player has enough cards to discard
        -: 1092:
    #####: 1093:      if (choice2 > 2 || choice2 < 0)
        -: 1094:	{
    #####: 1095:	  return -1;				
        -: 1096:	}
        -: 1097:
    #####: 1098:      if (choice1 == handPos)
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1104:	{
    #####: 1105:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1106:	    {
    #####: 1107:	      j++;
        -: 1108:	    }
        -: 1109:	}
    #####: 1110:      if (j < choice2)
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
        -: 1115:      if (DEBUG) 
        -: 1116:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1117:
        -: 1118:      //increase supply count for choosen card by amount being discarded
    #####: 1119:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1120:			
        -: 1121:      //each other player gains a copy of revealed card
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
        -: 1125:	    {
    #####: 1126:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1127:	    }
        -: 1128:	}
        -: 1129:
        -: 1130:      //discard played card from hand
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1132:
        -: 1133:      //trash copies of cards returned to supply
    #####: 1134:      for (j = 0; j < choice2; j++)
        -: 1135:	{
    #####: 1136:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1137:	    {
    #####: 1138:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1139:		{
    #####: 1140:		  discardCard(i, currentPlayer, state, 1);
    #####: 1141:		  break;
        -: 1142:		}
        -: 1143:	    }
        -: 1144:	}			
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case cutpurse:
        -: 1149:
    #####: 1150:      updateCoins(currentPlayer, state, 2);
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1156:		{
    #####: 1157:		  if (state->hand[i][j] == copper)
        -: 1158:		    {
    #####: 1159:		      discardCard(j, i, state, 0);
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		  if (j == state->handCount[i])
        -: 1163:		    {
    #####: 1164:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1168:			}	
    #####: 1169:		      break;
        -: 1170:		    }		
        -: 1171:		}
        -: 1172:					
        -: 1173:	    }
        -: 1174:				
        -: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1179:
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
    #####: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
    #####: 1209:            cardEffect_Salvager(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
    #####: 1210:            return 0;
        -: 1211:		
        -: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
    #####: 1214:	if (i != currentPlayer){
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
        -: 1292:}
        -: 1293:
    #####: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1299:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1300:    {
    #####: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
    #####: 1309:  if (toFlag == 1)
        -: 1310:    {
    #####: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:      state->deckCount[player]++;
        -: 1313:    }
    #####: 1314:  else if (toFlag == 2)
        -: 1315:    {
    #####: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
    #####: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
    #####: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
    #####: 1328:  return 0;
        -: 1329:}
        -: 1330:
     1501: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
     1501: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
     9006: 1339:  for (i = 0; i < state->handCount[player]; i++)
        -: 1340:    {
     7505: 1341:      if (state->hand[player][i] == copper)
        -: 1342:	{
     5287: 1343:	  state->coins += 1;
        -: 1344:	}
     2218: 1345:      else if (state->hand[player][i] == silver)
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
     2218: 1349:      else if (state->hand[player][i] == gold)
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1501: 1356:  state->coins += bonus;
        -: 1357:
     1501: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
