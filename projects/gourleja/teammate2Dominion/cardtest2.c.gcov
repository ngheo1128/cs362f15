        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - cardtest2.c
        -:    6: * Description : Unit tests for Adventurer card
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define CARDNAME  "adventurer"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the adventurer card
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testCard(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        1:   28:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   29:
        1:   30:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   31:    printf ("-------------------------------------------------------------------------------\n");
        1:   32:    printf ("Testing Method  : %s()\n", currentTest);
        1:   33:    printf ("Seed            : %i\n", seed);
        -:   34:
        -:   35:    //Check increase of cards in hand
        -:   36:
        -:   37:
        1:   38:    int currentPlayer = whoseTurn(state);
        1:   39:    int drawntreasure=0;
        1:   40:    int handPos = 0;
        -:   41:    int temphand[MAX_HAND];// moved above the if statement
        1:   42:    int z = 0;// this is the counter for the temp hand
        -:   43:    int cardDrawn;
        -:   44:
        -:   45:    //Check reduction of cards in hand
        1:   46:    expectedValue = state->handCount[currentPlayer] - 1;
        1:   47:    cardEffect_Adventurer(adventurer, 0, 0, 0, state, handPos, 0, drawntreasure, currentPlayer, cardDrawn, temphand, z);
        1:   48:    if(state->handCount[currentPlayer] < expectedValue) {
    #####:   49:        printf("  TEST FAIL    : Adventurer remove card from hand failed\n");
    #####:   50:        testsFailed++;
        1:   51:    } else {testsPassed++;}
        -:   52:
        -:   53:    //Check addition of cards to hand
        -:   54:
        1:   55:    initializeGame(2, k, seed, state);
        1:   56:    expectedValue = state->handCount[currentPlayer];
        1:   57:    cardEffect_Adventurer(adventurer, 0, 0, 0, state, handPos, 0, drawntreasure, currentPlayer, cardDrawn, temphand, z);
        1:   58:    if(state->handCount[currentPlayer] - expectedValue > 1) {
        1:   59:        printf("  TEST FAIL    : Adventurer add correct number of cards to hand failed\n");
        1:   60:        testsFailed++;
    #####:   61:    } else {testsPassed++;}
        -:   62:
        -:   63:    //Check hand size with lack of treasure cards to add to hand
        1:   64:    initializeGame(2, k, seed, state);
        1:   65:    int card = 0;
        6:   66:    for (i = 0; i < state->deckCount[currentPlayer]; i++)
        -:   67:    {
        5:   68:      state->deck[currentPlayer][i] = card;
        -:   69:    }
        1:   70:    for (i = 0; i < state->discardCount[currentPlayer]; i++)
        -:   71:    {
    #####:   72:      state->discard[currentPlayer][i] = card;
        -:   73:    }
        1:   74:    state->deckCount[currentPlayer] = 10;
        1:   75:    expectedValue = state->handCount[currentPlayer] - 1;
        1:   76:    cardEffect_Adventurer(adventurer, 0, 0, 0, state, handPos, 0, drawntreasure, currentPlayer, cardDrawn, temphand, z);
        -:   77:
        1:   78:    if(state->handCount[currentPlayer] != expectedValue) {
        1:   79:        printf("  TEST FAIL    : Adventurer no treasure available but cards to hand failed\n");
        1:   80:        testsFailed++;
    #####:   81:    } else {testsPassed++;}
        -:   82:
        1:   83:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   84:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:   85:    printf ("-------------------------------------------------------------------------------\n\n");
        -:   86:
        1:   87:    return 0;
        -:   88:}
        -:   89:
        -:   90:
        -:   91:/*
        -:   92: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:   93: * Postconditions:  Exit the test program normally
        -:   94: */
        1:   95:int main (int argc, char** argv)
        -:   96:{
        -:   97:
        -:   98:    // Setup Game Seed
        -:   99:    int seed;
        1:  100:    char* currentTest = CARDNAME;
        1:  101:    if(argv[1]) {
    #####:  102:        seed = atoi(argv[1]);
        -:  103:    } else {
        1:  104:        seed = BASESEED;
        -:  105:    }
        -:  106:
        -:  107:    // Initialize Game State
        -:  108:    struct gameState G;
        1:  109:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:  110:    initializeGame(2, k, seed, &G);
        -:  111:
        1:  112:    testCard(currentTest,seed, &G);
        -:  113:
        1:  114:    return 0;
        -:  115:}
