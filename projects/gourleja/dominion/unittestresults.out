

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : isGameOver()
Seed            : 10
    Tests Passed    : 3
    Tests Failed    : 0
-------------------------------------------------------------------------------

File 'unittest1.c'
Lines executed:82.50% of 40
unittest1.c:creating 'unittest1.c.gcov'



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : buyCard()
Seed            : 10
    Tests Passed    : 6
    Tests Failed    : 0
-------------------------------------------------------------------------------

File 'unittest2.c'
Lines executed:81.43% of 70
unittest2.c:creating 'unittest2.c.gcov'



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : playCard()
Seed            : 10
  TEST FAIL    : Coin increment check failed
    Tests Passed    : 4
    Tests Failed    : 1
-------------------------------------------------------------------------------

File 'unittest3.c'
Lines executed:84.13% of 63
unittest3.c:creating 'unittest3.c.gcov'



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : endTurn()
Seed            : 10
    Tests Passed    : 8
    Tests Failed    : 0
-------------------------------------------------------------------------------

File 'unittest4.c'
Lines executed:76.71% of 73
unittest4.c:creating 'unittest4.c.gcov'



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : smithy()
Seed            : 10
  TEST FAIL    : Smithy card added correct number of cards failed
    Tests Passed    : 0
    Tests Failed    : 1
-------------------------------------------------------------------------------

File 'cardtest1.c'
Lines executed:92.59% of 27
cardtest1.c:creating 'cardtest1.c.gcov'



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : adventurer()
Seed            : 10
  TEST FAIL    : Adventurer no treasure available but cards to hand failed
    Tests Passed    : 2
    Tests Failed    : 1
-------------------------------------------------------------------------------

File 'cardtest2.c'
Lines executed:87.50% of 48
cardtest2.c:creating 'cardtest2.c.gcov'



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : great_hall()
Seed            : 10
    Tests Passed    : 2
    Tests Failed    : 0
-------------------------------------------------------------------------------

File 'cardtest3.c'
Lines executed:85.29% of 34
cardtest3.c:creating 'cardtest3.c.gcov'



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Testing Method  : minion()
Seed            : 10
    Tests Passed    : 5
    Tests Failed    : 0
-------------------------------------------------------------------------------

File 'cardtest4.c'
Lines executed:78.95% of 57
cardtest4.c:creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:43.24% of 562
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - unittest1.c
        -:    6: * Description : Unit tests for isGameOver method
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define METHODNAME  "isGameOver"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the isGameOver method
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testMethod(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        -:   28:
        1:   29:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   30:    printf ("-------------------------------------------------------------------------------\n");
        1:   31:    printf ("Testing Method  : %s()\n", currentTest);
        1:   32:    printf ("Seed            : %i\n", seed);
        -:   33:
        -:   34:    //check new game produces the correct value
        1:   35:    expectedValue = 1;
        1:   36:    if(isGameOver(state) == expectedValue) {
    #####:   37:        printf("  TEST FAIL    : Newly initialized game failed\n");
    #####:   38:        testsFailed++;
        1:   39:    } else {testsPassed++;}
        -:   40:
        -:   41:    //check a lack of province cards produces the correct value
        1:   42:    expectedValue = 0;
        1:   43:    state->supplyCount[province] = 0;
        1:   44:    if(isGameOver(state) == expectedValue) {
    #####:   45:        printf("  TEST FAIL    : Province supply out check failed\n");
    #####:   46:        testsFailed++;
        1:   47:    } else {testsPassed++;}
        -:   48:
        -:   49:    //check that when 3 supply piles are empty produces the correct value
        1:   50:    expectedValue = 0;
        1:   51:    state->supplyCount[province] = 1;
        4:   52:    for(i=0; i<3; i++){
        3:   53:        state->supplyCount[i] = 0;
        -:   54:    }
        1:   55:    if(isGameOver(state) == expectedValue) {
    #####:   56:        printf("  TEST FAIL    : 3 card supply out check failed\n");
    #####:   57:        testsFailed++;
        1:   58:    } else {testsPassed++;}
        -:   59:
        1:   60:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   61:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:   62:    printf ("-------------------------------------------------------------------------------\n\n");
        -:   63:
        1:   64:    return 0;
        -:   65:}
        -:   66:
        -:   67:
        -:   68:/*
        -:   69: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:   70: * Postconditions:  Exit the test program normally
        -:   71: */
        1:   72:int main (int argc, char** argv)
        -:   73:{
        -:   74:
        -:   75:    // Setup Game Seed
        -:   76:    int seed;
        1:   77:    char* currentTest = METHODNAME;
        1:   78:    if(argv[1]) {
    #####:   79:        seed = atoi(argv[1]);
        -:   80:    } else {
        1:   81:        seed = BASESEED;
        -:   82:    }
        -:   83:
        -:   84:    // Initialize Game State
        -:   85:    struct gameState G;
        1:   86:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   87:    initializeGame(2, k, seed, &G);
        -:   88:
        1:   89:    testMethod(currentTest,seed, &G);
        1:   90:    return 0;
        -:   91:}
        -:   92:
        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - unittest2.c
        -:    6: * Description : Unit tests for buyCard method
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define METHODNAME  "buyCard"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the buyCard method
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testMethod(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        1:   28:    int expectedState = 0;
        -:   29:
        1:   30:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   31:    printf ("-------------------------------------------------------------------------------\n");
        1:   32:    printf ("Testing Method  : %s()\n", currentTest);
        1:   33:    printf ("Seed            : %i\n", seed);
        -:   34:
       26:   35:    for(i=0; i<25; i++){
       25:   36:        state->supplyCount[i] = 1;
        -:   37:    }
        -:   38:
        1:   39:    int supplyPos = 1;
        -:   40:
        -:   41:    //check lack of buys produces the correct error
        1:   42:    expectedValue = -1;
        1:   43:    state->numBuys = 0;
        1:   44:    if(buyCard(supplyPos,state) != expectedValue) {
    #####:   45:        printf("  TEST FAIL    : No buys left check failed\n");
    #####:   46:        testsFailed++;
        1:   47:    } else {testsPassed++;}
        -:   48:
        -:   49:    //check lack of cards
        1:   50:    state->numBuys = 1;
        1:   51:    state->supplyCount[supplyPos] = 0;
        1:   52:    if(buyCard(supplyPos,state) != expectedValue) {
    #####:   53:        printf("  TEST FAIL    : No cards left check failed\n");
    #####:   54:        testsFailed++;
        1:   55:    } else {testsPassed++;}
        1:   56:    state->supplyCount[supplyPos] = 1;
        -:   57:
        -:   58:    //check lack of coins produces the correct error
        1:   59:    state->numBuys = 1;
        1:   60:    state->coins = 0;
        1:   61:    supplyPos = 1;
        1:   62:    if(buyCard(supplyPos,state) != expectedValue) {
    #####:   63:        printf("  TEST FAIL    : No coins left check failed\n");
    #####:   64:        testsFailed++;
        1:   65:    } else {testsPassed++;}
        -:   66:
        -:   67:    //check coin value is correct after call
        1:   68:    state->numBuys = 1;
        1:   69:    state->coins = 5;
        1:   70:    expectedValue = 0;
        1:   71:    if(buyCard(supplyPos,state) != expectedValue || state->coins != 3) {
    #####:   72:        printf("  TEST FAIL    : coins value check failed\n");
    #####:   73:        testsFailed++;
        1:   74:    } else {testsPassed++;}
        -:   75:
        -:   76:    //check numbuys value is correct after call
        1:   77:    state->numBuys = 1;
        1:   78:    state->coins = 5;
        1:   79:    state->supplyCount[1] = 1;
        1:   80:    expectedState = 0;
        1:   81:    int buyCardTest = buyCard(supplyPos,state);
        1:   82:    if(buyCardTest != expectedValue || state->numBuys != expectedState) {
    #####:   83:        printf("  TEST FAIL    : numBuys value check failed, %i, %i\n", buyCardTest, state->numBuys);
    #####:   84:        testsFailed++;
        1:   85:    } else {testsPassed++;}
        -:   86:
        -:   87:    // Check card taken has supply reduced
        1:   88:    state->numBuys = 1;
        1:   89:    state->coins = 5;
        1:   90:    state->supplyCount[1] = 1;
        1:   91:    expectedValue = state->supplyCount[supplyPos] - 1;
        1:   92:    int testBuy = buyCard(supplyPos,state);
        1:   93:    if(state->supplyCount[supplyPos] != expectedValue) {
    #####:   94:        printf("  TEST FAIL    : Card supply value reduced correctly check failed\n");
    #####:   95:        testsFailed++;
        1:   96:    } else {testsPassed++;}
        -:   97:
        1:   98:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   99:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:  100:    printf ("-------------------------------------------------------------------------------\n\n");
        -:  101:
        1:  102:    return 0;
        -:  103:}
        -:  104:
        -:  105:
        -:  106:/*
        -:  107: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:  108: * Postconditions:  Exit the test program normally
        -:  109: */
        1:  110:int main (int argc, char** argv)
        -:  111:{
        -:  112:
        -:  113:    // Setup Game Seed
        -:  114:    int seed;
        1:  115:    char* currentTest = METHODNAME;
        1:  116:    if(argv[1]) {
    #####:  117:        seed = atoi(argv[1]);
        -:  118:    } else {
        1:  119:        seed = BASESEED;
        -:  120:    }
        -:  121:
        -:  122:    // Initialize Game State
        -:  123:    struct gameState G;
        1:  124:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:  125:    initializeGame(2, k, seed, &G);
        -:  126:
        1:  127:    testMethod(currentTest,seed, &G);
        1:  128:    return 0;
        -:  129:}
        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - unittest3.c
        -:    6: * Description : Unit tests for playCard method
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define METHODNAME  "playCard"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the playCard method
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testMethod(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        1:   28:    int expectedState = 0;
        1:   29:    int actualValue = 0;
        1:   30:    int actualState = 0;
        -:   31:
        1:   32:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   33:    printf ("-------------------------------------------------------------------------------\n");
        1:   34:    printf ("Testing Method  : %s()\n", currentTest);
        1:   35:    printf ("Seed            : %i\n", seed);
        -:   36:
        1:   37:    int supplyPos = 1;
        -:   38:
        -:   39:    //check incorrect phase produces the correct error value
        1:   40:    expectedValue = -1;
        1:   41:    state->phase = 0;
        1:   42:    actualValue = playCard(0, -1, -1, -1, state);
        1:   43:    if(actualValue != expectedValue) {
    #####:   44:        printf("  TEST FAIL    : Phase check failed\n");
    #####:   45:        testsFailed++;
        1:   46:    } else {testsPassed++;}
        -:   47:
        -:   48:    //check incorrect phase produces the correct error value
        1:   49:    expectedValue = -1;
        1:   50:    state->numActions = 0;
        1:   51:    actualValue = playCard(0, -1, -1, -1, state);
        1:   52:    if(actualValue != expectedValue) {
    #####:   53:        printf("  TEST FAIL    : Phase check failed\n");
    #####:   54:        testsFailed++;
        1:   55:    } else {testsPassed++;}
        -:   56:
        -:   57:    //check incorrect card type produces the correct error value
        1:   58:    expectedValue = -1;
        1:   59:    state->numActions = 1;
        1:   60:    state->hand[whoseTurn(state)][0] = 0;
        1:   61:    actualValue = playCard(0, -1, -1, -1, state);
        1:   62:    if(actualValue != expectedValue) {
    #####:   63:        printf("  TEST FAIL    : Action card check failed\n");
    #####:   64:        testsFailed++;
        1:   65:    } else {testsPassed++;}
        -:   66:
        -:   67:    //check for correct action decrement value
        1:   68:    expectedValue = 0;
        1:   69:    state->numActions = 1;
        1:   70:    state->hand[whoseTurn(state)][0] = 7;
        1:   71:    actualValue = playCard(0, -1, -1, -1, state);
        1:   72:    if(actualValue != expectedValue) {
    #####:   73:        printf("  TEST FAIL    : Actions decrement check failed\n");
    #####:   74:        testsFailed++;
        1:   75:    } else {testsPassed++;}
        -:   76:
        -:   77:    //check for correct coin increment value
        1:   78:    expectedValue = state->coins + 2;
        1:   79:    state->numActions = 2;
        1:   80:    state->hand[whoseTurn(state)][0] = 17;
        1:   81:    actualValue = playCard(0, 1, -1, -1, state);
        1:   82:    if(state->coins != expectedValue) {
        1:   83:        printf("  TEST FAIL    : Coin increment check failed\n");
        1:   84:        testsFailed++;
    #####:   85:    } else {testsPassed++;}
        -:   86:
        1:   87:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   88:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:   89:    printf ("-------------------------------------------------------------------------------\n\n");
        -:   90:
        1:   91:    return 0;
        -:   92:}
        -:   93:
        -:   94:
        -:   95:/*
        -:   96: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:   97: * Postconditions:  Exit the test program normally
        -:   98: */
        1:   99:int main (int argc, char** argv)
        -:  100:{
        -:  101:
        -:  102:    // Setup Game Seed
        -:  103:    int seed;
        1:  104:    char* currentTest = METHODNAME;
        1:  105:    if(argv[1]) {
    #####:  106:        seed = atoi(argv[1]);
        -:  107:    } else {
        1:  108:        seed = BASESEED;
        -:  109:    }
        -:  110:
        -:  111:    // Initialize Game State
        -:  112:    struct gameState G;
        1:  113:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:  114:    initializeGame(2, k, seed, &G);
        -:  115:
        1:  116:    testMethod(currentTest,seed, &G);
        1:  117:    return 0;
        -:  118:}
        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - unittest4.c
        -:    6: * Description : Unit tests for endTurn method
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define METHODNAME  "endTurn"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the endTurn method
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testMethod(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        1:   28:    int expectedState = 0;
        -:   29:
        1:   30:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   31:    printf ("-------------------------------------------------------------------------------\n");
        1:   32:    printf ("Testing Method  : %s()\n", currentTest);
        1:   33:    printf ("Seed            : %i\n", seed);
        -:   34:
        -:   35:    //check that the current players hand count is reset after method call
        1:   36:    expectedValue = 0;
        1:   37:    state->whoseTurn = 0;
        1:   38:    endTurn(state);
        1:   39:    if(state->handCount[0] != expectedValue) {
    #####:   40:        printf("TEST FAIL    : Current player hand count reset failed\n");
    #####:   41:        testsFailed++;
        1:   42:    } else {testsPassed++;}
        -:   43:
        -:   44:    //check that the outposts played is reset after method call
        1:   45:    expectedValue = 0;
        1:   46:    endTurn(state);
        1:   47:    if(state->outpostPlayed != expectedValue) {
    #####:   48:        printf("TEST FAIL    : Outpost's Played reset failed\n");
    #####:   49:        testsFailed++;
        1:   50:    } else {testsPassed++;}
        -:   51:
        -:   52:    //check that the phase value is reset after method call
        1:   53:    expectedValue = 0;
        1:   54:    endTurn(state);
        1:   55:    if(state->phase != expectedValue) {
    #####:   56:        printf("TEST FAIL    : Phase reset failed\n");
    #####:   57:        testsFailed++;
        1:   58:    } else {testsPassed++;}
        -:   59:
        -:   60:    //check that the number of actions is reset after method call
        1:   61:    expectedValue = 1;
        1:   62:    endTurn(state);
        1:   63:    if(state->numActions != expectedValue) {
    #####:   64:        printf("TEST FAIL    : Number of Actions reset failed\n");
    #####:   65:        testsFailed++;
        1:   66:    } else {testsPassed++;}
        -:   67:
        -:   68:    //check that the number of buys available is reset after method call
        1:   69:    expectedValue = 1;
        1:   70:    endTurn(state);
        1:   71:    if(state->numBuys != expectedValue) {
    #####:   72:        printf("TEST FAIL    : Number of Buys value reset failed\n");
    #####:   73:        testsFailed++;
        1:   74:    } else {testsPassed++;}
        -:   75:
        -:   76:    //check that the current players card count is reset after method call
        1:   77:    expectedValue = 0;
        1:   78:    endTurn(state);
        1:   79:    if(state->playedCardCount != expectedValue) {
    #####:   80:        printf("TEST FAIL    : Played card count value reset failed\n");
    #####:   81:        testsFailed++;
        1:   82:    } else {testsPassed++;}
        -:   83:
        -:   84:    //check that the next player is correctly given control after method call, using first player
        1:   85:    state->whoseTurn = 0;
        1:   86:    expectedValue = 1;
        1:   87:    endTurn(state);
        1:   88:    if(state->whoseTurn != expectedValue) {
    #####:   89:        printf("TEST FAIL    : Next player value reset failed\n");
    #####:   90:        testsFailed++;
        1:   91:    } else {testsPassed++;}
        -:   92:
        -:   93:    //check that the next player is correctly given control after method call, using last player
        1:   94:    state->whoseTurn = 1;
        1:   95:    expectedValue = 0;
        1:   96:    endTurn(state);
        1:   97:    if(state->whoseTurn != expectedValue) {
    #####:   98:        printf("TEST FAIL    : Next player value reset failed\n");
    #####:   99:        testsFailed++;
        1:  100:    } else {testsPassed++;}
        -:  101:
        1:  102:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:  103:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:  104:    printf ("-------------------------------------------------------------------------------\n\n");
        -:  105:
        1:  106:    return 0;
        -:  107:}
        -:  108:
        -:  109:
        -:  110:/*
        -:  111: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:  112: * Postconditions:  Exit the test program normally
        -:  113: */
        1:  114:int main (int argc, char** argv)
        -:  115:{
        -:  116:
        -:  117:    // Setup Game Seed
        -:  118:    int seed;
        1:  119:    char* currentTest = METHODNAME;
        1:  120:    if(argv[1]) {
    #####:  121:        seed = atoi(argv[1]);
        -:  122:    } else {
        1:  123:        seed = BASESEED;
        -:  124:    }
        -:  125:
        -:  126:    // Initialize Game State
        -:  127:    struct gameState G;
        1:  128:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:  129:    initializeGame(2, k, seed, &G);
        -:  130:
        1:  131:    testMethod(currentTest,seed, &G);
        1:  132:    return 0;
        -:  133:}
        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - cardtest1.c
        -:    6: * Description : Unit tests for smithy card
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define CARDNAME  "smithy"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the smithy card
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testCard(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        -:   28:
        1:   29:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   30:    printf ("-------------------------------------------------------------------------------\n");
        1:   31:    printf ("Testing Method  : %s()\n", currentTest);
        1:   32:    printf ("Seed            : %i\n", seed);
        -:   33:
        -:   34:    //Check increase of cards in hand
        1:   35:    expectedValue = state->handCount[state->whoseTurn] + 2;
        1:   36:    cardSmithy(1,0,state);
        1:   37:    if(state->handCount[state->whoseTurn] != expectedValue) {
        1:   38:        printf("  TEST FAIL    : Smithy card added correct number of cards failed\n");
        1:   39:        testsFailed++;
    #####:   40:    } else {testsPassed++;}
        -:   41:
        1:   42:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   43:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:   44:    printf ("-------------------------------------------------------------------------------\n\n");
        -:   45:
        1:   46:    return 0;
        -:   47:}
        -:   48:
        -:   49:
        -:   50:/*
        -:   51: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:   52: * Postconditions:  Exit the test program normally
        -:   53: */
        1:   54:int main (int argc, char** argv)
        -:   55:{
        -:   56:
        -:   57:    // Setup Game Seed
        -:   58:    int seed;
        1:   59:    char* currentTest = CARDNAME;
        1:   60:    if(argv[1]) {
    #####:   61:        seed = atoi(argv[1]);
        -:   62:    } else {
        1:   63:        seed = BASESEED;
        -:   64:    }
        -:   65:
        -:   66:    // Initialize Game State
        -:   67:    struct gameState G;
        1:   68:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   69:    initializeGame(2, k, seed, &G);
        -:   70:
        1:   71:    testCard(currentTest,seed, &G);
        -:   72:
        1:   73:    return 0;
        -:   74:}
        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - cardtest2.c
        -:    6: * Description : Unit tests for Adventurer card
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define CARDNAME  "adventurer"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the adventurer card
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testCard(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        -:   28:
        1:   29:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   30:    printf ("-------------------------------------------------------------------------------\n");
        1:   31:    printf ("Testing Method  : %s()\n", currentTest);
        1:   32:    printf ("Seed            : %i\n", seed);
        -:   33:
        -:   34:    //Check increase of cards in hand
        -:   35:
        1:   36:    int currentPlayer = whoseTurn(state);
        1:   37:    int drawntreasure=0;
        1:   38:    int handPos = 0;
        -:   39:    int temphand[MAX_HAND];// moved above the if statement
        1:   40:    int z = 0;// this is the counter for the temp hand
        -:   41:    int cardDrawn;
        -:   42:
        -:   43:    //Check reduction of cards in hand
        1:   44:    expectedValue = state->handCount[currentPlayer] - 1;
        1:   45:    cardAdventurer(temphand, z, cardDrawn, drawntreasure, handPos, currentPlayer, state);
        1:   46:    if(state->handCount[currentPlayer] < expectedValue) {
    #####:   47:        printf("  TEST FAIL    : Adventurer remove card from hand failed\n");
    #####:   48:        testsFailed++;
        1:   49:    } else {testsPassed++;}
        -:   50:
        -:   51:    //Check addition of cards to hand
        1:   52:    expectedValue = state->handCount[currentPlayer];
        1:   53:    cardAdventurer(temphand, z, cardDrawn, drawntreasure, handPos, currentPlayer, state);
        1:   54:    if(state->handCount[currentPlayer] - expectedValue > 1) {
    #####:   55:        printf("  TEST FAIL    : Adventurer add correct number of cards to hand failed\n");
    #####:   56:        testsFailed++;
        1:   57:    } else {testsPassed++;}
        -:   58:
        -:   59:    //Check hand size with lack of treasure cards to add to hand
        1:   60:    state->deckCount[currentPlayer] = 10;
        1:   61:    int card = 0;
      501:   62:    for (i = 0; i < 500; i++)
        -:   63:    {
      500:   64:      state->deck[currentPlayer][i] = card;
      500:   65:      state->discard[currentPlayer][i] = card;
        -:   66:    }
        1:   67:    expectedValue = state->handCount[currentPlayer] - 1;
        1:   68:    cardAdventurer(temphand, z, cardDrawn, drawntreasure, handPos, currentPlayer, state);
        1:   69:    if(state->handCount[currentPlayer] != expectedValue) {
        1:   70:        printf("  TEST FAIL    : Adventurer no treasure available but cards to hand failed\n");
        1:   71:        testsFailed++;
    #####:   72:    } else {testsPassed++;}
        -:   73:
        1:   74:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   75:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:   76:    printf ("-------------------------------------------------------------------------------\n\n");
        -:   77:
        1:   78:    return 0;
        -:   79:}
        -:   80:
        -:   81:
        -:   82:/*
        -:   83: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:   84: * Postconditions:  Exit the test program normally
        -:   85: */
        1:   86:int main (int argc, char** argv)
        -:   87:{
        -:   88:
        -:   89:    // Setup Game Seed
        -:   90:    int seed;
        1:   91:    char* currentTest = CARDNAME;
        1:   92:    if(argv[1]) {
    #####:   93:        seed = atoi(argv[1]);
        -:   94:    } else {
        1:   95:        seed = BASESEED;
        -:   96:    }
        -:   97:
        -:   98:    // Initialize Game State
        -:   99:    struct gameState G;
        1:  100:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:  101:    initializeGame(2, k, seed, &G);
        -:  102:
        1:  103:    testCard(currentTest,seed, &G);
        -:  104:
        1:  105:    return 0;
        -:  106:}
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - cardtest3.c
        -:    6: * Description : Unit tests for great_hall card
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define CARDNAME  "great_hall"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the great_hall card
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testCard(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        1:   28:    int bonus = 0;
        -:   29:
        1:   30:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   31:    printf ("-------------------------------------------------------------------------------\n");
        1:   32:    printf ("Testing Method  : %s()\n", currentTest);
        1:   33:    printf ("Seed            : %i\n", seed);
        -:   34:
        -:   35:    //Check increase of cards in hand
        1:   36:    expectedValue = state->handCount[state->whoseTurn];
        1:   37:    cardEffect(great_hall,0,0,0,state, 0, &bonus);
        1:   38:    if(state->handCount[state->whoseTurn] != expectedValue) {
    #####:   39:        printf("  TEST FAIL    : great_hall card add card to hand failed\n");
    #####:   40:        testsFailed++;
        1:   41:    } else {testsPassed++;}
        -:   42:
        -:   43:    //Check increase of cards in hand
        1:   44:    expectedValue = state->numActions + 1;
        1:   45:    cardEffect(great_hall,0,0,0,state, 0, &bonus);
        1:   46:    if(state->numActions != expectedValue) {
    #####:   47:        printf("  TEST FAIL    : great_hall card add number of actions failed\n");
    #####:   48:        testsFailed++;
        1:   49:    } else {testsPassed++;}
        -:   50:
        1:   51:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   52:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:   53:    printf ("-------------------------------------------------------------------------------\n\n");
        -:   54:
        1:   55:    return 0;
        -:   56:}
        -:   57:
        -:   58:
        -:   59:/*
        -:   60: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:   61: * Postconditions:  Exit the test program normally
        -:   62: */
        1:   63:int main (int argc, char** argv)
        -:   64:{
        -:   65:
        -:   66:    // Setup Game Seed
        -:   67:    int seed;
        1:   68:    char* currentTest = CARDNAME;
        1:   69:    if(argv[1]) {
    #####:   70:        seed = atoi(argv[1]);
        -:   71:    } else {
        1:   72:        seed = BASESEED;
        -:   73:    }
        -:   74:
        -:   75:    // Initialize Game State
        -:   76:    struct gameState G;
        1:   77:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   78:    initializeGame(2, k, seed, &G);
        -:   79:
        1:   80:    testCard(currentTest,seed, &G);
        -:   81:
        1:   82:    return 0;
        -:   83:}
        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Jason Gourley
        -:    3: * gourleja@oregonstate.edu
        -:    4: * CS362-400
        -:    5: * Assignment 3 - cardtest4.c
        -:    6: * Description : Unit tests for minion card
        -:    7: */
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define CARDNAME  "minion"
        -:   15:#define BASESEED    10
        -:   16:
        -:   17:/*
        -:   18: * Description:     Test the return values of the minion card
        -:   19: * Preconditions:   The games state has been initialized, the seed and method name to test are passed
        -:   20: * Postconditions:  The general messages and any failed test messages are displayed
        -:   21: */
        1:   22:int testCard(char* currentTest, int seed, struct gameState *state)
        -:   23:{
        -:   24:    int i;
        1:   25:    int testsPassed = 0;
        1:   26:    int testsFailed = 0;
        1:   27:    int expectedValue = 0;
        1:   28:    int bonus = 0;
        -:   29:
        1:   30:    printf ("\n\n-------------------------------------------------------------------------------\n");
        1:   31:    printf ("-------------------------------------------------------------------------------\n");
        1:   32:    printf ("Testing Method  : %s()\n", currentTest);
        1:   33:    printf ("Seed            : %i\n", seed);
        -:   34:
        -:   35:    //Check increase of cards in hand
        1:   36:    expectedValue = state->numActions + 1;
        1:   37:    cardEffect(minion,0,0,0,state, 0, &bonus);
        1:   38:    if(state->numActions != expectedValue) {
    #####:   39:        printf("  TEST FAIL    : minion card add action failed\n");
    #####:   40:        testsFailed++;
        1:   41:    } else {testsPassed++;}
        -:   42:
        -:   43:    //Check increase of coins for player
        1:   44:    expectedValue = state->coins + 2;
        1:   45:    cardEffect(minion,1,0,0,state, 0, &bonus);
        1:   46:    if(state->coins != expectedValue) {
    #####:   47:        printf("  TEST FAIL    : minion card add coins failed\n");
    #####:   48:        testsFailed++;
        1:   49:    } else {testsPassed++;}
        -:   50:
        -:   51:    //Check size of players hand after call is correct
        1:   52:    expectedValue = 4;
        1:   53:    cardEffect(minion,0,1,0,state, 0, &bonus);
        1:   54:    if(state->handCount[state->whoseTurn] != expectedValue) {
    #####:   55:        printf("  TEST FAIL    : minion redraw hand size failed\n");
    #####:   56:        testsFailed++;
        1:   57:    } else {testsPassed++;}
        -:   58:
        -:   59:    //Check size of opponents hand after call is correct, over 5 in hand
        1:   60:    expectedValue = 4;
        1:   61:    state->whoseTurn = 0;
        1:   62:    state->handCount[1] = 5;
        1:   63:    cardEffect(minion,0,1,0,state, 0, &bonus);
        1:   64:    if(state->handCount[1] != expectedValue) {
    #####:   65:        printf("  TEST FAIL    : minion redraw opponents hand size failed\n");
    #####:   66:        testsFailed++;
        1:   67:    } else {testsPassed++;}
        -:   68:
        -:   69:    //Check size of opponents hand after call is correct, less than 5 in hand
        1:   70:    expectedValue = 4;
        1:   71:    state->whoseTurn = 0;
        1:   72:    state->handCount[1] = 4;
        1:   73:    cardEffect(minion,0,1,0,state, 0, &bonus);
        1:   74:    if(state->handCount[1] != expectedValue) {
    #####:   75:        printf("  TEST FAIL    : minion add cards to opponents hand failed\n");
    #####:   76:        printf("hand count %i\n", state->handCount[1]);
    #####:   77:        testsFailed++;
        1:   78:    } else {testsPassed++;}
        -:   79:
        1:   80:    printf ("    Tests Passed    : %i\n", testsPassed);
        1:   81:    printf ("    Tests Failed    : %i\n", testsFailed);
        1:   82:    printf ("-------------------------------------------------------------------------------\n\n");
        -:   83:
        1:   84:    return 0;
        -:   85:}
        -:   86:
        -:   87:
        -:   88:/*
        -:   89: * Preconditions:   The user can pass a seed value for testing or it defaults to a set value
        -:   90: * Postconditions:  Exit the test program normally
        -:   91: */
        1:   92:int main (int argc, char** argv)
        -:   93:{
        -:   94:
        -:   95:    // Setup Game Seed
        -:   96:    int seed;
        1:   97:    char* currentTest = CARDNAME;
        1:   98:    if(argv[1]) {
    #####:   99:        seed = atoi(argv[1]);
        -:  100:    } else {
        1:  101:        seed = BASESEED;
        -:  102:    }
        -:  103:
        -:  104:    // Initialize Game State
        -:  105:    struct gameState G;
        1:  106:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:  107:    initializeGame(2, k, seed, &G);
        -:  108:
        1:  109:    testCard(currentTest,seed, &G);
        -:  110:
        1:  111:    return 0;
        -:  112:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      299:    8:int compare(const void* a, const void* b) {
      299:    9:  if (*(int*)a > *(int*)b)
       18:   10:    return 1;
      281:   11:  if (*(int*)a < *(int*)b)
       69:   12:    return -1;
      212:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:          int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:           struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      800:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:        {
    #####:   63:          return -1;
        -:   64:        }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)          //loop all cards
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)                  //loop chosen cards
        -:  109:    {
     1240:  110:      if (kingdomCards[j] == i)
        -:  111:        {
        -:  112:          //check if card is a 'Victory' Kingdom card
       80:  113:          if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
       16:  115:          if (numPlayers == 2){
        8:  116:            state->supplyCount[i] = 8;
        -:  117:          }
    #####:  118:          else{ state->supplyCount[i] = 12; }
        -:  119:        }
        -:  120:          else
        -:  121:        {
       72:  122:          state->supplyCount[i] = 10;
        -:  123:        }
       80:  124:          break;
        -:  125:        }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:        {
     1160:  128:          state->supplyCount[i] = -1;
        -:  129:        }
        -:  130:    }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
        -:  142:    {
       48:  143:      state->deck[i][j] = estate;
       48:  144:      state->deckCount[i]++;
        -:  145:    }
      128:  146:      for (j = 3; j < 10; j++)
        -:  147:    {
      112:  148:      state->deck[i][j] = copper;
      112:  149:      state->deckCount[i]++;
        -:  150:    }
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //    {
        -:  171:      //      drawCard(i, state);
        -:  172:      //    }
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       40:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
       37:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       37:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       37:  209:  if (state->deckCount[player] < 1)
       14:  210:    return -1;
       23:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      241:  214:  while (state->deckCount[player] > 0) {
      195:  215:    card = floor(Random() * state->deckCount[player]);
      195:  216:    newDeck[newDeckPos] = state->deck[player][card];
      195:  217:    newDeckPos++;
      556:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      361:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      195:  221:    state->deckCount[player]--;
        -:  222:  }
      218:  223:  for (i = 0; i < newDeckPos; i++) {
      195:  224:    state->deck[player][i] = newDeck[i];
      195:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       23:  228:  return 0;
        -:  229:}
        -:  230:
        5:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
        5:  234:  int coin_bonus = 0;       //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        5:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
        5:  243:  if ( state->numActions < 1 )
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
        4:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
        4:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        2:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
        2:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        2:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        2:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
        2:  269:  return 0;
        -:  270:}
        -:  271:
        6:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        6:  280:  who = state->whoseTurn;
        -:  281:
        6:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        5:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        4:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        3:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        3:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
        3:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        3:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
        3:  308:  return 0;
        -:  309:}
        -:  310:
        8:  311:int numHandCards(struct gameState *state) {
        8:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  316:  int currentPlayer = whoseTurn(state);
        4:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        8:  320:int supplyCount(int card, struct gameState *state) {
        8:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       33:  346:int whoseTurn(struct gameState *state) {
       33:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        8:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        8:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
       48:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       40:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       40:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        8:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        8:  363:  if (currentPlayer < (state->numPlayers - 1)){
        4:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        4:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        8:  370:  state->outpostPlayed = 0;
        8:  371:  state->phase = 0;
        8:  372:  state->numActions = 1;
        8:  373:  state->coins = 0;
        8:  374:  state->numBuys = 1;
        8:  375:  state->playedCardCount = 0;
        8:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       48:  380:  for (k = 0; k < 5; k++){
       40:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        8:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        8:  387:  return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
        -:  405:    {
        3:  406:      j++;
        -:  407:    }
        -:  408:    }
        2:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
        -:  470:    }
        -:  471:      else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
        -:  484:    }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
        -:  495:    }
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
        -:  505:    }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
        -:  515:    }
        -:  516:      else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      124:  525:int drawCard(int player, struct gameState *state)
        -:  526:{   int count;
        -:  527:  int deckCounter;
      124:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       46:  533:    for (i = 0; i < state->discardCount[player];i++){
       32:  534:      state->deck[player][i] = state->discard[player][i];
       32:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       14:  538:    state->deckCount[player] = state->discardCount[player];
       14:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       14:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       14:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       14:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       14:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       14:  559:    if (deckCounter == 0)
       10:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      110:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      110:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      110:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      110:  576:    state->deckCount[player]--;
      110:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      114:  580:  return 0;
        -:  581:}
        -:  582:
        7:  583:int getCost(int cardNumber)
        -:  584:{
        7:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        7:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        9:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        9:  653:  int currentPlayer = whoseTurn(state);
        9:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        9:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        9:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        9:  660:  int z = 0;// this is the counter for the temp hand
        9:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
        9:  667:  switch( card )
        -:  668:    {
        -:  669:    case adventurer:
        1:  670:        cardAdventurer(temphand, z, cardDrawn, drawntreasure, handPos, currentPlayer, state);
        1:  671:        return 0;
        -:  672:
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      cardCouncilRoom(handPos, currentPlayer, state);
    #####:  676:      return 0;
        -:  677:
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
    #####:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  682:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  683:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
    #####:  688:      updateCoins(currentPlayer, state, 5);
    #####:  689:      x = 1;//Condition to loop on
    #####:  690:      while( x == 1) {//Buy one card
    #####:  691:    if (supplyCount(choice1, state) <= 0){
        -:  692:      if (DEBUG)
        -:  693:        printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:      if (DEBUG){
        -:  696:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:      }
        -:  698:    }
    #####:  699:    else if (state->coins < getCost(choice1)){
    #####:  700:      printf("That card is too expensive!\n");
        -:  701:
        -:  702:      if (DEBUG){
        -:  703:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:      }
        -:  705:    }
        -:  706:    else{
        -:  707:
        -:  708:      if (DEBUG){
        -:  709:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:      }
        -:  711:
    #####:  712:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  713:      x = 0;//No more buying cards
        -:  714:
        -:  715:      if (DEBUG){
        -:  716:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:      }
        -:  718:
        -:  719:    }
        -:  720:      }
        -:  721:
        -:  722:      //Reset Hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  724:    state->hand[currentPlayer][i] = temphand[i];
    #####:  725:    temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:
    #####:  729:      return 0;
        -:  730:
        -:  731:    case gardens:
    #####:  732:      return -1;
        -:  733:
        -:  734:    case mine:
    #####:  735:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:
    #####:  737:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  738:    {
    #####:  739:      return -1;
        -:  740:    }
        -:  741:
    #####:  742:      if (choice2 > treasure_map || choice2 < curse)
        -:  743:    {
    #####:  744:      return -1;
        -:  745:    }
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  748:    {
    #####:  749:      return -1;
        -:  750:    }
        -:  751:
    #####:  752:      gainCard(choice2, state, 2, currentPlayer);
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:    {
    #####:  760:      if (state->hand[currentPlayer][i] == j)
        -:  761:        {
    #####:  762:          discardCard(i, currentPlayer, state, 0);
    #####:  763:          break;
        -:  764:        }
        -:  765:    }
        -:  766:
    #####:  767:      return 0;
        -:  768:
        -:  769:    case remodel:
    #####:  770:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  771:
    #####:  772:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  773:    {
    #####:  774:      return -1;
        -:  775:    }
        -:  776:
    #####:  777:      gainCard(choice2, state, 0, currentPlayer);
        -:  778:
        -:  779:      //discard card from hand
    #####:  780:      discardCard(handPos, currentPlayer, state, 0);
        -:  781:
        -:  782:      //discard trashed card
    #####:  783:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  784:    {
    #####:  785:      if (state->hand[currentPlayer][i] == j)
        -:  786:        {
    #####:  787:          discardCard(i, currentPlayer, state, 0);
    #####:  788:          break;
        -:  789:        }
        -:  790:    }
        -:  791:
        -:  792:
    #####:  793:      return 0;
        -:  794:
        -:  795:    case smithy:
        -:  796:      //+3 Cards
    #####:  797:      cardSmithy(handPos, currentPlayer, state);
    #####:  798:      return 0;
        -:  799:
        -:  800:    case village:
        -:  801:      //+1 Card
    #####:  802:      drawCard(currentPlayer, state);
        -:  803:
        -:  804:      //+2 Actions
    #####:  805:      state->numActions = state->numActions + 2;
        -:  806:
        -:  807:      //discard played card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
    #####:  809:      return 0;
        -:  810:
        -:  811:    case baron:
    #####:  812:        cardBaron(choice1, handPos, currentPlayer, state);
    #####:  813:        return 0;
        -:  814:
        -:  815:    case great_hall:
        -:  816:      //+1 Card
        2:  817:      drawCard(currentPlayer, state);
        -:  818:
        -:  819:      //+1 Actions
        2:  820:      state->numActions++;
        -:  821:
        -:  822:      //discard card from hand
        2:  823:      discardCard(handPos, currentPlayer, state, 0);
        2:  824:      return 0;
        -:  825:
        -:  826:    case minion:
        -:  827:      //+1 action
        6:  828:      state->numActions++;
        -:  829:
        -:  830:      //discard card from hand
        6:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:
        6:  833:      if (choice1)      //+2 coins
        -:  834:    {
        2:  835:      state->coins = state->coins + 2;
        -:  836:    }
        -:  837:
        4:  838:      else if (choice2)     //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  839:    {
        -:  840:      //discard hand
       11:  841:      while(numHandCards(state) > 0)
        -:  842:        {
        5:  843:          discardCard(handPos, currentPlayer, state, 0);
        -:  844:        }
        -:  845:
        -:  846:      //draw 4
       15:  847:      for (i = 0; i < 4; i++)
        -:  848:        {
       12:  849:          drawCard(currentPlayer, state);
        -:  850:        }
        -:  851:
        -:  852:      //other players discard hand and redraw if hand size > 4
        9:  853:      for (i = 0; i < state->numPlayers; i++)
        -:  854:        {
        6:  855:          if (i != currentPlayer)
        -:  856:        {
        3:  857:          if ( state->handCount[i] > 4 )
        -:  858:            {
        -:  859:              //discard hand
        7:  860:              while( state->handCount[i] > 0 )
        -:  861:            {
        5:  862:              discardCard(handPos, i, state, 0);
        -:  863:            }
        -:  864:
        -:  865:              //draw 4
        5:  866:              for (j = 0; j < 4; j++)
        -:  867:            {
        4:  868:              drawCard(i, state);
        -:  869:            }
        -:  870:            }
        -:  871:        }
        -:  872:        }
        -:  873:
        -:  874:    }
        6:  875:      return 0;
        -:  876:
        -:  877:    case steward:
    #####:  878:      if (choice1 == 1)
        -:  879:    {
        -:  880:      //+2 cards
    #####:  881:      drawCard(currentPlayer, state);
    #####:  882:      drawCard(currentPlayer, state);
        -:  883:    }
    #####:  884:      else if (choice1 == 2)
        -:  885:    {
        -:  886:      //+2 coins
    #####:  887:      state->coins = state->coins + 2;
        -:  888:    }
        -:  889:      else
        -:  890:    {
        -:  891:      //trash 2 cards in hand
    #####:  892:      discardCard(choice2, currentPlayer, state, 1);
    #####:  893:      discardCard(choice3, currentPlayer, state, 1);
        -:  894:    }
        -:  895:
        -:  896:      //discard card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:
        -:  900:    case tribute:
    #####:  901:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  902:    if (state->deckCount[nextPlayer] > 0){
    #####:  903:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  904:      state->deckCount[nextPlayer]--;
        -:  905:    }
    #####:  906:    else if (state->discardCount[nextPlayer] > 0){
    #####:  907:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  908:      state->discardCount[nextPlayer]--;
        -:  909:    }
        -:  910:    else{
        -:  911:      //No Card to Reveal
        -:  912:      if (DEBUG){
        -:  913:        printf("No cards to reveal\n");
        -:  914:      }
        -:  915:    }
        -:  916:      }
        -:  917:
        -:  918:      else{
    #####:  919:    if (state->deckCount[nextPlayer] == 0){
    #####:  920:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  921:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  922:        state->deckCount[nextPlayer]++;
    #####:  923:        state->discard[nextPlayer][i] = -1;
    #####:  924:        state->discardCount[nextPlayer]--;
        -:  925:      }
        -:  926:
    #####:  927:      shuffle(nextPlayer,state);//Shuffle the deck
        -:  928:    }
    #####:  929:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  930:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  931:    state->deckCount[nextPlayer]--;
    #####:  932:    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  933:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  934:    state->deckCount[nextPlayer]--;
        -:  935:      }
        -:  936:
    #####:  937:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  938:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  939:    state->playedCardCount++;
    #####:  940:    tributeRevealedCards[1] = -1;
        -:  941:      }
        -:  942:
    #####:  943:      for (i = 0; i <= 2; i ++){
    #####:  944:    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  945:      state->coins += 2;
        -:  946:    }
        -:  947:
    #####:  948:    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  949:      drawCard(currentPlayer, state);
    #####:  950:      drawCard(currentPlayer, state);
        -:  951:    }
        -:  952:    else{//Action Card
    #####:  953:      state->numActions = state->numActions + 2;
        -:  954:    }
        -:  955:      }
        -:  956:
    #####:  957:      return 0;
        -:  958:
        -:  959:    case ambassador:
    #####:  960:      j = 0;        //used to check if player has enough cards to discard
        -:  961:
    #####:  962:      if (choice2 > 2 || choice2 < 0)
        -:  963:    {
    #####:  964:      return -1;
        -:  965:    }
        -:  966:
    #####:  967:      if (choice1 == handPos)
        -:  968:    {
    #####:  969:      return -1;
        -:  970:    }
        -:  971:
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  973:    {
    #####:  974:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  975:        {
    #####:  976:          j++;
        -:  977:        }
        -:  978:    }
    #####:  979:      if (j < choice2)
        -:  980:    {
    #####:  981:      return -1;
        -:  982:    }
        -:  983:
        -:  984:      if (DEBUG)
        -:  985:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  986:
        -:  987:      //increase supply count for choosen card by amount being discarded
    #####:  988:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  989:
        -:  990:      //each other player gains a copy of revealed card
    #####:  991:      for (i = 0; i < state->numPlayers; i++)
        -:  992:    {
    #####:  993:      if (i != currentPlayer)
        -:  994:        {
    #####:  995:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  996:        }
        -:  997:    }
        -:  998:
        -:  999:      //discard played card from hand
    #####: 1000:      discardCard(handPos, currentPlayer, state, 0);
        -: 1001:
        -: 1002:      //trash copies of cards returned to supply
    #####: 1003:      for (j = 0; j < choice2; j++)
        -: 1004:    {
    #####: 1005:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1006:        {
    #####: 1007:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1008:        {
    #####: 1009:          discardCard(i, currentPlayer, state, 1);
    #####: 1010:          break;
        -: 1011:        }
        -: 1012:        }
        -: 1013:    }
        -: 1014:
    #####: 1015:      return 0;
        -: 1016:
        -: 1017:    case cutpurse:
        -: 1018:
    #####: 1019:      updateCoins(currentPlayer, state, 2);
    #####: 1020:      for (i = 0; i < state->numPlayers; i++)
        -: 1021:    {
    #####: 1022:      if (i != currentPlayer)
        -: 1023:        {
    #####: 1024:          for (j = 0; j < state->handCount[i]; j++)
        -: 1025:        {
    #####: 1026:          if (state->hand[i][j] == copper)
        -: 1027:            {
    #####: 1028:              discardCard(j, i, state, 0);
    #####: 1029:              break;
        -: 1030:            }
    #####: 1031:          if (j == state->handCount[i])
        -: 1032:            {
    #####: 1033:              for (k = 0; k < state->handCount[i]; k++)
        -: 1034:            {
        -: 1035:              if (DEBUG)
        -: 1036:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1037:            }
    #####: 1038:              break;
        -: 1039:            }
        -: 1040:        }
        -: 1041:
        -: 1042:        }
        -: 1043:
        -: 1044:    }
        -: 1045:
        -: 1046:      //discard played card from hand
    #####: 1047:      discardCard(handPos, currentPlayer, state, 0);
        -: 1048:
    #####: 1049:      return 0;
        -: 1050:
        -: 1051:
        -: 1052:    case embargo:
        -: 1053:      //+2 Coins
    #####: 1054:      state->coins = state->coins + 2;
        -: 1055:
        -: 1056:      //see if selected pile is in play
    #####: 1057:      if ( state->supplyCount[choice1] == -1 )
        -: 1058:    {
    #####: 1059:      return -1;
        -: 1060:    }
        -: 1061:
        -: 1062:      //add embargo token to selected supply pile
    #####: 1063:      state->embargoTokens[choice1]++;
        -: 1064:
        -: 1065:      //trash card
    #####: 1066:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1067:      return 0;
        -: 1068:
        -: 1069:    case outpost:
        -: 1070:      //set outpost flag
    #####: 1071:      state->outpostPlayed++;
        -: 1072:
        -: 1073:      //discard card
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1075:      return 0;
        -: 1076:
        -: 1077:    case salvager:
        -: 1078:        //+1 buy
    #####: 1079:        cardSalvager(choice1, handPos, currentPlayer, state);
    #####: 1080:        return 0;
        -: 1081:
        -: 1082:    case sea_hag:
    #####: 1083:      for (i = 0; i < state->numPlayers; i++){
    #####: 1084:    if (i != currentPlayer){
    #####: 1085:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];                state->deckCount[i]--;
    #####: 1086:      state->discardCount[i]++;
    #####: 1087:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1088:    }
        -: 1089:      }
    #####: 1090:      return 0;
        -: 1091:
        -: 1092:    case treasure_map:
        -: 1093:      //search hand for another treasure_map
    #####: 1094:      index = -1;
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:    {
    #####: 1097:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1098:        {
    #####: 1099:          index = i;
    #####: 1100:          break;
        -: 1101:        }
        -: 1102:    }
    #####: 1103:      if (index > -1)
        -: 1104:    {
        -: 1105:      //trash both treasure cards
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1107:      discardCard(index, currentPlayer, state, 1);
        -: 1108:
        -: 1109:      //gain 4 Gold cards
    #####: 1110:      for (i = 0; i < 4; i++)
        -: 1111:        {
    #####: 1112:          gainCard(gold, state, 1, currentPlayer);
        -: 1113:        }
        -: 1114:
        -: 1115:      //return success
    #####: 1116:      return 1;
        -: 1117:    }
        -: 1118:
        -: 1119:      //no second treasure_map found in hand
    #####: 1120:      return -1;
        -: 1121:    }
        -: 1122:
    #####: 1123:  return -1;
        -: 1124:}
        -: 1125:
       19: 1126:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1127:{
        -: 1128:
        -: 1129:  //if card is not trashed, added to Played pile
       19: 1130:  if (trashFlag < 1)
        -: 1131:    {
        -: 1132:      //add card to played pile
       19: 1133:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       19: 1134:      state->playedCardCount++;
        -: 1135:    }
        -: 1136:
        -: 1137:  //set played card to -1
       19: 1138:  state->hand[currentPlayer][handPos] = -1;
        -: 1139:
        -: 1140:  //remove card from player's hand
       19: 1141:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1142:    {
        -: 1143:      //reduce number of cards in hand
        4: 1144:      state->handCount[currentPlayer]--;
        -: 1145:    }
       15: 1146:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1147:    {
        -: 1148:      //reduce number of cards in hand
    #####: 1149:      state->handCount[currentPlayer]--;
        -: 1150:    }
        -: 1151:  else
        -: 1152:    {
        -: 1153:      //replace discarded card with last card in hand
       15: 1154:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1155:      //set last card to -1
       15: 1156:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1157:      //reduce number of cards in hand
       15: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
        -: 1160:
       19: 1161:  return 0;
        -: 1162:}
        -: 1163:
        3: 1164:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1165:{
        -: 1166:  //Note: supplyPos is enum of choosen card
        -: 1167:
        -: 1168:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1169:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1170:    {
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:
        -: 1174:  //added card for [whoseTurn] current player:
        -: 1175:  // toFlag = 0 : add to discard
        -: 1176:  // toFlag = 1 : add to deck
        -: 1177:  // toFlag = 2 : add to hand
        -: 1178:
        3: 1179:  if (toFlag == 1)
        -: 1180:    {
    #####: 1181:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1182:      state->deckCount[player]++;
        -: 1183:    }
        3: 1184:  else if (toFlag == 2)
        -: 1185:    {
    #####: 1186:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1187:      state->handCount[player]++;
        -: 1188:    }
        -: 1189:  else
        -: 1190:    {
        3: 1191:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1192:      state->discardCount[player]++;
        -: 1193:    }
        -: 1194:
        -: 1195:  //decrease number in supply pile
        3: 1196:  state->supplyCount[supplyPos]--;
        -: 1197:
        3: 1198:  return 0;
        -: 1199:}
        -: 1200:
       18: 1201:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1202:{
        -: 1203:  int i;
        -: 1204:
        -: 1205:  //reset coin count
       18: 1206:  state->coins = 0;
        -: 1207:
        -: 1208:  //add coins for each Treasure card in player's hand
      111: 1209:  for (i = 0; i < state->handCount[player]; i++)
        -: 1210:    {
       93: 1211:      if (state->hand[player][i] == copper)
        -: 1212:    {
       69: 1213:      state->coins += 1;
        -: 1214:    }
       24: 1215:      else if (state->hand[player][i] == silver)
        -: 1216:    {
    #####: 1217:      state->coins += 2;
        -: 1218:    }
       24: 1219:      else if (state->hand[player][i] == gold)
        -: 1220:    {
    #####: 1221:      state->coins += 3;
        -: 1222:    }
        -: 1223:    }
        -: 1224:
        -: 1225:  //add bonus
       18: 1226:  state->coins += bonus;
        -: 1227:
       18: 1228:  return 0;
        -: 1229:}
        -: 1230:
        1: 1231:void cardSmithy(int handPos, int player, struct gameState *state) {
        -: 1232:    int i;
        5: 1233:    for (i = 0; i <= 3; i++)
        -: 1234:    {
        4: 1235:        drawCard(player, state);
        -: 1236:    }
        -: 1237:
        -: 1238:    //discard card from hand
        1: 1239:    discardCard(handPos, player, state, 0);
        1: 1240:    return;
        -: 1241:}
        -: 1242:
        4: 1243:void cardAdventurer(int temphand[], int z, int cardDrawn, int drawntreasure, int handPos, int currentPlayer, struct gameState *state) {
       30: 1244:    while(drawntreasure<2){
       22: 1245:        if (state->deckCount[currentPlayer] <= 1){//if the deck is empty we need to shuffle discard and add to deck
        7: 1246:            shuffle(currentPlayer, state);
        -: 1247:        }
       22: 1248:        drawCard(currentPlayer, state);
       22: 1249:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       22: 1250:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        8: 1251:            drawntreasure++;
        -: 1252:        else{
       14: 1253:            temphand[z]=cardDrawn;
       14: 1254:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       14: 1255:            ++z;
        -: 1256:        }
        -: 1257:    }
       22: 1258:    while(z-1>=0){
       14: 1259:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       14: 1260:        z=z-1;
        -: 1261:    }
        4: 1262:    return;
        -: 1263:}
        -: 1264:
    #####: 1265:void cardBaron(int choice1, int handPos, int currentPlayer, struct gameState *state) {
    #####: 1266:    state->numBuys++;//Increase buys by 1!
    #####: 1267:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1268:        int p = 0;//Iterator for hand!
    #####: 1269:        int card_not_discarded = 1;//Flag for discard set!
    #####: 1270:        while(card_not_discarded){
    #####: 1271:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1272:                state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1273:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1274:                state->discardCount[currentPlayer]++;
    #####: 1275:                for (;p < state->handCount[currentPlayer]; p++){
    #####: 1276:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1277:                }
    #####: 1278:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1279:                state->handCount[currentPlayer]--;
    #####: 1280:                card_not_discarded = 0;//Exit the loop
        -: 1281:            }
    #####: 1282:            else if (p > state->handCount[currentPlayer]){
        -: 1283:                if(DEBUG) {
        -: 1284:                    printf("No estate cards in your hand, invalid choice\n");
        -: 1285:                    printf("Must gain an estate if there are any\n");
        -: 1286:                }
    #####: 1287:                if (supplyCount(estate, state) > 0){
    #####: 1288:                    gainCard(estate, state, 0, currentPlayer);
    #####: 1289:                    state->supplyCount[estate]--;//Decrement estates
    #####: 1290:                    if (supplyCount(estate, state) == 0){
    #####: 1291:                        isGameOver(state);
        -: 1292:                    }
        -: 1293:                }
    #####: 1294:                card_not_discarded = 0;//Exit the loop
        -: 1295:            }
        -: 1296:            else{
    #####: 1297:                p++;//Next card
        -: 1298:            }
        -: 1299:        }
        -: 1300:    }
        -: 1301:    else {
    #####: 1302:        if (supplyCount(estate, state) > 0){
    #####: 1303:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1304:            if (supplyCount(estate, state) == 0){
    #####: 1305:                isGameOver(state);
        -: 1306:            }
        -: 1307:        }
        -: 1308:    }
    #####: 1309:    return;
        -: 1310:}
        -: 1311:
    #####: 1312:void cardSalvager(int choice1, int handPos, int currentPlayer, struct gameState *state) {
        -: 1313:
    #####: 1314:    state->numActions++;
        -: 1315:
    #####: 1316:    if (choice1)
        -: 1317:    {
        -: 1318:        //gain coins equal to trashed card
    #####: 1319:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1320:        //trash card
    #####: 1321:        discardCard(choice1, currentPlayer, state, 1);
        -: 1322:    }
        -: 1323:
        -: 1324:    //discard card
    #####: 1325:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1326:    return;
        -: 1327:}
        -: 1328:
    #####: 1329:void cardCouncilRoom(int handPos, int currentPlayer, struct gameState *state) {
        -: 1330:    int i;
    #####: 1331:    for (i = 0; i < 4; i++)
        -: 1332:    {
    #####: 1333:        drawCard(currentPlayer, state);
        -: 1334:    }
        -: 1335:
        -: 1336:    //+1 Buy
    #####: 1337:    state->numBuys++;
        -: 1338:
        -: 1339:    //Each other player draws a card
    #####: 1340:    for (i = 0; i < state->numPlayers; i++)
        -: 1341:    {
    #####: 1342:        if ( i != currentPlayer )
        -: 1343:        {
    #####: 1344:            drawCard(i, state);
        -: 1345:        }
        -: 1346:    }
        -: 1347:
        -: 1348:    //put played card in played card pile
    #####: 1349:    discardCard(handPos, currentPlayer, state, 0);
        -: 1350:
    #####: 1351:    return;
        -: 1352:}
        -: 1353:
        -: 1354://end of dominion.c