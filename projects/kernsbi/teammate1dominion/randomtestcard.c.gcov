        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Name: Billy Kerns
        -:    2:// File: randomtestcard.c
        -:    3:// village
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:#include <time.h>
        -:   12:#include <stdlib.h>
        -:   13:
        -:   14:#define NOISY_TEST 1
        -:   15:
        -:   16:int checkVillageRandom(struct gameState *pre, int currentPlayer, int handPos, int n);
        -:   17:
        1:   18:int main(){
        -:   19:	struct gameState G;
        -:   20:	int n;
        -:   21:	int p;
        -:   22:	int r;
        -:   23:	int t;
        -:   24:	int cardDrawn;
        -:   25:	int u;
        -:   26:	int turn;
        1:   27:	int errorCount = 0;
        1:   28:	cardDrawn = -1;
        1:   29:	srand(time(NULL));
        -:   30:	enum CARD randomCard[27] = {curse, estate, duchy, province, copper, silver, gold, adventurer, council_room, feast, gardens,
        -:   31:							mine, remodel, smithy, village, baron, great_hall, minion, steward, tribute, ambassador, cutpurse,
        1:   32:							embargo, outpost, salvager, sea_hag, treasure_map};
        -:   33:	int k[10] = {adventurer, council_room, feast, gardens, mine
        1:   34:               , remodel, smithy, village, baron, great_hall};
        1:   35:	printf("-------------------------Testing Card: Village-------------------------\n\n");
     5001:   36:	for(n = 0; n < 5000; n++){
     5000:   37:		p = (rand() % (MAX_PLAYERS-1));
     5000:   38:		initializeGame(p+1, k, 1000, &G);
131505000:   39:		for(t = 0; t < sizeof(struct gameState); t++){//fill gameState with junk
131500000:   40:			((char*)&G)[t] = (rand() % (256));
        -:   41:		}
    15029:   42:		for(u = 0; u <= p; u++){//fill each player
    10029:   43:			G.deckCount[u] = (rand() % (MAX_DECK));//deck count = between 0 and MAX_DECK
    10029:   44:			G.discardCount[u] = (rand() % (MAX_DECK));//discardCount = between 0 and MAX_DECK
    10029:   45:			G.handCount[u] = (rand() % (MAX_HAND))+1;//handCount = between 0 and MAX_HAND
        -:   46:
  2512021:   47:			for(r = 0; r < G.deckCount[u]; r++){
  2501992:   48:				int randomInt = (rand() % (26));
  2501992:   49:				G.deck[u][r] = randomCard[randomInt];//player deck at r = random card
        -:   50:			}
  2548675:   51:			for(r = 0; r < G.discardCount[u]; r++){
  2538646:   52:				int randomInt = (rand() % (26));
  2538646:   53:				G.discard[u][r] = randomCard[randomInt];//player discard at r = random card
        -:   54:			}
  2540228:   55:			for(r = 0; r < G.handCount[u]; r++){
  2530199:   56:				int randomInt = (rand() % (26));
  2530199:   57:				G.hand[u][r] = randomCard[randomInt];//player hand at r = random card
        -:   58:			}
        -:   59:		}
     5000:   60:		G.playedCardCount = (rand() % (MAX_DECK-3));
     5000:   61:		G.numActions = (rand() % (11));
     5000:   62:		G.numPlayers = p + 1;
     5000:   63:		turn = (rand() % (p+1));
     5000:   64:		G.whoseTurn = turn;
     5000:   65:		errorCount += checkVillageRandom(&G, turn, G.handCount[turn]-1, n);
        -:   66:	}
        1:   67:	if(errorCount != 0){
        -:   68:		#if(NOISY_TEST != 1)
        -:   69:		printf("At least 1 test failed.  Define NOISY_TEST to 1 for more information\n");
        -:   70:		#endif
        -:   71:	}
        -:   72:	else {
    #####:   73:		printf("All tests passed\n");
        -:   74:	}
        1:   75:	return 0;
        -:   76:}
        -:   77:
     5000:   78:int checkVillageRandom(struct gameState *pre, int currentPlayer, int handPos, int n){
        -:   79:	struct gameState post;
     5000:   80:	memcpy (&post, pre, sizeof(struct gameState));
     5000:   81:	int bonus = 0;
        -:   82:	int t;
     5000:   83:	int funErrors = 0;
     5000:   84:	cardEffect(village, -1, -1, -1, &post, handPos, &bonus);
     5000:   85:	if(pre->handCount[currentPlayer] != post.handCount[currentPlayer]){//gain one card but should lose the village card 
        -:   86:		#if(NOISY_TEST == 1)
    #####:   87:		printf("Iteration # %d	Test 1 failed\n", n);
    #####:   88:		printf("Expected: cardCount = %d	Actual: cardCount = %d\n\n", pre->handCount[currentPlayer], post.handCount[currentPlayer]);
        -:   89:		#endif
    #####:   90:		funErrors++;
        -:   91:	}
     5000:   92:	if(pre->numActions + 2 != post.numActions){//Should have 2 more actions than original
        -:   93:		#if(NOISY_TEST == 1)
     4496:   94:		printf("Iteration # %d	Test 2 failed\n", n);
     4496:   95:		printf("Expected: numActions = %d	Actual: numActionst = %d\n\n", pre->numActions + 2, post.numActions);
        -:   96:		#endif
     4496:   97:		funErrors++;
        -:   98:	}
     5000:   99:	if(pre->discardCount[currentPlayer] + 1 != post.discardCount[currentPlayer]){//discardCount should be incremented
        -:  100:		#if(NOISY_TEST == 1)
     5000:  101:		printf("Iteration # %d	Test 3 failed\n", n);
     5000:  102:		printf("Expected: discardCount = %d	Actual: discardCount = %d\n\n", pre->discardCount[currentPlayer] + 1, post.discardCount[currentPlayer]);
        -:  103:		#endif
     5000:  104:		funErrors++;
        -:  105:	}
     5000:  106:	if(post.hand[currentPlayer][post.handCount[currentPlayer]-1] != pre->deck[currentPlayer][pre->deckCount[currentPlayer]-1] && pre->deckCount[currentPlayer] > 0){
        -:  107:		#if(NOISY_TEST == 1)//Card drawn should be last card in deck unless deck was shuffled
    #####:  108:		printf("Iteration # %d	Test 7 failed\n", n);
    #####:  109:		printf("Expected: drawn card = %d	Actual: drawn card = %d\n\n", pre->deck[currentPlayer][pre->deckCount[currentPlayer]-1], post.hand[currentPlayer][post.handCount[currentPlayer]-1]);
        -:  110:		#endif
    #####:  111:		funErrors++;
        -:  112:	}
    15029:  113:	for (t=0; t < pre->numPlayers; t++){//check other players' stuff
    10029:  114:		if(pre->handCount[t] != post.handCount[t]){
    #####:  115:			if(t != currentPlayer){//if current player then it's probably different
        -:  116:				#if(NOISY_TEST == 1)
    #####:  117:				printf("Iteration #: %d	Test 4 failed\n", n);
    #####:  118:				printf("Expected: Player %d handCount = %d	Actual: Player %d handCount = %d\n\n", t, pre->handCount[t], t, post.handCount[t]);
        -:  119:				#endif
    #####:  120:				funErrors++;
        -:  121:			}
        -:  122:		}
    10029:  123:		if(pre->discardCount[t] != post.discardCount[t]){
       12:  124:			if(t != currentPlayer){
        -:  125:				#if(NOISY_TEST == 1)
    #####:  126:				printf("Iteration # %d	Test 5 failed\n", n);
    #####:  127:				printf("Expected: Player %d discardCount = %d	Actual: Player %d discardCount = %d\n\n", t, pre->discardCount[t], t, post.discardCount[t]);
        -:  128:				#endif
    #####:  129:				funErrors++;
        -:  130:			}
        -:  131:		}
    10029:  132:		if(pre->deckCount[t] != post.deckCount[t]){
     5000:  133:			if(t != currentPlayer){
        -:  134:				#if(NOISY_TEST == 1)
    #####:  135:				printf("Iteration # %d	Test 6 failed\n", n);
    #####:  136:				printf("Expected: Player %d deckCount = %d	Actual: Player %d deckCount = %d\n\n", t, pre->deckCount[t], t, post.deckCount[t]);
        -:  137:				#endif
    #####:  138:				funErrors++;
        -:  139:			}
        -:  140:		}
        -:  141:	}
     5000:  142:	return funErrors;
        -:  143:}
