        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   465801:    8:int compare(const void* a, const void* b) {
   465801:    9:  if (*(int*)a > *(int*)b)
    43371:   10:    return 1;
   422430:   11:  if (*(int*)a < *(int*)b)
   120343:   12:    return -1;
   302087:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    15000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    15000:   44:  SelectStream(1);
    15000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    15000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     4895:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    10105:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   111155:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1111550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1010500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    10105:   73:  if (numPlayers == 2)
        -:   74:    {
     5033:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     5072:   77:  else if (numPlayers == 3)
        -:   78:    {
     5072:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    10105:   87:  if (numPlayers == 2)
        -:   88:    {
     5033:   89:      state->supplyCount[estate] = 8;
     5033:   90:      state->supplyCount[duchy] = 8;
     5033:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     5072:   95:      state->supplyCount[estate] = 12;
     5072:   96:      state->supplyCount[duchy] = 12;
     5072:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    10105:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10105:  102:  state->supplyCount[silver] = 40;
    10105:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   212205:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
  1667325:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:  	{
  1566275:  110:  	  if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
   121260:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:  	    {
    20210:  115:  	      if (numPlayers == 2){ 
    10066:  116:  	        state->supplyCount[i] = 8; 
        -:  117:  	      }
    10144:  118:  	      else{ state->supplyCount[i] = 12; }
        -:  119:  	    }
        -:  120:        else
        -:  121:  	    {
    80840:  122:  	      state->supplyCount[i] = 10;
        -:  123:  	    }
   101050:  124:        break;
        -:  125:      }
        -:  126:  	  else    //card is not in the set chosen for the game
        -:  127:  	  {
  1465225:  128:  	    state->supplyCount[i] = -1;
        -:  129:  	  }
        -:  130:  	}
        -:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
    35387:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:    {
    25282:  139:      state->deckCount[i] = 0;
   101128:  140:      for (j = 0; j < 3; j++)
        -:  141:	{
    75846:  142:	  state->deck[i][j] = estate;
    75846:  143:	  state->deckCount[i]++;
        -:  144:	}
   202256:  145:      for (j = 3; j < 10; j++)
        -:  146:	{
   176974:  147:	  state->deck[i][j] = copper;
   176974:  148:	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
    35387:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:    {
    25282:  155:      if ( shuffle(i, state) < 0 )
        -:  156:	{
    #####:  157:	  return -1;
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
    35387:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
    25282:  165:      state->handCount[i] = 0;
    25282:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
   282940:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:    {
   272835:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
    10105:  181:  state->outpostPlayed = 0;
    10105:  182:  state->phase = 0;
    10105:  183:  state->numActions = 1;
    10105:  184:  state->numBuys = 1;
    10105:  185:  state->playedCardCount = 0;
    10105:  186:  state->whoseTurn = 0;
    10105:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
    60630:  191:  for (it = 0; it < 5; it++){
    50525:  192:    drawCard(state->whoseTurn, state);
        -:  193:  }
        -:  194:
    10105:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
    10105:  197:  return 0;
        -:  198:}
        -:  199:
        -:  200:/**
        -:  201: * Randomly reorder deck array for player
        -:  202: * @param  player valid player int
        -:  203: * @param  state  
        -:  204: * 
        -:  205: * @post state->deck[player] is reordered, but has same num elements.       
        -:  206: */
    25372:  207:int shuffle(int player, struct gameState *state) {
        -:  208:  int newDeck[MAX_DECK];
    25372:  209:  int newDeckPos = 0;
        -:  210:  int card;
        -:  211:  int i;
        -:  212:
    25372:  213:  if (state->deckCount[player] < 1)
       39:  214:    return -1;
    25333:  215:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  216:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  217:
        -:  218:  /* Randomly remove cards from deck into newDeck */
   315952:  219:  while (state->deckCount[player] > 0) {
   265286:  220:    card = floor(Random() * state->deckCount[player]);
   265286:  221:    newDeck[newDeckPos] = state->deck[player][card];
   265286:  222:    newDeckPos++;
  1928635:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
  1663349:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
   265286:  226:    state->deckCount[player]--;
        -:  227:  }
   290619:  228:  for (i = 0; i < newDeckPos; i++) {
   265286:  229:    state->deck[player][i] = newDeck[i];
   265286:  230:    state->deckCount[player]++;
        -:  231:  }
    25333:  232:  return 0;
        -:  233:}
        -:  234:
    #####:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
    #####:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
    #####:  241:  if (state->phase != 0)
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
    #####:  247:  if ( state->numActions < 1 )
        -:  248:    {
    #####:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
    #####:  253:  card = handCard(handPos, state);
        -:  254:	
        -:  255:  //check if selected card is an action
    #####:  256:  if ( card < adventurer || card > treasure_map )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    #####:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  263:    {
    #####:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
    #####:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
    #####:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  272:	
    #####:  273:  return 0;
        -:  274:}
        -:  275:/**
        -:  276: * Handles entire card purchase.
        -:  277: * @param  supplyPos enum of card
        -:  278: * @param  state     
        -:  279: * @return           0 on success -1 on failure
        -:  280: */
    #####:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
    #####:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1)
        -:  290:  {
    #####:  291:    if (DEBUG)
        -:  292:      printf("You do not have any buys left\n");
    #####:  293:    return -1;
        -:  294:  } 
        -:  295:
    #####:  296:  else if (supplyCount(supplyPos, state) < 1)
        -:  297:  {
    #####:  298:    if (DEBUG)
        -:  299:      printf("There are not any of that type of card left\n");
    #####:  300:    return -1;
        -:  301:  } 
        -:  302:
    #####:  303:  else if (state->coins < getCost(supplyPos))
        -:  304:  {
    #####:  305:    if (DEBUG) 
        -:  306:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  307:    return -1;
        -:  308:  }
        -:  309:
        -:  310:  else 
        -:  311:  {
    #####:  312:    state->phase = 1;
        -:  313:    //state->supplyCount[supplyPos]--;
    #####:  314:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  315:  
    #####:  316:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  317:    state->numBuys--;
    #####:  318:    if (DEBUG)
        -:  319:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  320:  }
    #####:  321:  return 0;
        -:  322:}
        -:  323:
    #####:  324:int numHandCards(struct gameState *state) {
    #####:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
    #####:  328:int handCard(int handPos, struct gameState *state) {
    #####:  329:  int currentPlayer = whoseTurn(state);
    #####:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
    #####:  333:int supplyCount(int card, struct gameState *state) {
    #####:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
    #####:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
    #####:  339:  int count = 0;
        -:  340:
    #####:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->deck[player][i] == card) count++;
        -:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->hand[player][i] == card) count++;
        -:  349:    }
        -:  350:
    #####:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
    #####:  353:      if (state->discard[player][i] == card) count++;
        -:  354:    }
        -:  355:
    #####:  356:  return count;
        -:  357:}
        -:  358:
     5000:  359:int whoseTurn(struct gameState *state) {
     5000:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
    #####:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
        -:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
    #####:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
    #####:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
    #####:  414:  j = 0;
    #####:  415:  for (i = 0; i < 25; i++)
        -:  416:  {
    #####:  417:      if (state->supplyCount[i] == 0)
        -:  418:      {
    #####:  419:        j++;
        -:  420:      }
        -:  421:  }
    #####:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
    #####:  426:  return 0;
        -:  427:}
        -:  428:
    #####:  429:int scoreFor (int player, struct gameState *state) {
        -:  430:  int i;
    #####:  431:  int score = 0;
        -:  432:  //score from hand
    #####:  433:  for (i = 0; i < state->handCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from discard
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        -:  454:  //score from deck
    #####:  455:  for (i = 0; i < state->discardCount[player]; i++)
        -:  456:    {
    #####:  457:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  458:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  459:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  460:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  461:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  463:    }
    #####:  464:  return score;
        -:  465:}
        -:  466:
    #####:  467:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  468:  int i;	
        -:  469:  int j;
        -:  470:  int highScore;
        -:  471:  int currentPlayer;
        -:  472:
        -:  473:  //get score for each player
    #####:  474:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  475:    {
        -:  476:      //set unused player scores to -9999
    #####:  477:      if (i >= state->numPlayers)
        -:  478:	{
    #####:  479:	  players[i] = -9999;
        -:  480:	}
        -:  481:      else
        -:  482:	{
    #####:  483:	  players[i] = scoreFor (i, state);
        -:  484:	}
        -:  485:    }
        -:  486:
        -:  487:  //find highest score
    #####:  488:  j = 0;
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if (players[i] > players[j])
        -:  492:	{
    #####:  493:	  j = i;
        -:  494:	}
        -:  495:    }
    #####:  496:  highScore = players[j];
        -:  497:
        -:  498:  //add 1 to players who had less turns
    #####:  499:  currentPlayer = whoseTurn(state);
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] == highScore && i > currentPlayer )
        -:  503:	{
    #####:  504:	  players[i]++;
        -:  505:	}
        -:  506:    }
        -:  507:
        -:  508:  //find new highest score
    #####:  509:  j = 0;
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] > players[j] )
        -:  513:	{
    #####:  514:	  j = i;
        -:  515:	}
        -:  516:    }
    #####:  517:  highScore = players[j];
        -:  518:
        -:  519:  //set winners in array to 1 and rest to 0
    #####:  520:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  521:    {
    #####:  522:      if ( players[i] == highScore )
        -:  523:	{
    #####:  524:	  players[i] = 1;
        -:  525:	}
        -:  526:      else
        -:  527:	{
    #####:  528:	  players[i] = 0;
        -:  529:	}
        -:  530:    }
        -:  531:
    #####:  532:  return 0;
        -:  533:}
        -:  534:
    75525:  535:int drawCard(int player, struct gameState *state)
        -:  536:{	int count;
        -:  537:  int deckCounter;
    75525:  538:  if (state->deckCount[player] <= 0) {//Deck is empty
        -:  539:    
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
    12517:  543:    for (i = 0; i < state->discardCount[player]; i++) {
    12466:  544:      state->deck[player][i] = state->discard[player][i];
    12466:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
       51:  548:    state->deckCount[player] = state->discardCount[player];
       51:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shuffle the deck
       51:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  553:   
       51:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:    
       51:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
       51:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:    
       51:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:    
       51:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
       51:  569:    if (deckCounter == 0)
    #####:  570:      return -1;
        -:  571:
       51:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       51:  573:    state->deckCount[player]--;
       51:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
    75474:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
    75474:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
    75474:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
    75474:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    75474:  586:    state->deckCount[player]--;
    75474:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
    75525:  590:  return 0;
        -:  591:}
        -:  592:
    #####:  593:int getCost(int cardNumber)
        -:  594:{
    #####:  595:  switch( cardNumber ) 
        -:  596:    {
        -:  597:    case curse:
    #####:  598:      return 0;
        -:  599:    case estate:
    #####:  600:      return 2;
        -:  601:    case duchy:
    #####:  602:      return 5;
        -:  603:    case province:
    #####:  604:      return 8;
        -:  605:    case copper:
    #####:  606:      return 0;
        -:  607:    case silver:
    #####:  608:      return 3;
        -:  609:    case gold:
    #####:  610:      return 6;
        -:  611:    case adventurer:
    #####:  612:      return 6;
        -:  613:    case council_room:
    #####:  614:      return 5;
        -:  615:    case feast:
    #####:  616:      return 4;
        -:  617:    case gardens:
    #####:  618:      return 4;
        -:  619:    case mine:
    #####:  620:      return 5;
        -:  621:    case remodel:
    #####:  622:      return 4;
        -:  623:    case smithy:
    #####:  624:      return 4;
        -:  625:    case village:
    #####:  626:      return 3;
        -:  627:    case baron:
    #####:  628:      return 4;
        -:  629:    case great_hall:
    #####:  630:      return 3;
        -:  631:    case minion:
    #####:  632:      return 5;
        -:  633:    case steward:
    #####:  634:      return 3;
        -:  635:    case tribute:
    #####:  636:      return 5;
        -:  637:    case ambassador:
    #####:  638:      return 3;
        -:  639:    case cutpurse:
    #####:  640:      return 4;
        -:  641:    case embargo: 
    #####:  642:      return 2;
        -:  643:    case outpost:
    #####:  644:      return 5;
        -:  645:    case salvager:
    #####:  646:      return 4;
        -:  647:    case sea_hag:
    #####:  648:      return 4;
        -:  649:    case treasure_map:
    #####:  650:      return 4;
        -:  651:    }
        -:  652:	
    #####:  653:  return -1;
        -:  654:}
        -:  655:
     5000:  656:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  657:{
        -:  658:  int i;
        -:  659:  int j;
        -:  660:  int k;
        -:  661:  int x;
        -:  662:  int index;
     5000:  663:  int currentPlayer = whoseTurn(state);
     5000:  664:  int nextPlayer = currentPlayer + 1;
        -:  665:  int temphand[MAX_HAND];
     5000:  666:  int tributeRevealedCards[2] = {-1, -1};
        -:  667:  
        -:  668:  int cardDrawn;
     5000:  669:  int z = 0;// Declare counter for temp hand
     5000:  670:  if (nextPlayer > (state->numPlayers - 1)){
     3050:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:  
        -:  674:	
        -:  675:  //uses switch to select card and perform actions
     5000:  676:  switch( card ) 
        -:  677:    {
        -:  678:    case adventurer:
    #####:  679:      adventurerCard(state, currentPlayer);
    #####:  680:		  break;
        -:  681:    case council_room:
        -:  682:      //+4 Cards
    #####:  683:      for (i = 0; i < 4; i++)
        -:  684:	{
    #####:  685:	  drawCard(currentPlayer, state);
        -:  686:	}
        -:  687:			
        -:  688:      //+1 Buy
    #####:  689:      state->numBuys++;
        -:  690:			
        -:  691:      //Each other player draws a card
    #####:  692:      for (i = 0; i < state->numPlayers; i++)
        -:  693:	{
    #####:  694:	  if ( i != currentPlayer )
        -:  695:	    {
    #####:  696:	      drawCard(i, state);
        -:  697:	    }
        -:  698:	}
        -:  699:			
        -:  700:      //put played card in played card pile
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
        -:  702:			
    #####:  703:      return 0;
        -:  704:			
        -:  705:    case feast:
        -:  706:      //gain card with cost up to 5
        -:  707:      //Backup hand
    #####:  708:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  709:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:      }
        -:  712:      //Backup hand
        -:  713:
        -:  714:      //Update Coins for Buy
    #####:  715:      updateCoins(currentPlayer, state, 5);
    #####:  716:      x = 1;//Condition to loop on
    #####:  717:      while( x == 1) {//Buy one card
    #####:  718:	if (supplyCount(choice1, state) <= 0){
    #####:  719:	  if (DEBUG)
        -:  720:	    printf("None of that card left, sorry!\n");
        -:  721:
    #####:  722:	  if (DEBUG){
        -:  723:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:	  }
        -:  725:	}
    #####:  726:	else if (state->coins < getCost(choice1)){
    #####:  727:	  printf("That card is too expensive!\n");
        -:  728:
    #####:  729:	  if (DEBUG){
        -:  730:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  731:	  }
        -:  732:	}
        -:  733:	else{
        -:  734:
    #####:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
    #####:  739:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  740:	  x = 0;//No more buying cards
        -:  741:
    #####:  742:	  if (DEBUG){
        -:  743:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:	  }
        -:  745:
        -:  746:	}
        -:  747:      }     
        -:  748:
        -:  749:      //Reset Hand
    #####:  750:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  751:	state->hand[currentPlayer][i] = temphand[i];
    #####:  752:	temphand[i] = -1;
        -:  753:      }
        -:  754:      //Reset Hand
        -:  755:      			
    #####:  756:      return 0;
        -:  757:			
        -:  758:    case gardens:
    #####:  759:      return -1;
        -:  760:			
        -:  761:    case mine:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:		
    #####:  769:      if (choice2 > treasure_map || choice2 < curse)
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 2, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
        -:  792:	}
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case remodel:
    #####:  797:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  798:
    #####:  799:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  800:	{
    #####:  801:	  return -1;
        -:  802:	}
        -:  803:
    #####:  804:      gainCard(choice2, state, 0, currentPlayer);
        -:  805:
        -:  806:      //discard card from hand
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
        -:  809:      //discard trashed card
    #####:  810:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  811:	{
    #####:  812:	  if (state->hand[currentPlayer][i] == j)
        -:  813:	    {
    #####:  814:	      discardCard(i, currentPlayer, state, 0);			
    #####:  815:	      break;
        -:  816:	    }
        -:  817:	}
        -:  818:
        -:  819:
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case smithy:
        -:  823:      //+3 Cards
    #####:  824:      smithyCard(state, currentPlayer, handPos);
    #####:  825:		  break;
        -:  826:    case village:
        -:  827:      //+1 Card, +2 actions
     5000:  828:      villageCard(state, currentPlayer, handPos);
     5000:  829:      break;
        -:  830:		
        -:  831:    case baron:
    #####:  832:      state->numBuys++;//Increase buys by 1!
    #####:  833:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  834:	int p = 0;//Iterator for hand!
    #####:  835:	int card_not_discarded = 1;//Flag for discard set!
    #####:  836:	while(card_not_discarded){
    #####:  837:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  838:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  839:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  840:	    state->discardCount[currentPlayer]++;
    #####:  841:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  842:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  843:	    }
    #####:  844:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  845:	    state->handCount[currentPlayer]--;
    #####:  846:	    card_not_discarded = 0;//Exit the loop
        -:  847:	  }
    #####:  848:	  else if (p > state->handCount[currentPlayer]){
    #####:  849:	    if(DEBUG) {
        -:  850:	      printf("No estate cards in your hand, invalid choice\n");
        -:  851:	      printf("Must gain an estate if there are any\n");
        -:  852:	    }
    #####:  853:	    if (supplyCount(estate, state) > 0){
    #####:  854:	      gainCard(estate, state, 0, currentPlayer);
    #####:  855:	      state->supplyCount[estate]--;//Decrement estates
    #####:  856:	      if (supplyCount(estate, state) == 0){
    #####:  857:		isGameOver(state);
        -:  858:	      }
        -:  859:	    }
    #####:  860:	    card_not_discarded = 0;//Exit the loop
        -:  861:	  }
        -:  862:			    
        -:  863:	  else{
    #####:  864:	    p++;//Next card
        -:  865:	  }
        -:  866:	}
        -:  867:      }
        -:  868:			    
        -:  869:      else{
    #####:  870:	if (supplyCount(estate, state) > 0){
    #####:  871:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  872:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  873:	  if (supplyCount(estate, state) == 0){
    #####:  874:	    isGameOver(state);
        -:  875:	  }
        -:  876:	}
        -:  877:      }
        -:  878:	    
        -:  879:      
    #####:  880:      return 0;
        -:  881:		
        -:  882:    case great_hall:
    #####:  883:      greatHallCard(state, currentPlayer, handPos);
    #####:  884:      break;
        -:  885:		
        -:  886:    case minion:
        -:  887:      //+1 action
    #####:  888:      state->numActions++;
        -:  889:			
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:			
    #####:  893:      if (choice1)		//+2 coins
        -:  894:	{
    #####:  895:	  state->coins = state->coins + 2;
        -:  896:	}
        -:  897:			
    #####:  898:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  899:	{
        -:  900:	  //discard hand
    #####:  901:	  while(numHandCards(state) > 0)
        -:  902:	    {
    #####:  903:	      discardCard(handPos, currentPlayer, state, 0);
        -:  904:	    }
        -:  905:				
        -:  906:	  //draw 4
    #####:  907:	  for (i = 0; i < 4; i++)
        -:  908:	    {
    #####:  909:	      drawCard(currentPlayer, state);
        -:  910:	    }
        -:  911:				
        -:  912:	  //other players discard hand and redraw if hand size > 4
    #####:  913:	  for (i = 0; i < state->numPlayers; i++)
        -:  914:	    {
    #####:  915:	      if (i != currentPlayer)
        -:  916:		{
    #####:  917:		  if ( state->handCount[i] > 4 )
        -:  918:		    {
        -:  919:		      //discard hand
    #####:  920:		      while( state->handCount[i] > 0 )
        -:  921:			{
    #####:  922:			  discardCard(handPos, i, state, 0);
        -:  923:			}
        -:  924:							
        -:  925:		      //draw 4
    #####:  926:		      for (j = 0; j < 4; j++)
        -:  927:			{
    #####:  928:			  drawCard(i, state);
        -:  929:			}
        -:  930:		    }
        -:  931:		}
        -:  932:	    }
        -:  933:				
        -:  934:	}
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case steward:
    #####:  938:      if (choice1 == 1)
        -:  939:	{
        -:  940:	  //+2 cards
    #####:  941:	  drawCard(currentPlayer, state);
    #####:  942:	  drawCard(currentPlayer, state);
        -:  943:	}
    #####:  944:      else if (choice1 == 2)
        -:  945:	{
        -:  946:	  //+2 coins
    #####:  947:	  state->coins = state->coins + 2;
        -:  948:	}
        -:  949:      else
        -:  950:	{
        -:  951:	  //trash 2 cards in hand
    #####:  952:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  953:	  discardCard(choice3, currentPlayer, state, 1);
        -:  954:	}
        -:  955:			
        -:  956:      //discard card from hand
    #####:  957:      discardCard(handPos, currentPlayer, state, 0);
    #####:  958:      return 0;
        -:  959:		
        -:  960:    case tribute:
    #####:  961:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  962:	if (state->deckCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:	  state->deckCount[nextPlayer]--;
        -:  965:	}
    #####:  966:	else if (state->discardCount[nextPlayer] > 0){
    #####:  967:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  968:	  state->discardCount[nextPlayer]--;
        -:  969:	}
        -:  970:	else{
        -:  971:	  //No Card to Reveal
    #####:  972:	  if (DEBUG){
        -:  973:	    printf("No cards to reveal\n");
        -:  974:	  }
        -:  975:	}
        -:  976:      }
        -:  977:	    
        -:  978:      else{
    #####:  979:	if (state->deckCount[nextPlayer] == 0){
    #####:  980:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  981:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  982:	    state->deckCount[nextPlayer]++;
    #####:  983:	    state->discard[nextPlayer][i] = -1;
    #####:  984:	    state->discardCount[nextPlayer]--;
        -:  985:	  }
        -:  986:			    
    #####:  987:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  988:	} 
    #####:  989:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  990:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  991:	state->deckCount[nextPlayer]--;
    #####:  992:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  994:	state->deckCount[nextPlayer]--;
        -:  995:      }    
        -:  996:		       
    #####:  997:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  998:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  999:	state->playedCardCount++;
    #####: 1000:	tributeRevealedCards[1] = -1;
        -: 1001:      }
        -: 1002:
    #####: 1003:      for (i = 0; i <= 2; i ++){
    #####: 1004:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1005:	  state->coins += 2;
        -: 1006:	}
        -: 1007:		    
    #####: 1008:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
        -: 1012:	else{//Action Card
    #####: 1013:	  state->numActions = state->numActions + 2;
        -: 1014:	}
        -: 1015:      }
        -: 1016:	    
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case ambassador:
    #####: 1020:      j = 0;		//used to check if player has enough cards to discard
        -: 1021:
    #####: 1022:      if (choice2 > 2 || choice2 < 0)
        -: 1023:	{
    #####: 1024:	  return -1;				
        -: 1025:	}
        -: 1026:
    #####: 1027:      if (choice1 == handPos)
        -: 1028:	{
    #####: 1029:	  return -1;
        -: 1030:	}
        -: 1031:
    #####: 1032:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1033:	{
    #####: 1034:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1035:	    {
    #####: 1036:	      j++;
        -: 1037:	    }
        -: 1038:	}
    #####: 1039:      if (j < choice2)
        -: 1040:	{
    #####: 1041:	  return -1;				
        -: 1042:	}
        -: 1043:
    #####: 1044:      if (DEBUG) 
        -: 1045:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1046:
        -: 1047:      //increase supply count for choosen card by amount being discarded
    #####: 1048:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1049:			
        -: 1050:      //each other player gains a copy of revealed card
    #####: 1051:      for (i = 0; i < state->numPlayers; i++)
        -: 1052:	{
    #####: 1053:	  if (i != currentPlayer)
        -: 1054:	    {
    #####: 1055:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1056:	    }
        -: 1057:	}
        -: 1058:
        -: 1059:      //discard played card from hand
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1061:
        -: 1062:      //trash copies of cards returned to supply
    #####: 1063:      for (j = 0; j < choice2; j++)
        -: 1064:	{
    #####: 1065:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1066:	    {
    #####: 1067:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1068:		{
    #####: 1069:		  discardCard(i, currentPlayer, state, 1);
    #####: 1070:		  break;
        -: 1071:		}
        -: 1072:	    }
        -: 1073:	}			
        -: 1074:
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case cutpurse:
    #####: 1078:      cutpurseCard(state, currentPlayer, handPos);
    #####: 1079:      break;
        -: 1080:
        -: 1081:
        -: 1082:
        -: 1083:		
        -: 1084:    case embargo: 
        -: 1085:      //+2 Coins
    #####: 1086:      state->coins = state->coins + 2;
        -: 1087:			
        -: 1088:      //see if selected pile is in play
    #####: 1089:      if ( state->supplyCount[choice1] == -1 )
        -: 1090:	{
    #####: 1091:	  return -1;
        -: 1092:	}
        -: 1093:			
        -: 1094:      //add embargo token to selected supply pile
    #####: 1095:      state->embargoTokens[choice1]++;
        -: 1096:			
        -: 1097:      //trash card
    #####: 1098:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1099:      return 0;
        -: 1100:		
        -: 1101:    case outpost:
        -: 1102:      //set outpost flag
    #####: 1103:      state->outpostPlayed++;
        -: 1104:			
        -: 1105:      //discard card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case salvager:
        -: 1110:      //+1 buy
    #####: 1111:      state->numBuys++;
        -: 1112:			
    #####: 1113:      if (choice1)
        -: 1114:	{
        -: 1115:	  //gain coins equal to trashed card
    #####: 1116:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1117:	  //trash card
    #####: 1118:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1119:	}
        -: 1120:			
        -: 1121:      //discard card
    #####: 1122:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1123:      return 0;
        -: 1124:		
        -: 1125:    case sea_hag:
    #####: 1126:      for (i = 0; i < state->numPlayers; i++){
    #####: 1127:	if (i != currentPlayer){
    #####: 1128:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1129:	  state->discardCount[i]++;
    #####: 1130:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1131:	}
        -: 1132:      }
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case treasure_map:
        -: 1136:      //search hand for another treasure_map
    #####: 1137:      index = -1;
    #####: 1138:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1139:	{
    #####: 1140:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1141:	    {
    #####: 1142:	      index = i;
    #####: 1143:	      break;
        -: 1144:	    }
        -: 1145:	}
    #####: 1146:      if (index > -1)
        -: 1147:	{
        -: 1148:	  //trash both treasure cards
    #####: 1149:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1150:	  discardCard(index, currentPlayer, state, 1);
        -: 1151:
        -: 1152:	  //gain 4 Gold cards
    #####: 1153:	  for (i = 0; i < 4; i++)
        -: 1154:	    {
    #####: 1155:	      gainCard(gold, state, 1, currentPlayer);
        -: 1156:	    }
        -: 1157:				
        -: 1158:	  //return success
    #####: 1159:	  return 1;
        -: 1160:	}
        -: 1161:			
        -: 1162:      //no second treasure_map found in hand
    #####: 1163:      return -1;
        -: 1164:    }
        -: 1165:	
     5000: 1166:  return -1;
        -: 1167:}
        -: 1168:
     5000: 1169:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1170:{
     5000: 1171:  if (trashFlag < 1) //Card is not trashed
        -: 1172:    {
        -: 1173:      //Add card to played pile
     5000: 1174:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5000: 1175:      state->playedCardCount++;
        -: 1176:    }
        -: 1177:	
        -: 1178:  //Set played card to -1
     5000: 1179:  state->hand[currentPlayer][handPos] = -1;
        -: 1180:	
        -: 1181:  //Remove discarded card from player's hand.
        -: 1182:
        -: 1183:  //Check if the position of the discarded card is at the end of the array. 
     5000: 1184:  if ( handPos == (state->handCount[currentPlayer] - 1) )
        -: 1185:    {
        -: 1186:      //Decrement array size.
    #####: 1187:      state->handCount[currentPlayer]--;
        -: 1188:    }
     5000: 1189:  else if ( state->handCount[currentPlayer] == 1 ) //Check if handCount == 1.
        -: 1190:    {
        -: 1191:      //Decrement array size.
    #####: 1192:      state->handCount[currentPlayer]--;
        -: 1193:    }
        -: 1194:  else 	
        -: 1195:    {
        -: 1196:      //replace discarded card with last card in hand
    10000: 1197:      state->hand[currentPlayer][handPos] = 
     5000: 1198:        state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1199:      //set last card to -1
     5000: 1200:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1201:      //reduce number of cards in hand
     5000: 1202:      state->handCount[currentPlayer]--;
        -: 1203:    }
     5000: 1204:  return 0;
        -: 1205:}
        -: 1206:
    #####: 1207:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1208:{
        -: 1209:  //Note: supplyPos is enum of choosen card
        -: 1210:	
        -: 1211:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1212:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1213:    {
    #####: 1214:      return -1;
        -: 1215:    }
        -: 1216:	
        -: 1217:  //added card for [whoseTurn] current player:
        -: 1218:  // toFlag = 0 : add to discard
        -: 1219:  // toFlag = 1 : add to deck
        -: 1220:  // toFlag = 2 : add to hand
        -: 1221:
    #####: 1222:  if (toFlag == 1)
        -: 1223:    {
    #####: 1224:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1225:      state->deckCount[player]++;
        -: 1226:    }
    #####: 1227:  else if (toFlag == 2)
        -: 1228:    {
    #####: 1229:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1230:      state->handCount[player]++;
        -: 1231:    }
        -: 1232:  else
        -: 1233:    {
    #####: 1234:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1235:      state->discardCount[player]++;
        -: 1236:    }
        -: 1237:	
        -: 1238:  //decrease number in supply pile
    #####: 1239:  state->supplyCount[supplyPos]--;
        -: 1240:	 
    #####: 1241:  return 0;
        -: 1242:}
        -: 1243:
    10105: 1244:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1245:{
        -: 1246:  int i;
        -: 1247:	
        -: 1248:  //reset coin count
    10105: 1249:  state->coins = 0;
        -: 1250:
        -: 1251:  //add coins for each Treasure card in player's hand
    60630: 1252:  for (i = 0; i < state->handCount[player]; i++)
        -: 1253:  {
    50525: 1254:    if (state->hand[player][i] == copper)
        -: 1255:  	{
    40420: 1256:  	  state->coins += 1;
        -: 1257:  	}
    10105: 1258:    else if (state->hand[player][i] == silver)
        -: 1259:  	{
    #####: 1260:  	  state->coins += 2;
        -: 1261:  	}
    10105: 1262:    else if (state->hand[player][i] == gold)
        -: 1263:  	{
    #####: 1264:  	  state->coins += 3;
        -: 1265:  	}	
        -: 1266:  }	
        -: 1267:
        -: 1268:  //add bonus
    10105: 1269:  state->coins += bonus;
        -: 1270:
    10105: 1271:  return 0;
        -: 1272:}
        -: 1273:/**
        -: 1274: * Call drawCard and check type of card drawn. Card remains in hand if Treasure,
        -: 1275: * otherwise it is added to a temporary array. Repeat until 2 treasure
        -: 1276: * cards have been drawn, then return cards in temp array to discard. 
        -: 1277: * @param  state         
        -: 1278: * @param  currentPlayer 
        -: 1279: * @return              
        -: 1280: */
    10000: 1281:int adventurerCard(struct gameState *state, int currentPlayer) {
    10000: 1282:  int drawntreasure = 0;
    10000: 1283:  int z = 0;// Declare counter for temp hand
        -: 1284:  int cardDrawn;
        -: 1285:  int temphand[MAX_HAND];
    40000: 1286:  while(drawntreasure < 2) {
        -: 1287:    //if the deck is empty we need to shuffle discard and add to deck
    20000: 1288:    if (state->deckCount[currentPlayer] < 1){
       39: 1289:      shuffle(currentPlayer, state);
        -: 1290:    }
    20000: 1291:    drawCard(currentPlayer, state);
        -: 1292:    //cardDrawn = top card of hand = most recently drawn card.
        -: 1293:    
    20000: 1294:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1295:
        -: 1296:    //If cardDrawn is treasure, increment drawntreasure.
    20000: 1297:    if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
    20000: 1298:      drawntreasure++;
        -: 1299:
        -: 1300:    else{ //cardDrawn != treasure card.
        -: 1301:      temphand[z] = cardDrawn; //add non-treasure card to temphand.
        -: 1302:
        -: 1303:      //Decrement handCount (remove most recently drawn card).
        -: 1304:      state->handCount[currentPlayer]--; 
        -: 1305:      z++;
        -: 1306:    }
        -: 1307:  }
        -: 1308:  //Discard temp hand
    20000: 1309:  while(z > 0){
    #####: 1310:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    #####: 1311:    z--;
        -: 1312:  }
    10000: 1313:  return 0;
        -: 1314:}
        -: 1315:
        -: 1316:/**
        -: 1317: * Call drawCard 3 times, then call discardCard
        -: 1318: * @param  state         
        -: 1319: * @param  currentPlayer 
        -: 1320: * @param  handPos       card to discard
        -: 1321: */
    #####: 1322:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1323:  //+3 Cards
    #####: 1324:  int i = 0;
    #####: 1325:  for (i = 1; i < 3; i++)
        -: 1326:  {
    #####: 1327:    drawCard(currentPlayer, state);
        -: 1328:  }
        -: 1329:      
        -: 1330:  //discard card from hand
    #####: 1331:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1332:  return 0;
        -: 1333:}
        -: 1334:
     5000: 1335:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1336:  //+1 card
     5000: 1337:  drawCard(currentPlayer, state);
        -: 1338:      
        -: 1339:  //+2 Actions
     5000: 1340:  state->numActions += state->numActions + 2;
        -: 1341:      
        -: 1342:  //discard played card from hand
     5000: 1343:  discardCard(handPos, currentPlayer, state, 0);
     5000: 1344:  return 0;
        -: 1345:}
        -: 1346:
    #####: 1347:int greatHallCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1348:  //+1 Card
    #####: 1349:  drawCard(((currentPlayer > 0) ? (currentPlayer - 1) : currentPlayer), state);
        -: 1350:
        -: 1351:  //+1 Actions
    #####: 1352:  state->numActions++;
        -: 1353:
        -: 1354:  //discard card from hand
    #####: 1355:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1356:  return 0;
        -: 1357:}
        -: 1358:
    #####: 1359:int cutpurseCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1360:  int i, j, k;
    #####: 1361:  updateCoins(currentPlayer, state, 2);
    #####: 1362:  for (i = 0; i < state->numPlayers; i++) {
    #####: 1363:    if (i != currentPlayer) {
    #####: 1364:      for (j = 0; j <= state->handCount[i]; j++) {
    #####: 1365:        if (j == state->handCount[i]) {
    #####: 1366:          for (k = 0; k < state->handCount[i]; k++) {
    #####: 1367:            if (DEBUG)
        -: 1368:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1369:          } 
    #####: 1370:          break;
        -: 1371:        }
    #####: 1372:        if (state->hand[i][j] == copper) {
    #####: 1373:          discardCard(j, i, state, 0);
    #####: 1374:          break;
        -: 1375:        }
        -: 1376:      } 
        -: 1377:    } 
        -: 1378:  }       
        -: 1379:  //discard played card from hand
    #####: 1380:  discardCard(handPos, currentPlayer, state, 0);      
    #####: 1381:  return 0;
        -: 1382:}
        -: 1383://end of dominion.c
        -: 1384:
