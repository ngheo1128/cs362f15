Bug Report  1- CS362 Final Project

==================================


Title:    URL_Validator - faulty port no. check


Class:	Incorrect validation



Date:          12/1/2015 

Reported By:   Tony Huynh
Email:      huynhton@oregonstate.edu





Product:   UrlValidator         Version:

Platform:  Eclipse IDE          Version:

Browser:   N/A                  Version:

URL:       N/A 



Is it reproducible: Yes




Description

===========

When testing the URL Validator with a variety of valid inputs, it was discovered that the maximum port integer of 65535 returned an invalid URL.  





Steps to Produce/Reproduce

--------------------------

Inputting any positive integer that is at least 4 digits long will cause URL Port No. Validator to fail.  For example, the following digits, which should be valid, will not pass the validation: 1000, 1234, 5000, 0101, 0090





Expected Results

----------------

PASS - Any positive integer that is 65535 or below should pass the validation





Actual Results

--------------

FAIL - Inputting a port no. with more than 3 digits will fail the URL validation.





Workarounds

-----------

Port numbers with a maximum of 3 digits will have to be used until the bug is fixed.





Attachments

-----------

UrlValidatorTest.java





Other Information

-----------------

In trying to localize the cause of the bug, I found that the UrlValidatorTest first goes off to UrlValidator.java when testing to see if a URL is valid. In the UrlValidator, it then jumps to DomainValidator.java, and operates mostly on lines 135-143.  RegexValidator.java then gets opened during some of DomainValidator's run. RegexValidator has lines 149-163 called upon.  As another part of UrlValidator, it calls upon InetAddressValidator, where lines 75 and 80-94 are used.  I suspect that in one of the four files I just discussed, that is where the error occurred, but I will keep an open mind on different possibilities for the bug. 
From debugging, I naturally used some of Agan's principle. Primarily, I followed rule 2, which was to make the code fail.  A few other things that helped me make the code fail was the idea of divide and conquer, change one thing at a time, and keeping an audit trail.  I was tasked with making the code fail, so I when I found a URL that should have passed but didn't, I tried to localize in the string where the error occurred.  I had to change one thing at a time to determine the problem, and once I did, I kept note of where I found the bug, how I found it, and kept track of how to reproduce the bug.


To reiterate, I believe I have localized the bug to be in either one of these files:

UrlValidator.java

DomainValidator.java	135-143

RegexValidator.java	149-163

InetAddressValidator	75, 80-94





Our team work communicated primarily through e-mail.  We had a few Google hangouts in order to get as much voice/visual communication as possible.  Two of us were on the OSU campus, so we met up physically to video chat with the other who is in Portland.  We divided work by partition type.  There was manual testing, random testing, and code-based testing.  