        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <string.h>
        -:    5:#include "rngs.h"
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:
function main called 1 returned 100% blocks executed 82%
        1:    9:int main(int argc, char *argv[]){
        1:   10:    int i = 0;
        1:   11:    PutSeed(-1);
call    0 returned 100%
        1:   12:    printf("cardtest1.c\n");
call    0 returned 100%
        -:   13:    struct gameState state;
        -:   14:    struct gameState stateCopy;
        -:   15:
        -:   16:    /* clear state */
        1:   17:    memset(&state, 0, sizeof(struct gameState));
        -:   18:    
        -:   19:    /* copy of gameState for comparison */
        1:   20:    stateCopy = state;
        -:   21:
        -:   22:    /*Init deck with 3 coin cards and 3 other cards.*/
        -:   23:
        1:   24:    state.deck[0][0] = silver;
        1:   25:    state.deck[0][1] = province;
        1:   26:    state.deck[0][2] = gold;
        1:   27:    state.deck[0][3] = duchy;
        -:   28:
        1:   29:    state.deckCount[0] = 4;
        1:   30:    state.discardCount[0] = 0;
        1:   31:    state.handCount[0] = 0;
        -:   32:
        1:   33:    adventurerCard(&state, 0);
call    0 returned 100%
        -:   34:
        2:   35:    printf("adventurerCard(): %s empty hand case\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   36:        (state.handCount[0] == 2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   37:        state.discardCount[0] == 2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   38:        state.deckCount[0] == 0) ? "PASS" : "FAIL");
        -:   39:    
        -:   40:    /* clear game state */
        1:   41:    memset(&state, 0, sizeof(struct gameState));
        -:   42:    
        1:   43:    state.deck[0][0] = estate;
        1:   44:    state.deck[0][1] = province;
        1:   45:    state.deck[0][2] = gold;
        1:   46:    state.deck[0][3] = duchy;
        -:   47:
        1:   48:    state.deckCount[0] = 4;
        1:   49:    state.discardCount[0] = 0;
        1:   50:    state.handCount[0] = 0;
        -:   51:
        1:   52:    adventurerCard(&state, 0);
call    0 returned 100%
        -:   53:    
        2:   54:    printf("adventurerCard(): %s not enough Treasure case\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   55:        (state.handCount[0] == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   56:        state.discardCount[0] == 3 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   57:        state.deckCount[0] == 0) ? "PASS" : "FAIL");
        -:   58:
        -:   59:    /* clear game state */
        1:   60:    memset(&state, 0, sizeof(struct gameState));
        -:   61:
      501:   62:    for (i = 0; i < MAX_DECK; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:   63:        state.deck[0][i] = floor(Random() * (treasure_map + 1));
call    0 returned 100%
        -:   64:    }
        -:   65:
        1:   66:    state.deckCount[0] = MAX_DECK;
        1:   67:    state.discardCount[0] = 0;
        1:   68:    state.handCount[0] = 0;
        -:   69:
        1:   70:    adventurerCard(&state, 0);
call    0 returned 100%
        -:   71:
        2:   72:    printf("adventurerCard(): %s full deck case\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   73:        (state.handCount[0] == 2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   74:        (state.discardCount[0] + state.deckCount[0]) == MAX_DECK - 2) ? "PASS" : "FAIL");
        -:   75:
        -:   76:    /* Cannot test empty deck state due to open bug. */
        -:   77:    /* clear game state */
        1:   78:    memset(&state, 0, sizeof(struct gameState));
        -:   79:    
        1:   80:    state.playedCards[0] = copper;
        1:   81:    state.playedCards[1] = province;
        1:   82:    state.playedCards[2] = gold;
        1:   83:    state.playedCards[3] = duchy;
        -:   84:
        1:   85:    state.deckCount[0] = 0;
        1:   86:    state.discardCount[0] = 0;
        1:   87:    state.handCount[0] = 0;
        1:   88:    state.playedCardCount = 4;
        -:   89:
        1:   90:    adventurerCard(&state, 0);
call    0 returned 100%
        -:   91:    
        1:   92:    printf("adventurerCard(): %s empty deck case\n", 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        1:   93:        (state.handCount[0] == 2 &&
branch  0 never executed
branch  1 never executed
    #####:   94:        state.discardCount[0] == 2 &&
branch  0 never executed
branch  1 never executed
    #####:   95:        state.deckCount[0] == 0) ? "PASS" : "FAIL");
        -:   96:    // printf("deckCount: %i handCount: %i discardCount: %i\n", state.deckCount[0],
        -:   97:    //     state.handCount[0], state.discardCount[0]);
        -:   98:
        -:   99:    /* clear verified changes made by adventurerCard() */
        1:  100:    memset(&state.handCount[0], 0, sizeof(int));
        1:  101:    memset(&state.deckCount[0], 0, sizeof(int)); 
        1:  102:    memset(&state.discardCount[0], 0, sizeof(int));
        1:  103:    memset(&state.playedCardCount, 0, sizeof(int)); 
        1:  104:    memset(&state.hand[0], 0, sizeof(int) * MAX_HAND); 
        1:  105:    memset(&state.deck[0], 0, sizeof(int) * MAX_DECK);
        1:  106:    memset(&state.discard[0], 0, sizeof(int) * MAX_DECK);
        1:  107:    memset(&state.playedCards, 0, sizeof(int) * MAX_DECK);
        -:  108:
        -:  109:    /* verify that no erroneous changes are made to game state */
        1:  110:    printf("adventurerCard(): %s changes to correct player only\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:  111:        (memcmp(&state, &stateCopy, sizeof(struct gameState)) == 0) 
        -:  112:        ? "PASS" : "FAIL");
        -:  113:
        1:  114:    return 0;
        -:  115:}
