        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <string.h>
        -:    5:#include "rngs.h"
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:
function main called 1 returned 100% blocks executed 89%
        1:    9:int main(int argc, char *argv[]){
        1:   10:    PutSeed(-1);
call    0 returned 100%
        1:   11:    printf("cardtest3.c\n");
call    0 returned 100%
        -:   12:    struct gameState state;
        -:   13:    struct gameState stateCopy;
        -:   14:
        -:   15:    /* clear game state */
        1:   16:    memset(&state, 0, sizeof(struct gameState));
        -:   17:    
        -:   18:    /* copy of gameState for comparison */
        1:   19:    stateCopy = state;
        -:   20:    
        -:   21:    /*Init deck with 4 cards.*/
        -:   22:
        1:   23:    state.deck[0][0] = silver;
        1:   24:    state.deck[0][1] = province;
        1:   25:    state.deck[0][2] = gold;
        1:   26:    state.deck[0][3] = duchy;
        -:   27:
        1:   28:    state.hand[0][0] = great_hall;
        1:   29:    state.deckCount[0] = 4;
        1:   30:    state.discardCount[0] = 0;
        1:   31:    state.handCount[0] = 1;
        1:   32:    state.numActions = 0;
        1:   33:    state.playedCardCount = 0;
        -:   34:
        1:   35:    greatHallCard(&state, 0, 0);
call    0 returned 100%
        -:   36:
        1:   37:    printf("greatHallCard(): %s empty hand (except Great Hall card) case\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   38:        (state.handCount[0] == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   39:        state.playedCardCount == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   40:        state.deckCount[0] == 3 &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:   41:        state.numActions == 1) ? "PASS" : "FAIL");
        -:   42:
        -:   43:    /* clear game state */
        1:   44:    memset(&state, 0, sizeof(struct gameState));
        -:   45:
        -:   46:    /*Init deck with 4 cards.*/
        -:   47:
        1:   48:    state.deck[0][0] = silver;
        1:   49:    state.deck[0][1] = province;
        1:   50:    state.deck[0][2] = gold;
        1:   51:    state.deck[0][3] = duchy;
        -:   52:
        1:   53:    state.hand[0][0] = great_hall;
        1:   54:    state.handCount[0] = 1;
        1:   55:    state.deckCount[0] = 0;
        1:   56:    state.discardCount[0] = 0;
        1:   57:    state.numActions = 0;
        1:   58:    state.playedCardCount = 0;
        1:   59:    greatHallCard(&state, 0, 0);
call    0 returned 100%
        -:   60:
        1:   61:    printf("greatHallCard(): %s empty deck case\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   62:    (state.handCount[0] == 0 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   63:    state.playedCardCount == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   64:    state.deckCount[0] == 0 &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:   65:    state.numActions == 1) ? "PASS" : "FAIL");
        -:   66:
        -:   67:    /* clear game state */
        1:   68:    memset(&state, 0, sizeof(struct gameState));
        -:   69:
        -:   70:    /*Init deck with 4 cards.*/
        -:   71:
        1:   72:    state.deck[0][0] = silver;
        1:   73:    state.deck[0][1] = province;
        1:   74:    state.deck[0][2] = gold;
        1:   75:    state.deck[0][3] = duchy;
        -:   76:
        1:   77:    state.hand[0][0] = great_hall;
        1:   78:    state.hand[0][1] = great_hall;
        1:   79:    state.deckCount[0] = 4;
        1:   80:    state.discardCount[0] = 0;
        1:   81:    state.handCount[0] = 2;
        1:   82:    state.numActions = 0;
        1:   83:    state.playedCardCount = 0;
        -:   84:
        1:   85:    greatHallCard(&state, 0, 0);
call    0 returned 100%
        1:   86:    greatHallCard(&state, 0, 1);
call    0 returned 100%
        -:   87:
        1:   88:    printf("greatHallCard(): %s 2 consecutive Great Hall cards case:\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   89:        (state.handCount[0] == 2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   90:        state.playedCardCount == 2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   91:        state.deckCount[0] == 2 &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:   92:        state.numActions == 2) ? "PASS" : "FAIL");
        -:   93:
        -:   94:    /* clear game state */
        1:   95:    memset(&state, 0, sizeof(struct gameState));
        -:   96:
        -:   97:    /*Set deckCount for player 1 to be 0*/
        -:   98:
        1:   99:    state.deck[1][0] = silver;
        1:  100:    state.deck[1][1] = province;
        1:  101:    state.deck[1][2] = gold;
        1:  102:    state.deck[1][3] = duchy;
        -:  103:
        1:  104:    state.hand[1][0] = great_hall;
        -:  105:
        1:  106:    state.handCount[1] = 1;
        1:  107:    state.deckCount[1] = 4;
        1:  108:    state.discardCount[1] = 0;
        1:  109:    state.numActions = 0;
        1:  110:    state.playedCardCount = 0;
        -:  111:
        1:  112:    greatHallCard(&state, 1, 0);
call    0 returned 100%
        -:  113:
        1:  114:    printf("greatHallCard(): %s normal deck case with second player\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:  115:    (state.handCount[1] == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:    state.playedCardCount == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  117:    state.deckCount[1] == 3 &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  118:    state.numActions == 1) ? "PASS" : "FAIL");
        1:  119:    return 0;
        -:  120:}
