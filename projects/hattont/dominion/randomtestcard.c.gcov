        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:int testSmithy(int *hand, int player, int handcount, int handpos, int *testPassed, int *testFailed);
        -:   11:int cardNum();
        -:   12:
function main called 3 returned 100% blocks executed 100%
        3:   13:int main (){
        -:   14:	
        3:   15:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        3:   16:	int i, j, count, smithyPlace, numCardsInHand, testPassed=0, testFailed=0, cardsInHand[11];
        3:   17:	int numOfRandTests=20;
        -:   18:	
      355:   19:	for (i=0; i<numOfRandTests;i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      352:   20:		count=0;
      352:   21:		smithyPlace=0;
      352:   22:		numCardsInHand = cardNum(); //set a random hand number between 1 and 11;
call    0 returned 100%
     2343:   23:		for(j=0; j<numCardsInHand; j++){
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
     1991:   24:			cardsInHand[j] = rand()%26; //select the cards to fill the hand at random
call    0 returned 100%
     1991:   25:			if(cardsInHand[j] == 13){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       67:   26:				count++;
       67:   27:				smithyPlace = j;
        -:   28:			}
        -:   29:		}
        -:   30:		//if the hand does not have an Smithy card then go back to the for loop.
      352:   31:		if(count == 0){
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      292:   32:			i--;
      292:   33:			continue;
        -:   34:		}
        -:   35:		
       60:   36:		printf("Test %d:\n",i+1);
call    0 returned 100%
       60:   37:		testSmithy(cardsInHand, 0, numCardsInHand, smithyPlace, &testPassed, &testFailed);
call    0 returned 100%
       60:   38:		printf("End Test %d\n\n",i+1);
call    0 returned 100%
        -:   39:	}
        -:   40:
        3:   41:	printf("Failed tests = %d\n", testFailed);
call    0 returned 100%
        3:   42:	printf("Passed tests = %d\n\n", testPassed);
call    0 returned 100%
        -:   43:	
        3:   44:	return 0;
        -:   45:}
        -:   46:
function testSmithy called 60 returned 100% blocks executed 74%
       60:   47:int testSmithy(int *hand, int player, int handCount, int handpos, int *testPassed, int *testFailed){
        -:   48:
       60:   49:	int failed=0, deckCount;
        -:   50:	struct gameState state;
       60:   51:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
       60:   52:	initializeGame(2,k,1000,&state);
call    0 returned 100%
        -:   53:	
       60:   54:	memcpy(state.hand[player], hand, sizeof(int)*handCount);
       60:   55:	state.handCount[player] = handCount;
        -:   56:	
       60:   57:	deckCount = state.deckCount[player];
        -:   58:	
       60:   59:	cardEffect(state.hand[player][handpos],0,0,0,&state,handpos,0);
call    0 returned 100%
        -:   60:	
        -:   61:	//Check that the hand count after the execution of Smithy is 2 greater than the starting hand count.
       60:   62:	if(state.handCount[player] == handCount+2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   63:		printf("\tPASSED - HandCount was increased by 2.\n");
call    0 never executed
        -:   64:	}
        -:   65:	else{
       60:   66:		printf("\tFAILED - HandCount was not increased by 2.\n");
call    0 returned 100%
       60:   67:		failed = 1;
        -:   68:	}
        -:   69:	
        -:   70:	//Check that the hand position of the Smithy card played has been removed.
       60:   71:	if(state.hand[0][handpos] == 13){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   72:		printf("\tFAILED - Smithy card was not removed.\n");
call    0 never executed
    #####:   73:		failed = 1;
        -:   74:	}
        -:   75:	else{
       60:   76:		printf("\tPASSED - Smithy card was removed.\n");
call    0 returned 100%
        -:   77:	}
        -:   78:	
        -:   79:	//Check that the number of cards in the deck has decreased by 3.
       60:   80:	if(deckCount == state.deckCount[player]+3){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   81:		printf("\tPASSED - Three cards were removed from the deck.\n");		
call    0 never executed
        -:   82:	}
        -:   83:	else{
       60:   84:		printf("\tFAILED - Exactly 3 cards were not removed from the deck.\n");
call    0 returned 100%
       60:   85:		failed=1;
        -:   86:	}
        -:   87:	
       60:   88:	if(failed == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       60:   89:		*testFailed = *testFailed+1;
        -:   90:	}
        -:   91:	else{
    #####:   92:		*testPassed = *testPassed+1;
        -:   93:	}
        -:   94:	
       60:   95:	return 0;
        -:   96:}
        -:   97:
function cardNum called 352 returned 100% blocks executed 100%
      352:   98:int cardNum(){
      352:   99:	int cards = rand()%10+1;
call    0 returned 100%
      352:  100:return cards;
        -:  101:}
