        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:24
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
 10448904:   10:int compare(const void* a, const void* b) {
 10448904:   11:  if (*(int*)a > *(int*)b)
  5356203:   12:    return 1;
  5092701:   13:  if (*(int*)a < *(int*)b)
  5092701:   14:    return -1;
    #####:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
    #####:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
    #####:   46:  SelectStream(1);
    #####:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
    #####:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
    #####:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
    #####:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
    #####:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
    #####:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
    #####:   75:  if (numPlayers == 2)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
    #####:   89:  if (numPlayers == 2)
        -:   90:    {
    #####:   91:      state->supplyCount[estate] = 8;
    #####:   92:      state->supplyCount[duchy] = 8;
    #####:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
    #####:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  104:  state->supplyCount[silver] = 40;
    #####:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    #####:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
    #####:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
    #####:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
    #####:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    #####:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
    #####:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
    #####:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    #####:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
    #####:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
    #####:  142:      state->deckCount[i] = 0;
    #####:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
    #####:  145:	  state->deck[i][j] = estate;
    #####:  146:	  state->deckCount[i]++;
        -:  147:	}
    #####:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
    #####:  150:	  state->deck[i][j] = copper;
    #####:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
    #####:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
    #####:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
    #####:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
    #####:  168:      state->handCount[i] = 0;
    #####:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
    #####:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
    #####:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
    #####:  184:  state->outpostPlayed = 0;
    #####:  185:  state->phase = 0;
    #####:  186:  state->numActions = 1;
    #####:  187:  state->numBuys = 1;
    #####:  188:  state->playedCardCount = 0;
    #####:  189:  state->whoseTurn = 0;
    #####:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  194:  for (it = 0; it < 5; it++){
    #####:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
    #####:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
    #####:  200:  return 0;
        -:  201:}
        -:  202:
     7440:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
     7440:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
     7440:  211:  if (state->deckCount[player] < 1)
     1446:  212:    return -1;
     5994:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
  1506579:  216:  while (state->deckCount[player] > 0) {
  1494591:  217:    card = floor(Random() * state->deckCount[player]);
  1494591:  218:    newDeck[newDeckPos] = state->deck[player][card];
  1494591:  219:    newDeckPos++;
124878690:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
123384099:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
  1494591:  223:    state->deckCount[player]--;
        -:  224:  }
  1500585:  225:  for (i = 0; i < newDeckPos; i++) {
  1494591:  226:    state->deck[player][i] = newDeck[i];
  1494591:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
     5994:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
       15:  322:int supplyCount(int card, struct gameState *state) {
       15:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
    #####:  348:int whoseTurn(struct gameState *state) {
    #####:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
       15:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
       15:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
        3:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
       12:  403:  j = 0;
      312:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
      300:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
       15:  408:	  j++;
        -:  409:	}
        -:  410:    }
       12:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
       12:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
      818:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
      818:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      720:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
      720:  540:    state->deckCount[player] = state->discardCount[player];
      720:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      720:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
      720:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      720:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
      720:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      720:  561:    if (deckCounter == 0)
      720:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       98:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       98:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       98:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       98:  578:    state->deckCount[player]--;
       98:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       98:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:  int temphand[MAX_HAND];
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  
        -:  660:  int cardDrawn;
    #####:  661:  int z = 0;// Declare counter for temp hand
    #####:  662:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  663:    nextPlayer = 0;
        -:  664:  }
        -:  665:  
        -:  666:	
        -:  667:  //uses switch to select card and perform actions
    #####:  668:  switch( card ) 
        -:  669:    {
        -:  670:    case adventurer:
    #####:  671:      adventurerCard(state, currentPlayer);
    #####:  672:		  break;
        -:  673:    case council_room:
    #####:  674:      council_roomCard(state, currentPlayer, state, handPos);
    #####:  675:	          break;
        -:  676:    case feast:
        -:  677:      //gain card with cost up to 5
        -:  678:      //Backup hand
    #####:  679:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:      }
        -:  683:      //Backup hand
        -:  684:
        -:  685:      //Update Coins for Buy
    #####:  686:      updateCoins(currentPlayer, state, 5);
    #####:  687:      x = 1;//Condition to loop on
    #####:  688:      while( x == 1) {//Buy one card
    #####:  689:	if (supplyCount(choice1, state) <= 0){
        -:  690:	  if (DEBUG)
        -:  691:	    printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:	  if (DEBUG){
        -:  694:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:	  }
        -:  696:	}
    #####:  697:	else if (state->coins < getCost(choice1)){
    #####:  698:	  printf("That card is too expensive!\n");
        -:  699:
        -:  700:	  if (DEBUG){
        -:  701:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:	  }
        -:  703:	}
        -:  704:	else{
        -:  705:
        -:  706:	  if (DEBUG){
        -:  707:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  708:	  }
        -:  709:
    #####:  710:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  711:	  x = 0;//No more buying cards
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:	  }
        -:  716:
        -:  717:	}
        -:  718:      }     
        -:  719:
        -:  720:      //Reset Hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  722:	state->hand[currentPlayer][i] = temphand[i];
    #####:  723:	temphand[i] = -1;
        -:  724:      }
        -:  725:      //Reset Hand
        -:  726:      			
    #####:  727:      return 0;
        -:  728:			
        -:  729:    case gardens:
    #####:  730:      return -1;
        -:  731:			
        -:  732:    case mine:
    #####:  733:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  734:
    #####:  735:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  736:	{
    #####:  737:	  return -1;
        -:  738:	}
        -:  739:		
    #####:  740:      if (choice2 > treasure_map || choice2 < curse)
        -:  741:	{
    #####:  742:	  return -1;
        -:  743:	}
        -:  744:
    #####:  745:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      gainCard(choice2, state, 2, currentPlayer);
        -:  751:
        -:  752:      //discard card from hand
    #####:  753:      discardCard(handPos, currentPlayer, state, 0);
        -:  754:
        -:  755:      //discard trashed card
    #####:  756:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  757:	{
    #####:  758:	  if (state->hand[currentPlayer][i] == j)
        -:  759:	    {
    #####:  760:	      discardCard(i, currentPlayer, state, 0);			
    #####:  761:	      break;
        -:  762:	    }
        -:  763:	}
        -:  764:			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case remodel:
    #####:  768:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  769:
    #####:  770:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      gainCard(choice2, state, 0, currentPlayer);
        -:  776:
        -:  777:      //discard card from hand
    #####:  778:      discardCard(handPos, currentPlayer, state, 0);
        -:  779:
        -:  780:      //discard trashed card
    #####:  781:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  782:	{
    #####:  783:	  if (state->hand[currentPlayer][i] == j)
        -:  784:	    {
    #####:  785:	      discardCard(i, currentPlayer, state, 0);			
    #####:  786:	      break;
        -:  787:	    }
        -:  788:	}
        -:  789:
        -:  790:
    #####:  791:      return 0;
        -:  792:		
        -:  793:    case smithy:
        -:  794:      //+3 Cards
    #####:  795:      smithyCard(state, currentPlayer, handPos);
    #####:  796:		  break;
        -:  797:    case village:
        -:  798:      //+1 Card, +2 actions
    #####:  799:      villageCard(state, currentPlayer, handPos);
    #####:  800:      break;
        -:  801:		
        -:  802:    case baron:
    #####:  803:      state->numBuys++;//Increase buys by 1!
    #####:  804:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  805:	int p = 0;//Iterator for hand!
    #####:  806:	int card_not_discarded = 1;//Flag for discard set!
    #####:  807:	while(card_not_discarded){
    #####:  808:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  809:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  810:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  811:	    state->discardCount[currentPlayer]++;
    #####:  812:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  813:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  814:	    }
    #####:  815:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  816:	    state->handCount[currentPlayer]--;
    #####:  817:	    card_not_discarded = 0;//Exit the loop
        -:  818:	  }
    #####:  819:	  else if (p > state->handCount[currentPlayer]){
        -:  820:	    if(DEBUG) {
        -:  821:	      printf("No estate cards in your hand, invalid choice\n");
        -:  822:	      printf("Must gain an estate if there are any\n");
        -:  823:	    }
    #####:  824:	    if (supplyCount(estate, state) > 0){
    #####:  825:	      gainCard(estate, state, 0, currentPlayer);
    #####:  826:	      state->supplyCount[estate]--;//Decrement estates
    #####:  827:	      if (supplyCount(estate, state) == 0){
    #####:  828:		isGameOver(state);
        -:  829:	      }
        -:  830:	    }
    #####:  831:	    card_not_discarded = 0;//Exit the loop
        -:  832:	  }
        -:  833:			    
        -:  834:	  else{
    #####:  835:	    p++;//Next card
        -:  836:	  }
        -:  837:	}
        -:  838:      }
        -:  839:			    
        -:  840:      else{
    #####:  841:	if (supplyCount(estate, state) > 0){
    #####:  842:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  843:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  844:	  if (supplyCount(estate, state) == 0){
    #####:  845:	    isGameOver(state);
        -:  846:	  }
        -:  847:	}
        -:  848:      }
        -:  849:	    
        -:  850:      
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case great_hall:
    #####:  854:      greatHallCard(state, currentPlayer, handPos);
    #####:  855:      break;
        -:  856:    
        -:  857:    case minion:
        -:  858:      //+1 action
    #####:  859:      state->numActions++;
        -:  860:			
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:			
    #####:  864:      if (choice1)		//+2 coins
        -:  865:	{
    #####:  866:	  state->coins = state->coins + 2;
        -:  867:	}
        -:  868:			
    #####:  869:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  870:	{
        -:  871:	  //discard hand
    #####:  872:	  while(numHandCards(state) > 0)
        -:  873:	    {
    #####:  874:	      discardCard(handPos, currentPlayer, state, 0);
        -:  875:	    }
        -:  876:				
        -:  877:	  //draw 4
    #####:  878:	  for (i = 0; i < 4; i++)
        -:  879:	    {
    #####:  880:	      drawCard(currentPlayer, state);
        -:  881:	    }
        -:  882:				
        -:  883:	  //other players discard hand and redraw if hand size > 4
    #####:  884:	  for (i = 0; i < state->numPlayers; i++)
        -:  885:	    {
    #####:  886:	      if (i != currentPlayer)
        -:  887:		{
    #####:  888:		  if ( state->handCount[i] > 4 )
        -:  889:		    {
        -:  890:		      //discard hand
    #####:  891:		      while( state->handCount[i] > 0 )
        -:  892:			{
    #####:  893:			  discardCard(handPos, i, state, 0);
        -:  894:			}
        -:  895:							
        -:  896:		      //draw 4
    #####:  897:		      for (j = 0; j < 4; j++)
        -:  898:			{
    #####:  899:			  drawCard(i, state);
        -:  900:			}
        -:  901:		    }
        -:  902:		}
        -:  903:	    }
        -:  904:				
        -:  905:	}
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case steward:
    #####:  909:      if (choice1 == 1)
        -:  910:	{
        -:  911:	  //+2 cards
    #####:  912:	  drawCard(currentPlayer, state);
    #####:  913:	  drawCard(currentPlayer, state);
        -:  914:	}
    #####:  915:      else if (choice1 == 2)
        -:  916:	{
        -:  917:	  //+2 coins
    #####:  918:	  state->coins = state->coins + 2;
        -:  919:	}
        -:  920:      else
        -:  921:	{
        -:  922:	  //trash 2 cards in hand
    #####:  923:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  924:	  discardCard(choice3, currentPlayer, state, 1);
        -:  925:	}
        -:  926:			
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
    #####:  929:      return 0;
        -:  930:		
        -:  931:    case tribute:
    #####:  932:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  933:	if (state->deckCount[nextPlayer] > 0){
    #####:  934:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	  state->deckCount[nextPlayer]--;
        -:  936:	}
    #####:  937:	else if (state->discardCount[nextPlayer] > 0){
    #####:  938:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  939:	  state->discardCount[nextPlayer]--;
        -:  940:	}
        -:  941:	else{
        -:  942:	  //No Card to Reveal
        -:  943:	  if (DEBUG){
        -:  944:	    printf("No cards to reveal\n");
        -:  945:	  }
        -:  946:	}
        -:  947:      }
        -:  948:	    
        -:  949:      else{
    #####:  950:	if (state->deckCount[nextPlayer] == 0){
    #####:  951:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  952:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  953:	    state->deckCount[nextPlayer]++;
    #####:  954:	    state->discard[nextPlayer][i] = -1;
    #####:  955:	    state->discardCount[nextPlayer]--;
        -:  956:	  }
        -:  957:			    
    #####:  958:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  959:	} 
    #####:  960:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  962:	state->deckCount[nextPlayer]--;
    #####:  963:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  965:	state->deckCount[nextPlayer]--;
        -:  966:      }    
        -:  967:		       
    #####:  968:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  969:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  970:	state->playedCardCount++;
    #####:  971:	tributeRevealedCards[1] = -1;
        -:  972:      }
        -:  973:
    #####:  974:      for (i = 0; i <= 2; i ++){
    #####:  975:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  976:	  state->coins += 2;
        -:  977:	}
        -:  978:		    
    #####:  979:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  980:	  drawCard(currentPlayer, state);
    #####:  981:	  drawCard(currentPlayer, state);
        -:  982:	}
        -:  983:	else{//Action Card
    #####:  984:	  state->numActions = state->numActions + 2;
        -:  985:	}
        -:  986:      }
        -:  987:	    
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case ambassador:
    #####:  991:      j = 0;		//used to check if player has enough cards to discard
        -:  992:
    #####:  993:      if (choice2 > 2 || choice2 < 0)
        -:  994:	{
    #####:  995:	  return -1;				
        -:  996:	}
        -:  997:
    #####:  998:      if (choice1 == handPos)
        -:  999:	{
    #####: 1000:	  return -1;
        -: 1001:	}
        -: 1002:
    #####: 1003:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1004:	{
    #####: 1005:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1006:	    {
    #####: 1007:	      j++;
        -: 1008:	    }
        -: 1009:	}
    #####: 1010:      if (j < choice2)
        -: 1011:	{
    #####: 1012:	  return -1;				
        -: 1013:	}
        -: 1014:
        -: 1015:      if (DEBUG) 
        -: 1016:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1017:
        -: 1018:      //increase supply count for choosen card by amount being discarded
    #####: 1019:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1020:			
        -: 1021:      //each other player gains a copy of revealed card
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
        -: 1025:	    {
    #####: 1026:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1027:	    }
        -: 1028:	}
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1032:
        -: 1033:      //trash copies of cards returned to supply
    #####: 1034:      for (j = 0; j < choice2; j++)
        -: 1035:	{
    #####: 1036:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1037:	    {
    #####: 1038:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1039:		{
    #####: 1040:		  discardCard(i, currentPlayer, state, 1);
    #####: 1041:		  break;
        -: 1042:		}
        -: 1043:	    }
        -: 1044:	}			
        -: 1045:
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case cutpurse:
    #####: 1049:      cutpurseCard(state, currentPlayer, handPos);
    #####: 1050:      break;
        -: 1051:
        -: 1052:
        -: 1053:
        -: 1054:		
        -: 1055:    case embargo: 
        -: 1056:      //+2 Coins
    #####: 1057:      state->coins = state->coins + 2;
        -: 1058:			
        -: 1059:      //see if selected pile is in play
    #####: 1060:      if ( state->supplyCount[choice1] == -1 )
        -: 1061:	{
    #####: 1062:	  return -1;
        -: 1063:	}
        -: 1064:			
        -: 1065:      //add embargo token to selected supply pile
    #####: 1066:      state->embargoTokens[choice1]++;
        -: 1067:			
        -: 1068:      //trash card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case outpost:
        -: 1073:      //set outpost flag
    #####: 1074:      state->outpostPlayed++;
        -: 1075:			
        -: 1076:      //discard card
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case salvager:
        -: 1081:      //+1 buy
    #####: 1082:      state->numBuys++;
        -: 1083:			
    #####: 1084:      if (choice1)
        -: 1085:	{
        -: 1086:	  //gain coins equal to trashed card
    #####: 1087:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1088:	  //trash card
    #####: 1089:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1090:	}
        -: 1091:			
        -: 1092:      //discard card
    #####: 1093:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case sea_hag:
    #####: 1097:      for (i = 0; i < state->numPlayers; i++){
    #####: 1098:	if (i != currentPlayer){
    #####: 1099:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1100:	  state->discardCount[i]++;
    #####: 1101:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1102:	}
        -: 1103:      }
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case treasure_map:
        -: 1107:      //search hand for another treasure_map
    #####: 1108:      index = -1;
    #####: 1109:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1110:	{
    #####: 1111:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1112:	    {
    #####: 1113:	      index = i;
    #####: 1114:	      break;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (index > -1)
        -: 1118:	{
        -: 1119:	  //trash both treasure cards
    #####: 1120:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1121:	  discardCard(index, currentPlayer, state, 1);
        -: 1122:
        -: 1123:	  //gain 4 Gold cards
    #####: 1124:	  for (i = 0; i < 4; i++)
        -: 1125:	    {
    #####: 1126:	      gainCard(gold, state, 1, currentPlayer);
        -: 1127:	    }
        -: 1128:				
        -: 1129:	  //return success
    #####: 1130:	  return 1;
        -: 1131:	}
        -: 1132:			
        -: 1133:      //no second treasure_map found in hand
    #####: 1134:      return -1;
        -: 1135:    }
        -: 1136:	
    #####: 1137:  return -1;
        -: 1138:}
        -: 1139:
       30: 1140:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1141:{
       30: 1142:  if (trashFlag < 1) //Card is not trashed
        -: 1143:    {
        -: 1144:      //Add card to played pile
       30: 1145:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       30: 1146:      state->playedCardCount++;
        -: 1147:    }
        -: 1148:	
        -: 1149:  //Set played card to -1
       30: 1150:  state->hand[currentPlayer][handPos] = -1;
        -: 1151:	
        -: 1152:  //Remove discarded card from player's hand.
        -: 1153:
        -: 1154:  //Check if the position of the discarded card is at the end of the array. 
       30: 1155:  if ( handPos == (state->handCount[currentPlayer] - 1) )
        -: 1156:    {
        -: 1157:      //Decrement array size.
        6: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
       24: 1160:  else if ( state->handCount[currentPlayer] == 1 ) //Check if handCount == 1.
        -: 1161:    {
        -: 1162:      //Decrement array size.
    #####: 1163:      state->handCount[currentPlayer]--;
        -: 1164:    }
        -: 1165:  else 	
        -: 1166:    {
        -: 1167:      //replace discarded card with last card in hand
       24: 1168:      state->hand[currentPlayer][handPos] = 
       24: 1169:        state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1170:      //set last card to -1
       24: 1171:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1172:      //reduce number of cards in hand
       24: 1173:      state->handCount[currentPlayer]--;
        -: 1174:    }
       30: 1175:  return 0;
        -: 1176:}
        -: 1177:
       15: 1178:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1179:{
        -: 1180:  //Note: supplyPos is enum of choosen card
        -: 1181:	
        -: 1182:  //check if supply pile is empty (0) or card is not used in game (-1)
       15: 1183:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1184:    {
        6: 1185:      return -1;
        -: 1186:    }
        -: 1187:	
        -: 1188:  //added card for [whoseTurn] current player:
        -: 1189:  // toFlag = 0 : add to discard
        -: 1190:  // toFlag = 1 : add to deck
        -: 1191:  // toFlag = 2 : add to hand
        -: 1192:
        9: 1193:  if (toFlag == 1)
        -: 1194:    {
        3: 1195:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1196:      state->deckCount[player]++;
        -: 1197:    }
        6: 1198:  else if (toFlag == 2)
        -: 1199:    {
        3: 1200:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1201:      state->handCount[player]++;
        -: 1202:    }
        -: 1203:  else
        -: 1204:    {
        3: 1205:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1206:      state->discardCount[player]++;
        -: 1207:    }
        -: 1208:	
        -: 1209:  //decrease number in supply pile
        9: 1210:  state->supplyCount[supplyPos]--;
        -: 1211:	 
        9: 1212:  return 0;
        -: 1213:}
        -: 1214:
     6000: 1215:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1216:{
        -: 1217:  int i;
        -: 1218:	
        -: 1219:  //reset coin count
     6000: 1220:  state->coins = 0;
        -: 1221:
        -: 1222:  //add coins for each Treasure card in player's hand
  1456695: 1223:  for (i = 0; i < state->handCount[player]; i++)
        -: 1224:  {
  1450695: 1225:    if (state->hand[player][i] == copper)
        -: 1226:  	{
    56322: 1227:  	  state->coins += 1;
        -: 1228:  	}
  1394373: 1229:    else if (state->hand[player][i] == silver)
        -: 1230:  	{
    55578: 1231:  	  state->coins += 2;
        -: 1232:  	}
  1338795: 1233:    else if (state->hand[player][i] == gold)
        -: 1234:  	{
    55728: 1235:  	  state->coins += 3;
        -: 1236:  	}	
        -: 1237:  }	
        -: 1238:
        -: 1239:  //add bonus
     6000: 1240:  state->coins += bonus;
        -: 1241:
     6000: 1242:  return 0;
        -: 1243:}
        -: 1244:
       12: 1245:int adventurerCard(struct gameState *state, int currentPlayer) {
       12: 1246:  int drawntreasure = 0;
       12: 1247:  int z = 0;// Declare counter for temp hand
        -: 1248:  int cardDrawn;
        -: 1249:  int temphand[MAX_HAND];
      809: 1250:  while(drawntreasure < 2) {
        -: 1251:    //if the deck is empty we need to shuffle discard and add to deck
      785: 1252:    if (state->deckCount[currentPlayer] <= 1){
      720: 1253:      shuffle(currentPlayer, state);
        -: 1254:    }
      785: 1255:    drawCard(currentPlayer, state);
        -: 1256:    //top card of hand is most recently drawn card.
      785: 1257:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1258:
      785: 1259:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       24: 1260:      drawntreasure++;
        -: 1261:		else{ 
      761: 1262:      temphand[z] = cardDrawn; 
        -: 1263:
        -: 1264:      //this should just remove the top card (the most recently drawn one).
      761: 1265:      state->handCount[currentPlayer]--; 
      761: 1266:      z++;
        -: 1267:    }
        -: 1268:  }
        -: 1269:	// discard all cards in play that have been drawn
      785: 1270:  while(z-1 >= 0){
      761: 1271:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
      761: 1272:    z=z-1;
        -: 1273:  }
       12: 1274:  return 0;
        -: 1275:}
        -: 1276:
    #####: 1277:int council_roomCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1278:  	int i;
        -: 1279:
        -: 1280:	//+4 Cards
    #####: 1281:      for (i = 0; i < 4; i++)
        -: 1282:	{
    #####: 1283:	  drawCard(currentPlayer, state);
        -: 1284:	}
        -: 1285:			
        -: 1286:      //+1 Buy
    #####: 1287:      state->numBuys++;
        -: 1288:			
        -: 1289:      //Each other player draws a card
    #####: 1290:      for (i = 1; i < state->numPlayers; i++)
        -: 1291:	{
    #####: 1292:	  if ( i != currentPlayer )
        -: 1293:	    {
    #####: 1294:	      drawCard(i, state);
        -: 1295:	    }
        -: 1296:	}
        -: 1297:			
        -: 1298:      //put played card in played card pile
    #####: 1299:      discardCard(handPos, currentPlayer, state, 0);
        -: 1300:			
    #####: 1301:      return 0;
        -: 1302:}
        -: 1303:
        3: 1304:int smithyCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1305:  //+3 Cards
        3: 1306:  int i = 0;
        9: 1307:  for (i = 1; i < 3; i++)
        -: 1308:  {
        6: 1309:    drawCard(currentPlayer, state);
        -: 1310:  }
        -: 1311:      
        -: 1312:  //discard card from hand
        3: 1313:  discardCard(handPos, currentPlayer, state, 0);
        3: 1314:  return 0;
        -: 1315:}
        -: 1316:
       12: 1317:int villageCard(struct gameState *state, int currentPlayer, int handPos) {
        -: 1318:  //+1 card
       12: 1319:  drawCard(currentPlayer, state);
        -: 1320:      
        -: 1321:  //+2 Actions
       12: 1322:  state->numActions = state->numActions + 3;
        -: 1323:      
        -: 1324:  //discard played card from hand
       12: 1325:  discardCard(handPos, currentPlayer, state, 0);
       12: 1326:  return 0;
        -: 1327:}
       15: 1328:int greatHallCard(struct gameState *state, int currentPlayer, int handPos){
        -: 1329:	
        -: 1330:		//+1 Card
       15: 1331:  	drawCard(currentPlayer, state);
        -: 1332:
        -: 1333:  	//+1 Actions
       15: 1334:  	state->numActions+2;
        -: 1335:
        -: 1336:  	//discard card from hand
       15: 1337:  	discardCard(handPos, currentPlayer, state, 0);
       15: 1338:  	return 0;
        -: 1339:	
        -: 1340:	
        -: 1341:}
    #####: 1342:int cutpurseCard(struct gameState *state, int currentPlayer, int handPos){
        -: 1343:  int i;
        -: 1344:  int j;
        -: 1345:  int k;
        -: 1346:  int x;
    #####: 1347:		updateCoins(currentPlayer, state, 2);
    #####: 1348:      	for (i = 1; i < state->numPlayers; i++) {
    #####: 1349:	  			if (i != currentPlayer) {
    #####: 1350:	      		for (j = 0; j < state->handCount[i]; j++) {
    #####: 1351:		  				if (state->hand[i][j] == copper) {
    #####: 1352:		      			discardCard(j, i, state, 0);
    #####: 1353:		      			break;
        -: 1354:		   				 }
    #####: 1355:		 					 if (j == state->handCount[i]) {
    #####: 1356:		      				for (k = 0; k < state->handCount[i]; k++){
        -: 1357:			  						if (DEBUG)
        -: 1358:			    					printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1359:								}	
    #####: 1360:		      			break;
        -: 1361:		    			}		
        -: 1362:						}					
        -: 1363:	    		}				
        -: 1364:				}			
        -: 1365:	
        -: 1366:      //discard played card from hand
    #####: 1367:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1368:
    #####: 1369:  return 0;
        -: 1370:}
        -: 1371:
        -: 1372://end of dominion.c
