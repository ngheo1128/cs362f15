        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:
        -:    6:
function main called 1 returned 100% blocks executed 83%
        1:    7:int main(int argc, char *argv[]){
        1:    8:    int i = 0;
        1:    9:    printf("unittest2.c:\n");
call    0 returned 100%
        -:   10:    struct gameState state;
       28:   11:    for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:   12:        state.supplyCount[i] = 5;
        -:   13:    }
        1:   14:    state.deckCount[0] = 0;
        1:   15:    state.handCount[0] = 0;
        1:   16:    state.discardCount[0] = 0;
        -:   17:
        1:   18:    gainCard(curse, &state, 0, 0);
call    0 returned 100%
        -:   19:
        1:   20:    printf("gainCard(): %s discardCount is incremented\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   21:        (state.discardCount[0] == 1) ? "PASS" : "FAIL" );
        -:   22:
        1:   23:    gainCard(curse, &state, 1, 0);
call    0 returned 100%
        -:   24:
        1:   25:    printf("gainCard(): %s deckCount is incremented\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   26:        (state.deckCount[0] == 1) ? "PASS" : "FAIL" );
        -:   27:
        1:   28:    gainCard(curse, &state, 2, 0);
call    0 returned 100%
        -:   29:    
        1:   30:    printf("gainCard(): %s handCount is incremented\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   31:        (state.handCount[0] == 1) ? "PASS" : "FAIL" );
        -:   32:
        1:   33:    printf("gainCard(): %s supplyCount is decremented\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   34:        (state.supplyCount[curse] == 2) ? "PASS" : "FAIL" );
        -:   35:
        1:   36:    state.supplyCount[curse] = 0;
        -:   37:
        1:   38:    printf("gainCard(): %s empty card pile\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   39:        (gainCard(curse, &state, 0, 0) == -1) ? "PASS" : "FAIL" );    
call    0 returned 100%
        -:   40:
        1:   41:    state.supplyCount[curse] = -1;
        -:   42:
        1:   43:    printf("gainCard(): %s out-of-play card\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   44:        (gainCard(curse, &state, 0, 0) == -1) ? "PASS" : "FAIL" ); 
call    0 returned 100%
        -:   45:
        1:   46:    return 0;
        -:   47:}
