        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <assert.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <math.h>
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:#define DEBUG 0
        -:   11:#define NOISY_TEST 1
        -:   12:
function checkUpdateCoins called 2000 returned 100% blocks executed 88%
     2000:   13:int checkUpdateCoins(int player, struct gameState *post, int bonus) {
        -:   14:        struct gameState pre;
     2000:   15:        memcpy (&pre, post, sizeof(struct gameState));
        -:   16:
        -:   17:        int r, i;
        -:   18:
     2000:   19:        r = updateCoins(player, post, bonus);
call    0 returned 100%
        -:   20:
     2000:   21:        pre.coins = 0;
        -:   22:
   485565:   23:        for (i = 0; i < pre.handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   24:  {
   483565:   25:                if (pre.hand[player][i] == copper) pre.coins += 1;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   464791:   26:    else if (pre.hand[player][i] == silver) pre.coins += 2;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
   446265:   27:    else if (pre.hand[player][i] == gold) pre.coins += 3;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:   28:  }
     2000:   29:  pre.coins += bonus;
        -:   30:
     2000:   31:  assert (r == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     2000:   32:  assert(memcmp(&pre, post, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   33:
     2000:   34:  return 0;
        -:   35:}
        -:   36:
function main called 1 returned 100% blocks executed 100%
        1:   37:int main () {
        -:   38:
        -:   39:  int i, n, j, p;
        -:   40:
        -:   41:  struct gameState G;
        -:   42:
        1:   43:  printf ("Testing updateCoins\n");
call    0 returned 100%
        -:   44:
        1:   45:  SelectStream(2);
call    0 returned 100%
        1:   46:  PutSeed(3);
call    0 returned 100%
        -:   47:
     2001:   48:  for (n = 0; n < 2000; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 52602000:   49:    for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 52600000:   50:      ((char*)&G)[i] = floor(Random() * 256);
call    0 returned 100%
        -:   51:    }
     2000:   52:    G.numPlayers = floor(Random() * 5);
call    0 returned 100%
     2000:   53:    p = floor(Random() * G.numPlayers);
call    0 returned 100%
     2000:   54:    G.deckCount[p] = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   55:    G.discardCount[p] = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   56:    G.handCount[p] = floor(Random() * MAX_HAND);
call    0 returned 100%
   485565:   57:    for(j=0;j<G.handCount[p];j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   483565:   58:        G.hand[p][j] = floor(Random() * 26);
call    0 returned 100%
        -:   59:    }
     2000:   60:    checkUpdateCoins(p, &G, 0);
call    0 returned 100%
        -:   61:  }
        -:   62:
        1:   63:  printf ("ALL TESTS OK\n");
call    0 returned 100%
        -:   64:
        1:   65:  return 0;
        -:   66:}
