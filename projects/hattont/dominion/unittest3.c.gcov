        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <assert.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <math.h>
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:#define DEBUG 0
        -:   11:#define NOISY_TEST 1
        -:   12:
        -:   13:
function checkShuffle called 2000 returned 100% blocks executed 80%
     2000:   14:int checkShuffle(int player, struct gameState *post){
        -:   15:  struct gameState pre;
     2000:   16:  memcpy (&pre, post, sizeof(struct gameState));
        -:   17:
        -:   18:  int r;
        -:   19:
     2000:   20:  r = shuffle(player, post);
call    0 returned 100%
        -:   21:
     2000:   22:  assert(post->deckCount[player]==pre.deckCount[player]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     2000:   23:  return 0;
        -:   24:}
        -:   25:
function main called 1 returned 100% blocks executed 100%
        1:   26:int main () {
        -:   27:
        -:   28:  int i, n, p;
        -:   29:
        -:   30:  struct gameState G;
        -:   31:
        1:   32:  printf ("Testing Shuffle.\n");
call    0 returned 100%
        -:   33:
        1:   34:  SelectStream(2);
call    0 returned 100%
        1:   35:  PutSeed(3);
call    0 returned 100%
        -:   36:
     2001:   37:  for (n = 0; n < 2000; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 52602000:   38:    for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 52600000:   39:      ((char*)&G)[i] = floor(Random() * 256);
call    0 returned 100%
        -:   40:    }
     2000:   41:    G.numPlayers = floor(Random() * 5);
call    0 returned 100%
     2000:   42:    p = floor(Random() * G.numPlayers);
call    0 returned 100%
     2000:   43:    G.playedCards[p] = floor(Random() * MAX_HAND);
call    0 returned 100%
     2000:   44:    G.playedCardCount = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   45:    G.deckCount[p] = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   46:    G.discardCount[p] = floor(Random() * MAX_DECK);
call    0 returned 100%
     2000:   47:    G.handCount[p] = floor(Random() * MAX_HAND);
call    0 returned 100%
     2000:   48:    checkShuffle(p, &G);
call    0 returned 100%
        -:   49:  }
        -:   50:
        1:   51:  printf ("ALL TESTS OK\n");
call    0 returned 100%
        -:   52:
        1:   53:  return 0;
        -:   54:}
