        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <string.h>
        -:    5:#include "rngs.h"
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:
function main called 1 returned 100% blocks executed 88%
        1:    9:int main(int argc, char *argv[]){
        1:   10:    PutSeed(-1);
call    0 returned 100%
        1:   11:    printf("cardtest2.c\n");
call    0 returned 100%
        -:   12:    struct gameState state;
        -:   13:    struct gameState stateCopy;
        1:   14:    memset(&state, 0, sizeof(struct gameState));
        -:   15:    
        -:   16:    /* copy of gameState for comparison */
        1:   17:    stateCopy = state;
        -:   18:
        -:   19:    /*Init deck with 4 cards.*/
        -:   20:
        1:   21:    state.deck[0][0] = silver;
        1:   22:    state.deck[0][1] = province;
        1:   23:    state.deck[0][2] = gold;
        1:   24:    state.deck[0][3] = duchy;
        -:   25:
        1:   26:    state.hand[0][0] = village;
        1:   27:    state.deckCount[0] = 4;
        1:   28:    state.discardCount[0] = 0;
        1:   29:    state.handCount[0] = 1;
        1:   30:    state.numActions = 0;
        1:   31:    state.playedCardCount = 0;
        -:   32:
        1:   33:    villageCard(&state, 0, 0);
call    0 returned 100%
        -:   34:
        1:   35:    printf("villageCard(): %s empty hand (except Village card) case\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   36:        (state.handCount[0] == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   37:        state.playedCardCount == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   38:        state.deckCount[0] == 3 &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:   39:        state.numActions == 2) ? "PASS" : "FAIL");
        -:   40:
        -:   41:    /* clear game state */
        1:   42:    memset(&state, 0, sizeof(struct gameState));
        -:   43:
        -:   44:    /*Init deck with 4 cards.*/
        -:   45:
        1:   46:    state.deck[0][0] = silver;
        1:   47:    state.deck[0][1] = province;
        1:   48:    state.deck[0][2] = gold;
        1:   49:    state.deck[0][3] = duchy;
        -:   50:
        1:   51:    state.hand[0][0] = village;
        1:   52:    state.handCount[0] = 1;
        1:   53:    state.deckCount[0] = 0;
        1:   54:    state.discardCount[0] = 0;
        1:   55:    state.numActions = 0;
        1:   56:    state.playedCardCount = 0;
        -:   57:
        1:   58:    villageCard(&state, 0, 0);
call    0 returned 100%
        -:   59:
        1:   60:    printf("villageCard(): %s empty deck case\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   61:    (state.handCount[0] == 0 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   62:    state.playedCardCount == 1 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   63:    state.deckCount[0] == 0 &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:   64:    state.numActions == 2) ? "PASS" : "FAIL");
        -:   65:
        -:   66:    /* clear verified changes made by villageCard() */
        1:   67:    memset(&state.handCount[0], 0, sizeof(int));
        1:   68:    memset(&state.deckCount[0], 0, sizeof(int)); 
        1:   69:    memset(&state.discardCount[0], 0, sizeof(int));
        1:   70:    memset(&state.playedCardCount, 0, sizeof(int)); 
        1:   71:    memset(&state.hand[0], 0, sizeof(int) * MAX_HAND); 
        1:   72:    memset(&state.deck[0], 0, sizeof(int) * MAX_DECK);
        1:   73:    memset(&state.discard[0], 0, sizeof(int) * MAX_DECK);
        1:   74:    memset(&state.playedCards, 0, sizeof(int) * MAX_DECK);
        1:   75:    memset(&state.numActions, 0, sizeof(int) * MAX_DECK);
        -:   76:
        -:   77:    /* verify that no erroneous changes are made to game state */
        1:   78:    printf("villageCard(): %s changes to correct player only\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   79:        (memcmp(&state, &stateCopy, sizeof(struct gameState)) == 0) 
        -:   80:        ? "PASS" : "FAIL");    
        -:   81:
        -:   82:    /* clear game state */
        1:   83:    memset(&state, 0, sizeof(struct gameState));
        -:   84:
        -:   85:    /*Init deck with 4 cards.*/
        -:   86:
        1:   87:    state.deck[0][0] = silver;
        1:   88:    state.deck[0][1] = province;
        1:   89:    state.deck[0][2] = gold;
        1:   90:    state.deck[0][3] = duchy;
        -:   91:
        1:   92:    state.hand[0][0] = village;
        1:   93:    state.hand[0][1] = village;
        1:   94:    state.deckCount[0] = 4;
        1:   95:    state.discardCount[0] = 0;
        1:   96:    state.handCount[0] = 2;
        1:   97:    state.numActions = 0;
        1:   98:    state.playedCardCount = 0;
        -:   99:
        1:  100:    villageCard(&state, 0, 0);
call    0 returned 100%
        1:  101:    villageCard(&state, 0, 1);
call    0 returned 100%
        -:  102:
        1:  103:    printf("villageCard(): %s 2 consecutive Village cards case\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:  104:        (state.handCount[0] == 2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  105:        state.playedCardCount == 2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  106:        state.deckCount[0] == 2 &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  107:        state.numActions == 4) ? "PASS" : "FAIL");
        -:  108:
        -:  109:    // printf("deckCount: %i handCount: %i playedCardCount: %i\n", 
        -:  110:    //     state.deckCount[0], state.handCount[0], state.playedCardCount);
        1:  111:    return 0;
        -:  112:}
