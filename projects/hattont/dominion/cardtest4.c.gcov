        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <string.h>
        -:    5:#include "rngs.h"
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:
function main called 1 returned 100% blocks executed 64%
        1:    9:int main(int argc, char *argv[]){
        1:   10:    PutSeed(-1);
call    0 returned 100%
        1:   11:    printf("cardtest4.c\n");
call    0 returned 100%
        -:   12:    struct gameState state;
        -:   13:    struct gameState stateCopy;
        -:   14:
        -:   15:    /* clear game state */
        1:   16:    memset(&state, 0, sizeof(struct gameState));
        -:   17:    
        -:   18:    /* copy of gameState for comparison */
        1:   19:    stateCopy = state;
        -:   20:    
        -:   21:    /*Init deck with 4 cards.*/
        1:   22:    state.deck[0][0] = silver;
        1:   23:    state.deck[0][1] = province;
        1:   24:    state.deck[0][2] = gold;
        1:   25:    state.deck[0][3] = duchy;
        -:   26:
        1:   27:    state.hand[0][0] = smithy;
        1:   28:    state.deckCount[0] = 4;
        1:   29:    state.discardCount[0] = 0;
        1:   30:    state.handCount[0] = 1;
        1:   31:    state.numActions = 0;
        1:   32:    state.playedCardCount = 0;
        -:   33:
        1:   34:    smithyCard(&state, 0, 0);
call    0 returned 100%
        -:   35:
        1:   36:    printf("smithyCard(): %s handCount properly incremented\n", 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        1:   37:        (state.handCount[0] == 3 &&
branch  0 never executed
branch  1 never executed
    #####:   38:        state.playedCardCount == 1 &&
branch  0 never executed
branch  1 never executed
    #####:   39:        state.deckCount[0] == 1 &&
branch  0 never executed
branch  1 never executed
    #####:   40:        state.numActions == 0) ? "PASS" : "FAIL");
        -:   41:
        -:   42:    /* When smithy is played, cards will be drawn from deck in reverse index
        -:   43:     * order. When smithy card is discarded, it will be replaced with last
        -:   44:     * card in hand array. hand[0] expected: {province, duchy, gold} */
        1:   45:    printf("smithyCard(): %s correct cards, order in correct user's hand\n", 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
        1:   46:        (state.hand[0][0] == province &&
branch  0 never executed
branch  1 never executed
    #####:   47:        state.hand[0][1] == duchy &&
branch  0 never executed
branch  1 never executed
    #####:   48:        state.hand[0][2] == gold) ? "PASS" : "FAIL");
        -:   49:
        -:   50:    /* clear verified changes made by smithyCard() */
        1:   51:    memset(&state.handCount[0], 0, sizeof(int));
        1:   52:    memset(&state.deckCount[0], 0, sizeof(int)); 
        1:   53:    memset(&state.discardCount[0], 0, sizeof(int));
        1:   54:    memset(&state.playedCardCount, 0, sizeof(int)); 
        1:   55:    memset(&state.hand[0], 0, sizeof(int) * MAX_HAND); 
        1:   56:    memset(&state.deck[0], 0, sizeof(int) * MAX_DECK);
        1:   57:    memset(&state.discard[0], 0, sizeof(int) * MAX_DECK);
        1:   58:    memset(&state.playedCards, 0, sizeof(int) * MAX_DECK);
        -:   59:
        -:   60:    /* verify that no erroneous changes are made to game state */
        1:   61:    printf("smithyCard(): %s changes to correct player only\n", 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1:   62:        (memcmp(&state, &stateCopy, sizeof(struct gameState)) == 0) 
        -:   63:        ? "PASS" : "FAIL");
        -:   64:
        1:   65:    return 0;
        -:   66:}
