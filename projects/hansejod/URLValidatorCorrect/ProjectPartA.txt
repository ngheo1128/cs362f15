Team:  Jody Hansen, Brian Stamm, Wisam Thalij
Final Project - Part A
11.8.15

Running the UrlValidator.java program, the testIsVald() method tests a variety of URLs.  In our running, we found that it constructed and evaluated 1890 URLs as being valid, while in the same method created 30,030 invalid URLs.  An example of a valid URL it created is:  http://www.google.com:80/test1?action=edit&mode=up .  An example of an invalid URL is:  h3t://go.com:65636/test1/file?action=edit&mode=up .

Specifically, the main function in the UrlValidatorTest.java orchestrates all the events to test hard-coded urls. The urls are created outside of any of the functions as a global variable arrays consisting of 5 parts; including scheme, authority, port, path, and query (ex. http://, www.google.com, :80, /test1/, ?action=view). All permutations of the parts calculate to 538,650. These arrays are put together in an object that serves as an array of arrays and it’s this object that will be used in other functions along with the simple array of ints in testPartsIndex.
                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                              With this in place, main creates a new object and calls setUp() as its first function. Oddly, this function sets the testPartsIndex elements to 0, despite that it was previously initialized at 0. Afterwards, it calls  the first overloaded testIsValid function which then calls testIsValid with the two parameters, testUrlPars and an object that configures the function to test all schemes.
                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                              It is in the second testIsValid function that will drive the main functionality of UrlValidator. In this function it creates an UrlValidator object followed by assertions that must function to test if this object was properly initialized. The program enters a do-while loop in which a for loop composes a string array of all of 5 parts, which is then converted to a string. The boolean result is set to either true or false by calling isValid function and passing the url string. The isValid function calls a series of ASCII checks and pattern matching.  The UrlMatcher() function to match each part of the passed URL to the accepted (ASCII_PATTERN, URL_PATTERN, URL_SCHEME, URL_AUTHORITY, URL_PATH, URL_QUERY and URL_FRAGMENT) if all calls for the UrlMatcher() returned “true” then the result of the IsValid() return true (that means the usl passed is valid) and if UrlMatcher() returned “false” the result variable will have “false” value.  The conditional in the while loop is a call to a helper function, incrementTestPartsIndex in which the testPartsIndex and url object is passed. This function increments the index from the outer edge towards the inner edge.
                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                              After this analysis, The testIsValid() function will get called passed in an object contained all the URL’S to be tested, create and initialize a test array to hold each constructed URL, pass it to the isValid() function to test the five parts of that URL (scheme, authority, port, path, or query) to check if each of the parts are  valid, then returns a value either “true or false” to be used to assert that the expected value is matching with the result from the isValid() and print the URL if it is a valid URL.

