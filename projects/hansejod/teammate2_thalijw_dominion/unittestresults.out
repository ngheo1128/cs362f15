
*------------------------- Unit Test #1 -------------------------*

Testing if compare returns -1 when a > b, 1 when a < b, and 0 when a=b. 
Pass: 0
-1
1
0
Pass: 1
-1
1
0
Pass: 2
-1
1
0
Pass: 3
-1
1
0
Pass: 4
-1
1
0
Pass: 5
-1
1
0
Pass: 6
-1
1
0
Pass: 7
-1
1
0
Pass: 8
-1
1
0
Pass: 9
-1
1
0
All unittest #1 tests passed!

*------------------------- Unit Test #2 -------------------------*

Testing if isGameOver returns a 1 when province count equals 0 
and returns 0 when province card is 1 or more. 
Calling isGameOver function!
Print province count: 7, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 3, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 1, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 0, Print isGameOver value: 1
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 3, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 1, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 0, Print isGameOver value: 1
Calling isGameOver function!
Print province count: 1, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 7, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 0, Print isGameOver value: 1
Calling isGameOver function!
Print province count: 1, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 1, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 2, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 2, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 6, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 5, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 5, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 7, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 3, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 0, Print isGameOver value: 1
Calling isGameOver function!
Print province count: 3, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 3, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 7, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 5, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 6, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 1, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 0, Print isGameOver value: 1
Calling isGameOver function!
Print province count: 7, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 1, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 3, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 6, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 5, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 3, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 7, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 1, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 2, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 7, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 3, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 4, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 5, Print isGameOver value: 0
Calling isGameOver function!
Print province count: 6, Print isGameOver value: 0

Testing if game ends when three kingdom cards equals 0. 
Pass 0:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 6
Print card value: 0
Print card number: 15
Print card value: 0
Print card number: 17
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 1:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 1
Print card value: 0
Print card number: 9
Print card value: 0
Print card number: 6
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 2:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 3
Print card value: 0
Print card number: 8
Print card value: 0
Print card number: 1
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 3:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 6
Print card value: 0
Print card number: 24
Print card value: 0
Print card number: 16
Print card value: 0
Print card number: 17
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 4:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 9
Print card value: 0
Print card number: 22
Print card value: 0
Print card number: 15
Print card value: 0
Print card number: 6
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 5:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 9
Print card value: 0
Print card number: 19
Print card value: 0
Print card number: 18
Print card value: 0
Print card number: 1
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 6:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 9
Print card value: 0
Print card number: 8
Print card value: 0
Print card number: 13
Print card value: 0
Print card number: 2
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 7:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 8
Print card value: 0
Print card number: 6
Print card value: 0
Print card number: 20
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 8:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 4
Print card value: 0
Print card number: 5
Print card value: 0
Print card number: 7
Print card value: 0
Print card number: 1
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

Pass 9:
All cards are set to a value 1-10. 
Calling isGameOver function!
Result value is: 0 
Game did not end when cards are set to a value 1-10.

Print card number: 9
Print card value: 0
Print card number: 2
Print card value: 0
Print card number: 18
Print card value: 0
Three or more supply cards are set to 0. 
Result value is: 1 
Game ended when three supply cards are set to 0.

Two supply cards are set to 0. 
Calling isGameOver function!
Result value is: 0 
Game did not end when two supply cards are set to 0.

All unit #2 tests passed! 

*------------------------- Unit Test #3 -------------------------*

Testing if the deck is the same before and after shuffling. 
Iterations add 5 new cards at a time. 
Pass: 0, card deck is the same before shuffle.
Calling shuffle function!
Pass: 0, card deck is different after shuffle.
Pass: 1, card deck is the same before shuffle.
Calling shuffle function!
Pass: 1, card deck is different after shuffle.
Pass: 2, card deck is the same before shuffle.
Calling shuffle function!
Pass: 2, card deck is different after shuffle.
Pass: 3, card deck is the same before shuffle.
Calling shuffle function!
Pass: 3, card deck is different after shuffle.
Pass: 4, card deck is the same before shuffle.
Calling shuffle function!
Pass: 4, card deck is different after shuffle.
Pass: 5, card deck is the same before shuffle.
Calling shuffle function!
Pass: 5, card deck is different after shuffle.
Pass: 6, card deck is the same before shuffle.
Calling shuffle function!
Pass: 6, card deck is different after shuffle.
Pass: 7, card deck is the same before shuffle.
Calling shuffle function!
Pass: 7, card deck is different after shuffle.
Pass: 8, card deck is the same before shuffle.
Calling shuffle function!
Pass: 8, card deck is different after shuffle.
Pass: 9, card deck is the same before shuffle.
Calling shuffle function!
Pass: 9, card deck is different after shuffle.
Pass: 10, card deck is the same before shuffle.
Calling shuffle function!
Pass: 10, card deck is different after shuffle.
Pass: 11, card deck is the same before shuffle.
Calling shuffle function!
Pass: 11, card deck is different after shuffle.
Pass: 12, card deck is the same before shuffle.
Calling shuffle function!
Pass: 12, card deck is different after shuffle.
Pass: 13, card deck is the same before shuffle.
Calling shuffle function!
Pass: 13, card deck is different after shuffle.
Pass: 14, card deck is the same before shuffle.
Calling shuffle function!
Pass: 14, card deck is different after shuffle.
Pass: 15, card deck is the same before shuffle.
Calling shuffle function!
Pass: 15, card deck is different after shuffle.
Pass: 16, card deck is the same before shuffle.
Calling shuffle function!
Pass: 16, card deck is different after shuffle.
Pass: 17, card deck is the same before shuffle.
Calling shuffle function!
Pass: 17, card deck is different after shuffle.
Pass: 18, card deck is the same before shuffle.
Calling shuffle function!
Pass: 18, card deck is different after shuffle.
Pass: 19, card deck is the same before shuffle.
Calling shuffle function!
Pass: 19, card deck is different after shuffle.
All unit #3 tests passed! 

*------------------------- Unit Test #4 -------------------------*

Testing if buyCard properly terminates if one of the conditions is not 
met and if all are satisfied, handCount increases by 1. 
Checking if hand count increase by one when other conditionals are satisfied.
numBuys: 1
supplyCount: 1
Coins: 8
cost: 8
handCount: 5
Calling buyCard function!
numBuys: 0
supplyCount: 0
coins: 0
handCount: 5
Bug found! handCount is not increased by 1. 

Checking if function terminates if numBuys is 0.
numBuys: 0
supplyCount: 1
Coins: 8
Cost: 8
Calling buyCard function!
numBuys: 0
supplyCount: 1
coins: 8

Checking if function terminates if there are no cards left of that type.
numBuys: 1
supplyCount: 0
Coins: 8
Cost: 8
Calling buyCard function!
numBuys: 1
supplyCount: 0
coins: 8

Checking if function terminates if player does not have enough coins.
numBuys: 1
supplyCount: 1
Coins: 0
Cost: 8
Calling buyCard function!
numBuys: 1
supplyCount: 1
coins: 0

All unit #4 testing is finished! 

*------------------------- Card Test Smithy -------------------------*

Testing Smithy card function. Function must add three cards from the  
deck to the hand and discard one card from the hand. 
Pass: 0
Number of cards in hand: 5
Number of cards in deck: 35
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 32
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 1
Number of cards in hand: 5
Number of cards in deck: 32
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 29
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 2
Number of cards in hand: 5
Number of cards in deck: 29
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 26
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 3
Number of cards in hand: 5
Number of cards in deck: 26
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 23
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 4
Number of cards in hand: 5
Number of cards in deck: 23
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 20
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 5
Number of cards in hand: 5
Number of cards in deck: 20
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 17
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 6
Number of cards in hand: 5
Number of cards in deck: 17
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 14
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 7
Number of cards in hand: 5
Number of cards in deck: 14
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 11
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 8
Number of cards in hand: 5
Number of cards in deck: 11
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 8
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
Pass: 9
Number of cards in hand: 5
Number of cards in deck: 8
Number of cards in played pile: 0
Calling Smithy function!
Number of cards in hand: 7
Number of cards in deck: 5
Number of cards in played pile: 0
Bug Found! Number of cards in played pile did not increased by one.
All cardtest #1 testing is finished! 

*------------------------- Card Test Adventurer -------------------------*

Testing Adventurer card. Adventurer discard cards, decreases hand count, 
and suffle cards when deckCount is 0. 
Pass: 0
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 1
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 2
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 3
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 4
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 5
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 6
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 7
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 8
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
Pass: 9
Card deck is the same before shuffle.
handCount 5 
discardCount 0 
Calling Adventurer function!
Shuffle returns a -1 when the deckcount is 0.
hand count 5 
discardCount 0 
Bug found! Cards were not discarded.
Bug found! Temp hand is the same before and after function call. 0 
All cardtest #2 testing is finished! 

*------------------------- Card Test #3 -------------------------*

Testing Council Room. Player 1's hand must increase by 3 while player 
2's hand increase by 1. Played pile and numBuys increases by 1. 
Pass: 0
Number of cards in hand player1: 5
Number of cards in played pile player1: 0
Number of cards in hand player2: 0
Number of buys: 1
Calling council_room_refactor function!
Number of cards in hand player1: 8
Number of cards in played pile player1: 1
Number of cards in hand player2: 1
Number of buys: 2
Pass: 1
Number of cards in hand player1: 8
Number of cards in played pile player1: 1
Number of cards in hand player2: 1
Number of buys: 2
Calling council_room_refactor function!
Number of cards in hand player1: 8
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 2
Number of cards in hand player2: 2
Number of buys: 3
Pass: 2
Number of cards in hand player1: 8
Number of cards in played pile player1: 2
Number of cards in hand player2: 2
Number of buys: 3
Calling council_room_refactor function!
Number of cards in hand player1: 7
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 3
Number of cards in hand player2: 3
Number of buys: 4
Pass: 3
Number of cards in hand player1: 7
Number of cards in played pile player1: 3
Number of cards in hand player2: 3
Number of buys: 4
Calling council_room_refactor function!
Number of cards in hand player1: 6
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 4
Number of cards in hand player2: 4
Number of buys: 5
Pass: 4
Number of cards in hand player1: 6
Number of cards in played pile player1: 4
Number of cards in hand player2: 4
Number of buys: 5
Calling council_room_refactor function!
Number of cards in hand player1: 5
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 5
Number of cards in hand player2: 5
Number of buys: 6
Pass: 5
Number of cards in hand player1: 5
Number of cards in played pile player1: 5
Number of cards in hand player2: 5
Number of buys: 6
Calling council_room_refactor function!
Number of cards in hand player1: 4
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 6
Number of cards in hand player2: 6
Number of buys: 7
Pass: 6
Number of cards in hand player1: 4
Number of cards in played pile player1: 6
Number of cards in hand player2: 6
Number of buys: 7
Calling council_room_refactor function!
Number of cards in hand player1: 3
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 7
Number of cards in hand player2: 7
Number of buys: 8
Pass: 7
Number of cards in hand player1: 3
Number of cards in played pile player1: 7
Number of cards in hand player2: 7
Number of buys: 8
Calling council_room_refactor function!
Number of cards in hand player1: 2
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 8
Number of cards in hand player2: 8
Number of buys: 9
Pass: 8
Number of cards in hand player1: 2
Number of cards in played pile player1: 8
Number of cards in hand player2: 8
Number of buys: 9
Calling council_room_refactor function!
Number of cards in hand player1: 1
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 9
Number of cards in hand player2: 9
Number of buys: 10
Pass: 9
Number of cards in hand player1: 1
Number of cards in played pile player1: 9
Number of cards in hand player2: 9
Number of buys: 10
Calling council_room_refactor function!
Number of cards in hand player1: 0
Bug found! Hand count of player 1 not increased by 3. 
Number of cards in played pile player1: 10
Number of cards in hand player2: 10
Number of buys: 11
All cardtest #3 testing is finished! 

*------------------------- Card Test #4 -------------------------*

Testing seaHag. Discarded count for player 1 must go up by one  
and last card in the deck must change.  
Pass: 0
Last card in deck player 2: 0
Number of discarded cards player 1: 0
Number of discarded cards player 2: 0
Number of cards player 1: 5
Number of cards player 2: 10
Calling SeaHag function in cardEffect!
Last card in deck player 2: 4
Bug found! last card for player 2 does not equal 0: 4
Number of discarded cards player 1: 0
Number of discarded cards player 2: 1
Number of cards player 1: 5
Number of cards player 2: 7
Bug found! Deck is decreased by more than 1.
Pass: 1
Last card in deck player 2: 1
Number of discarded cards player 1: 0
Number of discarded cards player 2: 1
Number of cards player 1: 5
Number of cards player 2: 7
Calling SeaHag function in cardEffect!
Last card in deck player 2: 4
Bug found! last card for player 2 does not equal 0: 4
Number of discarded cards player 1: 0
Number of discarded cards player 2: 2
Number of cards player 1: 5
Number of cards player 2: 4
Bug found! Deck is decreased by more than 1.
Pass: 2
Last card in deck player 2: 4
Number of discarded cards player 1: 0
Number of discarded cards player 2: 2
Number of cards player 1: 5
Number of cards player 2: 4
Calling SeaHag function in cardEffect!
Last card in deck player 2: 4
Bug found! last card for player 2 does not equal 0: 4
Number of discarded cards player 1: 0
Number of discarded cards player 2: 3
Number of cards player 1: 5
Number of cards player 2: 1
Bug found! Deck is decreased by more than 1.
Pass: 3
Last card in deck player 2: 4
Number of discarded cards player 1: 0
Number of discarded cards player 2: 3
Number of cards player 1: 5
Number of cards player 2: 1
Calling SeaHag function in cardEffect!
Last card in deck player 2: 0
Number of discarded cards player 1: 0
Number of discarded cards player 2: 4
Number of cards player 1: 5
Number of cards player 2: -2
Bug found! Deck is decreased by more than 1.
Pass: 4
Last card in deck player 2: 0
Number of discarded cards player 1: 0
Number of discarded cards player 2: 4
Number of cards player 1: 5
Number of cards player 2: -2
Calling SeaHag function in cardEffect!
Last card in deck player 2: 0
Number of discarded cards player 1: 0
Number of discarded cards player 2: 5
Number of cards player 1: 5
Number of cards player 2: -5
Bug found! Deck is decreased by more than 1.
All cardtest #4 testing is finished! 
File 'dominion.c'
Lines executed:34.38% of 576
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Function prototypes 
        -:    9:int adventurer_refactor( int drawntreasure, struct gameState *state, int temphand[], int z, int cardDrawn, int currentPlayer );
        -:   10:int smithy_refactor(int currentPlayer, struct gameState *state, int handPos);
        -:   11:int steward_refactor(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3 );
        -:   12:int council_room_refactor(int currentPlayer, struct gameState *state, int handPos);
        -:   13:int remodel_refactor(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos );
        -:   14:
     5790:   15:int compare(const void* a, const void* b) {
     5790:   16:  if (*(int*)a > *(int*)b)
     2826:   17:    return 1;
     2964:   18:  if (*(int*)a < *(int*)b)
     1723:   19:    return -1;
     1241:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        7:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
        7:   51:  SelectStream(1);
        7:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
        7:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        7:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       77:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      770:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      700:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        7:   80:  if (numPlayers == 2)
        -:   81:    {
        7:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        7:   94:  if (numPlayers == 2)
        -:   95:    {
        7:   96:      state->supplyCount[estate] = 8;
        7:   97:      state->supplyCount[duchy] = 8;
        7:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        7:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  109:  state->supplyCount[silver] = 40;
        7:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      147:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
     1155:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
     1085:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       84:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
       14:  122:		  if (numPlayers == 2){ 
       14:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       56:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       70:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1015:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       21:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
       14:  147:      state->deckCount[i] = 0;
       56:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       42:  150:	  state->deck[i][j] = estate;
       42:  151:	  state->deckCount[i]++;
        -:  152:	}
      112:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
       98:  155:	  state->deck[i][j] = copper;
       98:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       21:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
       14:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       21:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       14:  173:      state->handCount[i] = 0;
       14:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      196:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
      189:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        7:  189:  state->outpostPlayed = 0;
        7:  190:  state->phase = 0;
        7:  191:  state->numActions = 1;
        7:  192:  state->numBuys = 1;
        7:  193:  state->playedCardCount = 0;
        7:  194:  state->whoseTurn = 0;
        7:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       42:  199:  for (it = 0; it < 5; it++){
       35:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        7:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        7:  205:  return 0;
        -:  206:}
        -:  207:
      110:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
      110:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
      110:  216:  if (state->deckCount[player] < 1)
       76:  217:    return -1;
       34:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     1358:  221:  while (state->deckCount[player] > 0) {
     1290:  222:    card = floor(Random() * state->deckCount[player]);
     1290:  223:    newDeck[newDeckPos] = state->deck[player][card];
     1290:  224:    newDeckPos++;
    21919:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
    20629:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
     1290:  228:    state->deckCount[player]--;
        -:  229:  }
     1324:  230:  for (i = 0; i < newDeckPos; i++) {
     1290:  231:    state->deck[player][i] = newDeck[i];
     1290:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       34:  235:  return 0;
        -:  236:}
        -:  237:
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
        4:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        4:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
        4:  287:  who = state->whoseTurn;
        -:  288:
        4:  289:  if (state->numBuys < 1){
        1:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
        1:  292:    return -1;
        3:  293:  } else if (supplyCount(supplyPos, state) <1){
        1:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
        1:  296:    return -1;
        2:  297:  } else if (state->coins < getCost(supplyPos)){
        1:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  300:    return -1;
        -:  301:  } else {
        1:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
        1:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
        1:  306:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  307:    state->numBuys--;
        1:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
        1:  315:  return 0;
        -:  316:}
        -:  317:
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
       12:  327:int supplyCount(int card, struct gameState *state) {
       12:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
        5:  353:int whoseTurn(struct gameState *state) {
        5:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
       80:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
       80:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
        6:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
       74:  408:  j = 0;
     1924:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
     1850:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
       51:  413:	  j++;
        -:  414:	}
        -:  415:    }
       74:  416:  if ( j >= 3)
        -:  417:    {
        9:  418:      return 1;
        -:  419:    }
        -:  420:
       65:  421:  return 0;
        -:  422:}
        -:  423:
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
      135:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
      135:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
       55:  540:    for (i = 0; i < state->discardCount[player];i++){
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
       55:  545:    state->deckCount[player] = state->discardCount[player];
       55:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
       55:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
       55:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
       55:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
       55:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
       55:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
       55:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
       55:  566:    if (deckCounter == 0)
       55:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
       80:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
       80:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
       80:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
       80:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       80:  583:    state->deckCount[player]--;
       80:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
       80:  587:  return 0;
        -:  588:}
        -:  589:
        7:  590:int getCost(int cardNumber)
        -:  591:{
        7:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
        7:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
        5:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        5:  660:  int currentPlayer = whoseTurn(state);
        5:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        5:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        5:  665:  int drawntreasure=0;
        5:  666:  int cardDrawn = 0;
        5:  667:  int z = 0;// this is the counter for the temp hand
        5:  668:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
        5:  674:  switch( card ) 
        -:  675:    {
        -:  676:    case adventurer:
        -:  677:
        -:  678:      // Code moved to the end of the file 
    #####:  679:      adventurer_refactor(drawntreasure, state, temphand, z, cardDrawn, currentPlayer );
        -:  680:			
        -:  681:    case council_room:
    #####:  682:      council_room_refactor(currentPlayer, state, handPos);
        -:  683:			
        -:  684:    case feast:
        -:  685:      //gain card with cost up to 5
        -:  686:      //Backup hand
    #####:  687:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  688:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  689:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  690:      }
        -:  691:      //Backup hand
        -:  692:
        -:  693:      //Update Coins for Buy
    #####:  694:      updateCoins(currentPlayer, state, 5);
    #####:  695:      x = 1;//Condition to loop on
    #####:  696:      while( x == 1) {//Buy one card
    #####:  697:	if (supplyCount(choice1, state) <= 0){
    #####:  698:	  if (DEBUG)
        -:  699:	    printf("None of that card left, sorry!\n");
        -:  700:
    #####:  701:	  if (DEBUG){
        -:  702:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  703:	  }
        -:  704:	}
    #####:  705:	else if (state->coins < getCost(choice1)){
    #####:  706:	  printf("That card is too expensive!\n");
        -:  707:
    #####:  708:	  if (DEBUG){
        -:  709:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  710:	  }
        -:  711:	}
        -:  712:	else{
        -:  713:
    #####:  714:	  if (DEBUG){
        -:  715:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:	  }
        -:  717:
    #####:  718:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  719:	  x = 0;//No more buying cards
        -:  720:
    #####:  721:	  if (DEBUG){
        -:  722:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:	  }
        -:  724:
        -:  725:	}
        -:  726:      }     
        -:  727:
        -:  728:      //Reset Hand
    #####:  729:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  730:	state->hand[currentPlayer][i] = temphand[i];
    #####:  731:	temphand[i] = -1;
        -:  732:      }
        -:  733:      //Reset Hand
        -:  734:      			
    #####:  735:      return 0;
        -:  736:			
        -:  737:    case gardens:
    #####:  738:      return -1;
        -:  739:			
        -:  740:    case mine:
    #####:  741:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  742:
    #####:  743:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:		
    #####:  748:      if (choice2 > treasure_map || choice2 < curse)
        -:  749:	{
    #####:  750:	  return -1;
        -:  751:	}
        -:  752:
    #####:  753:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  754:	{
    #####:  755:	  return -1;
        -:  756:	}
        -:  757:
    #####:  758:      gainCard(choice2, state, 2, currentPlayer);
        -:  759:
        -:  760:      //discard card from hand
    #####:  761:      discardCard(handPos, currentPlayer, state, 0);
        -:  762:
        -:  763:      //discard trashed card
    #####:  764:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  765:	{
    #####:  766:	  if (state->hand[currentPlayer][i] == j)
        -:  767:	    {
    #####:  768:	      discardCard(i, currentPlayer, state, 0);			
    #####:  769:	      break;
        -:  770:	    }
        -:  771:	}
        -:  772:			
    #####:  773:      return 0;
        -:  774:			
        -:  775:    case remodel:
        -:  776:      // Code moved to the end of the file 
    #####:  777:      remodel_refactor( currentPlayer, state, choice1, choice2, handPos );
        -:  778:		
        -:  779:    case smithy:
        -:  780:      // Code moved to the end of the file 
    #####:  781:      smithy_refactor(currentPlayer, state, handPos);
        -:  782:		
        -:  783:    case village:
        -:  784:      //+1 Card
    #####:  785:      drawCard(currentPlayer, state);
        -:  786:			
        -:  787:      //+2 Actions
    #####:  788:      state->numActions = state->numActions + 2;
        -:  789:			
        -:  790:      //discard played card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
    #####:  792:      return 0;
        -:  793:		
        -:  794:    case baron:
    #####:  795:      state->numBuys++;//Increase buys by 1!
    #####:  796:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  797:	int p = 0;//Iterator for hand!
    #####:  798:	int card_not_discarded = 1;//Flag for discard set!
    #####:  799:	while(card_not_discarded){
    #####:  800:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  801:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  802:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  803:	    state->discardCount[currentPlayer]++;
    #####:  804:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  805:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  806:	    }
    #####:  807:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  808:	    state->handCount[currentPlayer]--;
    #####:  809:	    card_not_discarded = 0;//Exit the loop
        -:  810:	  }
    #####:  811:	  else if (p > state->handCount[currentPlayer]){
    #####:  812:	    if(DEBUG) {
        -:  813:	      printf("No estate cards in your hand, invalid choice\n");
        -:  814:	      printf("Must gain an estate if there are any\n");
        -:  815:	    }
    #####:  816:	    if (supplyCount(estate, state) > 0){
    #####:  817:	      gainCard(estate, state, 0, currentPlayer);
    #####:  818:	      state->supplyCount[estate]--;//Decrement estates
    #####:  819:	      if (supplyCount(estate, state) == 0){
    #####:  820:		isGameOver(state);
        -:  821:	      }
        -:  822:	    }
    #####:  823:	    card_not_discarded = 0;//Exit the loop
        -:  824:	  }
        -:  825:			    
        -:  826:	  else{
    #####:  827:	    p++;//Next card
        -:  828:	  }
        -:  829:	}
        -:  830:      }
        -:  831:			    
        -:  832:      else{
    #####:  833:	if (supplyCount(estate, state) > 0){
    #####:  834:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  835:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  836:	  if (supplyCount(estate, state) == 0){
    #####:  837:	    isGameOver(state);
        -:  838:	  }
        -:  839:	}
        -:  840:      }
        -:  841:      
    #####:  842:      return 0;
        -:  843:		
        -:  844:    case great_hall:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
        -:  847:			
        -:  848:      //+1 Actions
    #####:  849:      state->numActions++;
        -:  850:			
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
    #####:  853:      return 0;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
        -:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
        -:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
        -:  898:			}
        -:  899:		    }
        -:  900:		}
        -:  901:	    }
        -:  902:				
        -:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
        -:  907:      // Code moved to the end of the file 
    #####:  908:      steward_refactor( currentPlayer, state, handPos, choice1, choice2, choice3 );
        -:  909:		
        -:  910:    case tribute:
    #####:  911:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  912:	if (state->deckCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	  state->deckCount[nextPlayer]--;
        -:  915:	}
    #####:  916:	else if (state->discardCount[nextPlayer] > 0){
    #####:  917:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  918:	  state->discardCount[nextPlayer]--;
        -:  919:	}
        -:  920:	else{
        -:  921:	  //No Card to Reveal
    #####:  922:	  if (DEBUG){
        -:  923:	    printf("No cards to reveal\n");
        -:  924:	  }
        -:  925:	}
        -:  926:      }
        -:  927:	    
        -:  928:      else{
    #####:  929:	if (state->deckCount[nextPlayer] == 0){
    #####:  930:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  931:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  932:	    state->deckCount[nextPlayer]++;
    #####:  933:	    state->discard[nextPlayer][i] = -1;
    #####:  934:	    state->discardCount[nextPlayer]--;
        -:  935:	  }
        -:  936:			    
    #####:  937:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  938:	} 
    #####:  939:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  940:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  941:	state->deckCount[nextPlayer]--;
    #####:  942:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  943:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  944:	state->deckCount[nextPlayer]--;
        -:  945:      }    
        -:  946:		       
    #####:  947:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  948:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  949:	state->playedCardCount++;
    #####:  950:	tributeRevealedCards[1] = -1;
        -:  951:      }
        -:  952:
    #####:  953:      for (i = 0; i <= 2; i ++){
    #####:  954:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  955:	  state->coins += 2;
        -:  956:	}
        -:  957:		    
    #####:  958:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  959:	  drawCard(currentPlayer, state);
    #####:  960:	  drawCard(currentPlayer, state);
        -:  961:	}
        -:  962:	else{//Action Card
    #####:  963:	  state->numActions = state->numActions + 2;
        -:  964:	}
        -:  965:      }
        -:  966:	    
    #####:  967:      return 0;
        -:  968:		
        -:  969:    case ambassador:
    #####:  970:      j = 0;		//used to check if player has enough cards to discard
        -:  971:
    #####:  972:      if (choice2 > 2 || choice2 < 0)
        -:  973:	{
    #####:  974:	  return -1;				
        -:  975:	}
        -:  976:
    #####:  977:      if (choice1 == handPos)
        -:  978:	{
    #####:  979:	  return -1;
        -:  980:	}
        -:  981:
    #####:  982:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  983:	{
    #####:  984:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  985:	    {
    #####:  986:	      j++;
        -:  987:	    }
        -:  988:	}
    #####:  989:      if (j < choice2)
        -:  990:	{
    #####:  991:	  return -1;				
        -:  992:	}
        -:  993:
    #####:  994:      if (DEBUG) 
        -:  995:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  996:
        -:  997:      //increase supply count for choosen card by amount being discarded
    #####:  998:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  999:			
        -: 1000:      //each other player gains a copy of revealed card
    #####: 1001:      for (i = 0; i < state->numPlayers; i++)
        -: 1002:	{
    #####: 1003:	  if (i != currentPlayer)
        -: 1004:	    {
    #####: 1005:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1006:	    }
        -: 1007:	}
        -: 1008:
        -: 1009:      //discard played card from hand
    #####: 1010:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1011:
        -: 1012:      //trash copies of cards returned to supply
    #####: 1013:      for (j = 0; j < choice2; j++)
        -: 1014:	{
    #####: 1015:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:	    {
    #####: 1017:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1018:		{
    #####: 1019:		  discardCard(i, currentPlayer, state, 1);
    #####: 1020:		  break;
        -: 1021:		}
        -: 1022:	    }
        -: 1023:	}			
        -: 1024:
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case cutpurse:
        -: 1028:
    #####: 1029:      updateCoins(currentPlayer, state, 2);
    #####: 1030:      for (i = 0; i < state->numPlayers; i++)
        -: 1031:	{
    #####: 1032:	  if (i != currentPlayer)
        -: 1033:	    {
    #####: 1034:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1035:		{
    #####: 1036:		  if (state->hand[i][j] == copper)
        -: 1037:		    {
    #####: 1038:		      discardCard(j, i, state, 0);
    #####: 1039:		      break;
        -: 1040:		    }
    #####: 1041:		  if (j == state->handCount[i])
        -: 1042:		    {
    #####: 1043:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1044:			{
    #####: 1045:			  if (DEBUG)
        -: 1046:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1047:			}	
    #####: 1048:		      break;
        -: 1049:		    }		
        -: 1050:		}
        -: 1051:					
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}				
        -: 1055:
        -: 1056:      //discard played card from hand
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1058:
    #####: 1059:      return 0;
        -: 1060:
        -: 1061:		
        -: 1062:    case embargo: 
        -: 1063:      //+2 Coins
    #####: 1064:      state->coins = state->coins + 2;
        -: 1065:			
        -: 1066:      //see if selected pile is in play
    #####: 1067:      if ( state->supplyCount[choice1] == -1 )
        -: 1068:	{
    #####: 1069:	  return -1;
        -: 1070:	}
        -: 1071:			
        -: 1072:      //add embargo token to selected supply pile
    #####: 1073:      state->embargoTokens[choice1]++;
        -: 1074:			
        -: 1075:      //trash card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case outpost:
        -: 1080:      //set outpost flag
    #####: 1081:      state->outpostPlayed++;
        -: 1082:			
        -: 1083:      //discard card
    #####: 1084:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case salvager:
        -: 1088:      //+1 buy
    #####: 1089:      state->numBuys++;
        -: 1090:			
    #####: 1091:      if (choice1)
        -: 1092:	{
        -: 1093:	  //gain coins equal to trashed card
    #####: 1094:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1095:	  //trash card
    #####: 1096:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1097:	}
        -: 1098:			
        -: 1099:      //discard card
    #####: 1100:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1101:      return 0;
        -: 1102:		
        -: 1103:    case sea_hag:
       15: 1104:      for (i = 0; i < state->numPlayers; i++){
       10: 1105:	if (i != currentPlayer){
        5: 1106:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        5: 1107:	  state->discardCount[i]++;
        5: 1108:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1109:	}
        -: 1110:      }
        5: 1111:      return 0;
        -: 1112:		
        -: 1113:    case treasure_map:
        -: 1114:      //search hand for another treasure_map
    #####: 1115:      index = -1;
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1119:	    {
    #####: 1120:	      index = i;
    #####: 1121:	      break;
        -: 1122:	    }
        -: 1123:	}
    #####: 1124:      if (index > -1)
        -: 1125:	{
        -: 1126:	  //trash both treasure cards
    #####: 1127:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1128:	  discardCard(index, currentPlayer, state, 1);
        -: 1129:
        -: 1130:	  //gain 4 Gold cards
    #####: 1131:	  for (i = 0; i < 4; i++)
        -: 1132:	    {
    #####: 1133:	      gainCard(gold, state, 1, currentPlayer);
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //return success
    #####: 1137:	  return 1;
        -: 1138:	}
        -: 1139:			
        -: 1140:      //no second treasure_map found in hand
    #####: 1141:      return -1;
        -: 1142:    }
        -: 1143:	
    #####: 1144:  return -1;
        -: 1145:}
        -: 1146:
       20: 1147:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1148:{
        -: 1149:	
        -: 1150:  //if card is not trashed, added to Played pile 
       20: 1151:  if (trashFlag < 1)
        -: 1152:    {
        -: 1153:      //add card to played pile
       10: 1154:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1155:      state->playedCardCount++;
        -: 1156:    }
        -: 1157:	
        -: 1158:  //set played card to -1
       20: 1159:  state->hand[currentPlayer][handPos] = -1;
        -: 1160:	
        -: 1161:  //remove card from player's hand
       20: 1162:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1163:    {
        -: 1164:      //reduce number of cards in hand
        1: 1165:      state->handCount[currentPlayer]--;
        -: 1166:    }
       19: 1167:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
        1: 1170:      state->handCount[currentPlayer]--;
        -: 1171:    }
        -: 1172:  else 	
        -: 1173:    {
        -: 1174:      //replace discarded card with last card in hand
       18: 1175:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1176:      //set last card to -1
       18: 1177:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1178:      //reduce number of cards in hand
       18: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:	
       20: 1182:  return 0;
        -: 1183:}
        -: 1184:
        1: 1185:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1186:{
        -: 1187:  //Note: supplyPos is enum of choosen card
        -: 1188:	
        -: 1189:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1190:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1191:    {
    #####: 1192:      return -1;
        -: 1193:    }
        -: 1194:	
        -: 1195:  //added card for [whoseTurn] current player:
        -: 1196:  // toFlag = 0 : add to discard
        -: 1197:  // toFlag = 1 : add to deck
        -: 1198:  // toFlag = 2 : add to hand
        -: 1199:
        1: 1200:  if (toFlag == 1)
        -: 1201:    {
    #####: 1202:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1203:      state->deckCount[player]++;
        -: 1204:    }
        1: 1205:  else if (toFlag == 2)
        -: 1206:    {
    #####: 1207:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1208:      state->handCount[player]++;
        -: 1209:    }
        -: 1210:  else
        -: 1211:    {
        1: 1212:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1213:      state->discardCount[player]++;
        -: 1214:    }
        -: 1215:	
        -: 1216:  //decrease number in supply pile
        1: 1217:  state->supplyCount[supplyPos]--;
        -: 1218:	 
        1: 1219:  return 0;
        -: 1220:}
        -: 1221:
        7: 1222:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1223:{
        -: 1224:  int i;
        -: 1225:	
        -: 1226:  //reset coin count
        7: 1227:  state->coins = 0;
        -: 1228:
        -: 1229:  //add coins for each Treasure card in player's hand
       42: 1230:  for (i = 0; i < state->handCount[player]; i++)
        -: 1231:    {
       35: 1232:      if (state->hand[player][i] == copper)
        -: 1233:	{
       28: 1234:	  state->coins += 1;
        -: 1235:	}
        7: 1236:      else if (state->hand[player][i] == silver)
        -: 1237:	{
    #####: 1238:	  state->coins += 2;
        -: 1239:	}
        7: 1240:      else if (state->hand[player][i] == gold)
        -: 1241:	{
    #####: 1242:	  state->coins += 3;
        -: 1243:	}	
        -: 1244:    }	
        -: 1245:
        -: 1246:  //add bonus
        7: 1247:  state->coins += bonus;
        -: 1248:
        7: 1249:  return 0;
        -: 1250:}
        -: 1251:/*********************************************************************************************
        -: 1252:
        -: 1253:This section is for refactoring the 5 cards, I moved the code related to executing the action
        -: 1254:for these cards to be inside functions, and I called the apropriate fucntion in CardEffect() 
        -: 1255:
        -: 1256:*********************************************************************************************/
        -: 1257:
       10: 1258:int adventurer_refactor( int drawntreasure, struct gameState *state, int temphand[], int z, int cardDrawn, int currentPlayer ) {
        -: 1259:
        -: 1260: // while(drawntreasure<2){
       40: 1261:  while(drawntreasure<2){
       20: 1262:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       20: 1263:      shuffle(currentPlayer, state);
        -: 1264:    }
       20: 1265:    drawCard(currentPlayer, state);
       20: 1266:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       40: 1267:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       20: 1268:      drawntreasure++;
        -: 1269:    else{
    #####: 1270:      temphand[z]=cardDrawn;
    #####: 1271:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1272:      z++;
        -: 1273:    }
        -: 1274:        }
       20: 1275:        while(z-1>=0){
    #####: 1276:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1277:    z=z-1;
        -: 1278:        }
       10: 1279:      return 0;
        -: 1280:}
        -: 1281:
       10: 1282:int smithy_refactor(int currentPlayer, struct gameState *state, int handPos) {
        -: 1283:  //+3 Cards
        -: 1284:  int i;
       40: 1285:  for (i = 0; i < 3; i++)
        -: 1286:  {
       30: 1287:    drawCard(currentPlayer, state);
        -: 1288:  }
        -: 1289:      
        -: 1290:  //discard card from hand
        -: 1291:  //discardCard(handPos, currentPlayer, state, 0);
       10: 1292:  discardCard(handPos, currentPlayer, state, 1);
       10: 1293:  return 0;
        -: 1294:}
        -: 1295:
    #####: 1296:int steward_refactor(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3 ) {
        -: 1297:
    #####: 1298:  if (choice1 == 1)
        -: 1299:  {
        -: 1300:    //+2 cards
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
        -: 1303:  }
    #####: 1304:    else if (choice1 == 2)
        -: 1305:  {
        -: 1306:    //-2 coins
        -: 1307:    //state->coins = state->coins - 2;
    #####: 1308:    state->coins = state->coins + 2;
        -: 1309:  }
        -: 1310:    else
        -: 1311:  {
        -: 1312:    //trash 2 cards in hand
    #####: 1313:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1314:    discardCard(choice3, currentPlayer, state, 1);
        -: 1315:  }
        -: 1316:      
        -: 1317:    //discard card from hand
    #####: 1318:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1319:    return 0;
        -: 1320:}
       10: 1321:int council_room_refactor(int currentPlayer, struct gameState *state, int handPos) {
        -: 1322:
        -: 1323:  int i;
        -: 1324:  //+4 Cards
       50: 1325:  for (i = 0; i < 4; i++)
        -: 1326:  {
       40: 1327:    drawCard(currentPlayer, state);
        -: 1328:  }
        -: 1329:      
        -: 1330:  //+1 Buy
       10: 1331:  state->numBuys++;
        -: 1332:      
        -: 1333:  //Each other player draws a card
       30: 1334:  for (i = 0; i < state->numPlayers; i++)
        -: 1335:  {
       20: 1336:    if ( i != currentPlayer ) //( i == currentPlayer )
        -: 1337:      {
       10: 1338:        drawCard(i, state);
        -: 1339:      }
        -: 1340:  }
        -: 1341:      
        -: 1342:  //put played card in played card pile
       10: 1343:  discardCard(handPos, currentPlayer, state, 0);
        -: 1344:      
       10: 1345:  return 0;
        -: 1346:}
        -: 1347:
    #####: 1348:int remodel_refactor(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos ) {
        -: 1349:
        -: 1350:  int j, i;
    #####: 1351:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1352:
        -: 1353:  //if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
    #####: 1354:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1355:  {
    #####: 1356:    return -1;
        -: 1357:  }
        -: 1358:
    #####: 1359:  gainCard(choice2, state, 0, currentPlayer);
        -: 1360:
        -: 1361:  //discard card from hand
    #####: 1362:  discardCard(handPos, currentPlayer, state, 0);
        -: 1363:
        -: 1364:  //discard trashed card
    #####: 1365:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:  {
    #####: 1367:    if (state->hand[currentPlayer][i] == j)
        -: 1368:      {
    #####: 1369:        discardCard(i, currentPlayer, state, 0);      
    #####: 1370:        break;
        -: 1371:      }
        -: 1372:  }
    #####: 1373:  return 0;
        -: 1374:
        -: 1375:}
        -: 1376:      
        -: 1377:      
        -: 1378://end of dominion.c
        -: 1379:
