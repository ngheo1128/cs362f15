Rachael McConnell
Jeff Moss
Wilson Chan
CS362 Fall 2015

Final Project Part A

1. Explain testIsValid function
The testIsValid() method calls the testIsValid(Object[], long) method with two arguments: testUrlParts and UrlValidator.ALLOW_ALL_SCHEMES. The testUrlParts object is an array object that specifies which parts of the array will be used for testing. The UrlValidator.ALLOW_ALL_SCHEMES sets the UrlValidator to allow all validly formatted schemes to pass validation instead of supplying only a set of valid schemes. 

From that point, testIsValid(Object[], long) creates a new instance of the url validator. It then asserts that an obviously correct url works (google.com) and then runs a set of tests taking the test url through all permutations and combinations of the testUrlParts object. The managing of going through all permutations is implemented using a for loop and a do while loop. The for loop iterates over each test part (from the test object array received as an argument). As it iterates over this array, it appends those test parts in the appropriate order into a string buffer. Once the string buffer is built with the appended testObjects, it is then parsed to a string. That string is then passed into the isValid method within the urlVal class and returns a boolean result. If the url is valid, result becomes true and the url is printed in the console.

If the option “printStatus” is true, debugging information is printed to the console as well.

Lastly, the testIsValid() method calls setUp() method. This just resets the testPartsIndex array to 0.

2. Total number of urls it is testing
testUrlScheme - 9
testUrlAuthority - 19
testUrlPort - 7
testPath  - 10
testUrlQuery - 3
The number of URL combinations is found by multiplying 9 x 19 x 7 x 10 x 3. 31,920 URLs are tested even though there are 35,910 URL combinations. The do-while-loop in testIsValid() terminates once incrementTestPartsIndex() returns false, which occurs at the beginning of the “” scheme. Out of the URLs tested, there are 1890 valid URLs. Valid URLs are printed to the console. 
 
3. Explain how it is building all the urls
First, one object is grabbed from each testUrlScheme, testUrlAuthority, testUrlPort, testPath, and testUrlQuery. Each of these objects store a string and a boolean variable. Assembling these strings together creates a potential URL. The assembled string is passed in to check validity. If all parts of the URL are valid (ie. the entire assembled string), then isValid() returns true.

4. Give an example of a valid url and an invalid url being tested
Valid: http://www.google.com:80/test1/?action=view
Invalid: 3ht://1.2.3.4.5:-1/../

5. Do you think that a real world test (URL Validator’s testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts and complexity)? Explain in a few lines.
Real world tests are very similar to the tests that we have written in this class. The testIsValid() test and the unit/card tests we have written both only test a limited number of the potential inputs. They would all be improved by testing more edge cases and more potential inputs. They both also use input domain partitioning. One way that the tests differ is that testIsValid() uses hard-coded values, whereas the tests that we have written use variables randomly assigned to check whether specific conditions are met. The only difference is that the testIsValid() method is slightly more complex than some of the tests used for dominion.
