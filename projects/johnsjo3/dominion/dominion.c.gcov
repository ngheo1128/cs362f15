        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/* instructor comments: file is updated. */
    #####:    9:int dummymethod()
        -:   10:{
    #####:   11:	return 0;
        -:   12:}
  2172125:   13:int compare(const void* a, const void* b) {
  2172125:   14:  if (*(int*)a > *(int*)b)
   903092:   15:    return 1;
  1269033:   16:  if (*(int*)a < *(int*)b)
   968613:   17:    return -1;
   300420:   18:  return 0;
        -:   19:}
        -:   20:
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
    10000:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
    10000:   49:  SelectStream(1);
    10000:   50:  PutSeed((long)randomSeed);
        -:   51:  
        -:   52:  //check number of players
    10000:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   54:    {
      482:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
     9518:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
   101270:   62:  for (i = 0; i < 10; i++)
        -:   63:    {
  1012194:   64:      for (j = 0; j < 10; j++)
        -:   65:        {
   920442:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   67:	    {
      423:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
     9095:   78:  if (numPlayers == 2)
        -:   79:    {
     3014:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
     6081:   82:  else if (numPlayers == 3)
        -:   83:    {
     3042:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
     3039:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
     9095:   92:  if (numPlayers == 2)
        -:   93:    {
     3014:   94:      state->supplyCount[estate] = 8;
     3014:   95:      state->supplyCount[duchy] = 8;
     3014:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
     6081:  100:      state->supplyCount[estate] = 12;
     6081:  101:      state->supplyCount[duchy] = 12;
     6081:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
     9095:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9095:  107:  state->supplyCount[silver] = 40;
     9095:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
   190995:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  112:    {
  1630613:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  114:	{
  1516063:  115:	  if (kingdomCards[j] == i)
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
    74100:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  119:		{
     6750:  120:		  if (numPlayers == 2){ 
     2245:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
     4505:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
    60600:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
    67350:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
  1448713:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
    36405:  143:  for (i = 0; i < numPlayers; i++)
        -:  144:    {
    27310:  145:      state->deckCount[i] = 0;
   109240:  146:      for (j = 0; j < 3; j++)
        -:  147:	{
    81930:  148:	  state->deck[i][j] = estate;
    81930:  149:	  state->deckCount[i]++;
        -:  150:	}
   218480:  151:      for (j = 3; j < 10; j++)
        -:  152:	{
   191170:  153:	  state->deck[i][j] = copper;
   191170:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
    36405:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {
    27310:  161:      if ( shuffle(i, state) < 0 )
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
    36405:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
    27310:  171:      state->handCount[i] = 0;
    27310:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
   254660:  181:  for (i = 0; i <= treasure_map; i++)
        -:  182:    {
   245565:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
     9095:  187:  state->outpostPlayed = 0;
     9095:  188:  state->phase = 0;
     9095:  189:  state->numActions = 1;
     9095:  190:  state->numBuys = 1;
     9095:  191:  state->playedCardCount = 0;
     9095:  192:  state->whoseTurn = 0;
     9095:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
    54570:  197:  for (it = 0; it < 5; it++){
    45475:  198:    drawCard(state->whoseTurn, state);
        -:  199:  }
        -:  200:
     9095:  201:  updateCoins(state->whoseTurn, state, 0);
        -:  202:
     9095:  203:  return 0;
        -:  204:}
        -:  205:
    28319:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
    28319:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
    28319:  214:  if (state->deckCount[player] < 1)
        4:  215:    return -1;
    28315:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
   581021:  219:  while (state->deckCount[player] > 0) {
   524391:  220:    card = floor(Random() * state->deckCount[player]);
   524391:  221:    newDeck[newDeckPos] = state->deck[player][card];
   524391:  222:    newDeckPos++;
 22196213:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
 21671822:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
   524391:  226:    state->deckCount[player]--;
        -:  227:  }
   552706:  228:  for (i = 0; i < newDeckPos; i++) {
   524391:  229:    state->deck[player][i] = newDeck[i];
   524391:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
    28315:  233:  return 0;
        -:  234:}
        -:  235:
    #####:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:	
    #####:  274:  return 0;
        -:  275:}
        -:  276:
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
    #####:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
    #####:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
    #####:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
    #####:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:    state->numBuys--;
    #####:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
    #####:  351:int whoseTurn(struct gameState *state) {
    #####:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
        -:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
    10000:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
    10000:  400:  if (state->supplyCount[province] == 0)
        -:  401:    {
      562:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
     9438:  406:  j = 0;
   264264:  407:  for (i = 0; i <= treasure_map; i++)
        -:  408:    {
   254826:  409:      if (state->supplyCount[i] == 0)
        -:  410:	{
     1147:  411:	  j++;
        -:  412:	}
        -:  413:    }
     9438:  414:  if ( j >= 3)
        -:  415:    {
      354:  416:      return 1;
        -:  417:    }
        -:  418:
     9084:  419:  return 0;
        -:  420:}
        -:  421:
      100:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
      100:  425:  int score = 0;
        -:  426:  //score from hand
    16889:  427:  for (i = 0; i < state->handCount[player]; i++)
        -:  428:    {
    16789:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
    16789:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
    16789:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
    16789:  432:      if (state->hand[player][i] == province) { score = score + 6; };
    16789:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    16789:  434:      if (state->hand[player][i] == gardens) { score = score + ( (state->handCount[player] + state->deckCount[player] + state->discardCount[player])	  / 10 ); };
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    17687:  438:  for (i = 0; i < state->discardCount[player]; i++)
        -:  439:    {
    17587:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
    17587:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
    17587:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
    17587:  443:      if (state->discard[player][i] == province) { score = score + 6; };
    17587:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    17587:  445:      if (state->discard[player][i] == gardens) { score = score + ( (state->handCount[player] + state->deckCount[player] + state->discardCount[player]) / 10 ); };
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    17113:  449:  for (i = 0; i < state->deckCount[player]; i++)
        -:  450:    {
    17013:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
    17013:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
    17013:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
    17013:  454:      if (state->deck[player][i] == province) { score = score + 6; };
    17013:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    17013:  456:      if (state->deck[player][i] == gardens) { score = score + ( (state->handCount[player] + state->deckCount[player] + state->discardCount[player]) / 10 ); };
        -:  457:    }
        -:  458:
      100:  459:  return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
    45816:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
    45816:  533:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
      650:  538:    for (i = 0; i < state->discardCount[player];i++){
      642:  539:      state->deck[player][i] = state->discard[player][i];
      642:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
        8:  543:    state->deckCount[player] = state->discardCount[player];
        8:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
        8:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:   
        8:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
        8:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
        8:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        8:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
        8:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
        8:  564:    if (deckCounter == 0)
        3:  565:      return -1;
        -:  566:
        5:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        5:  568:    state->deckCount[player]--;
        5:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
    45808:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
    45808:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
    45808:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
    45808:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    45808:  581:    state->deckCount[player]--;
    45808:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
    45813:  585:  return 0;
        -:  586:}
        -:  587:
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
    #####:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  //int x;
        -:  657:  int index;
    #####:  658:  int currentPlayer = whoseTurn(state);
    #####:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
    #####:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  //int temphand[MAX_HAND];// moved above the if statement
        -:  663:  //int drawntreasure=0;
        -:  664:  //int cardDrawn;
        -:  665:  //int z = 0;// this is the counter for the temp hand
    #####:  666:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  667:    nextPlayer = 0;
        -:  668:  }
        -:  669:  
        -:  670:	
        -:  671:  //uses switch to select card and perform actions
    #####:  672:  switch( card ) 
        -:  673:    {
        -:  674:    case adventurer:
    #####:  675:     return playAdventurer(currentPlayer, state);
        -:  676:    /* OLD CODE *****************
        -:  677:      while(drawntreasure<2){
        -:  678:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  679:	  shuffle(currentPlayer, state);
        -:  680:	}
        -:  681:	drawCard(currentPlayer, state);
        -:  682:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  683:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  684:	  drawntreasure++;
        -:  685:	else{
        -:  686:	  temphand[z]=cardDrawn;
        -:  687:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  688:	  z++;
        -:  689:	}
        -:  690:      }
        -:  691:      while(z-1>=0){
        -:  692:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  693:	z=z-1;
        -:  694:      }
        -:  695:      return 0;
        -:  696:	*********************/
        -:  697:     
        -:  698:    case council_room:
    #####:  699:      return playCouncil_Room(handPos, currentPlayer, state);
        -:  700:      /* OLD CODE *******************
        -:  701:      //+4 Cards
        -:  702:      for (i = 0; i < 4; i++)
        -:  703:	{
        -:  704:	  drawCard(currentPlayer, state);
        -:  705:	}
        -:  706:			
        -:  707:      //+1 Buy
        -:  708:      state->numBuys++;
        -:  709:			
        -:  710:      //Each other player draws a card
        -:  711:      for (i = 0; i < state->numPlayers; i++)
        -:  712:	{
        -:  713:	  if ( i != currentPlayer )
        -:  714:	    {
        -:  715:	      drawCard(i, state);
        -:  716:	    }
        -:  717:	}
        -:  718:			
        -:  719:      //put played card in played card pile
        -:  720:      discardCard(handPos, currentPlayer, state, 0);
        -:  721:			
        -:  722:      return 0;
        -:  723:	*****************************/
        -:  724:               
        -:  725:    case feast:
    #####:  726:     return playFeast(choice1, currentPlayer, state);
        -:  727:    /* OLD CODE *****************
        -:  728:      //gain card with cost up to 5
        -:  729:      //Backup hand
        -:  730:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  731:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  732:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  733:      }
        -:  734:      //Backup hand
        -:  735:
        -:  736:      //Update Coins for Buy
        -:  737:      updateCoins(currentPlayer, state, 5);
        -:  738:      x = 1;//Condition to loop on
        -:  739:      while( x == 1) {//Buy one card
        -:  740:	if (supplyCount(choice1, state) <= 0){
        -:  741:	  if (DEBUG)
        -:  742:	    printf("None of that card left, sorry!\n");
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  746:	  }
        -:  747:	}
        -:  748:	else if (state->coins < getCost(choice1)){
        -:  749:	  printf("That card is too expensive!\n");
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  753:	  }
        -:  754:	}
        -:  755:	else{
        -:  756:
        -:  757:	  if (DEBUG){
        -:  758:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  759:	  }
        -:  760:
        -:  761:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  762:	  x = 0;//No more buying cards
        -:  763:
        -:  764:	  if (DEBUG){
        -:  765:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  766:	  }
        -:  767:
        -:  768:	}
        -:  769:      }     
        -:  770:
        -:  771:      //Reset Hand
        -:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  773:	state->hand[currentPlayer][i] = temphand[i];
        -:  774:	temphand[i] = -1;
        -:  775:      }
        -:  776:      //Reset Hand
        -:  777:      			
        -:  778:      return 0;
        -:  779:
        -:  780:      ****************/
        -:  781:      
        -:  782:    case gardens:
    #####:  783:      return -1;
        -:  784:			
        -:  785:    case mine:
    #####:  786:     return playMine(handPos, choice1, choice2, currentPlayer, state);
        -:  787:    /* OLD CODE ********
        -:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
        -:  790:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  791:	{
        -:  792:	  return -1;
        -:  793:	}
        -:  794:		
        -:  795:      if (choice2 > treasure_map || choice2 < curse)
        -:  796:	{
        -:  797:	  return -1;
        -:  798:	}
        -:  799:
        -:  800:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  801:	{
        -:  802:	  return -1;
        -:  803:	}
        -:  804:
        -:  805:      gainCard(choice2, state, 2, currentPlayer);
        -:  806:
        -:  807:      //discard card from hand
        -:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:
        -:  810:      //discard trashed card
        -:  811:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  812:	{
        -:  813:	  if (state->hand[currentPlayer][i] == j)
        -:  814:	    {
        -:  815:	      discardCard(i, currentPlayer, state, 0);			
        -:  816:	      break;
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      return 0;
        -:  821:    ***********************/
        -:  822:			
        -:  823:    case remodel:
    #####:  824:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  825:
    #####:  826:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  827:	{
    #####:  828:	  return -1;
        -:  829:	}
        -:  830:
    #####:  831:      gainCard(choice2, state, 0, currentPlayer);
        -:  832:
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
        -:  835:
        -:  836:      //discard trashed card
    #####:  837:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  838:	{
    #####:  839:	  if (state->hand[currentPlayer][i] == j)
        -:  840:	    {
    #####:  841:	      discardCard(i, currentPlayer, state, 0);			
    #####:  842:	      break;
        -:  843:	    }
        -:  844:	}
        -:  845:
        -:  846:
    #####:  847:      return 0;
        -:  848:		
        -:  849:    case smithy:
    #####:  850:      return playSmithy(handPos, currentPlayer, state);
        -:  851:      /* OLD CODE *******
        -:  852:      //+3 Cards
        -:  853:      for (i = 0; i < 3; i++)
        -:  854:	{
        -:  855:	  drawCard(currentPlayer, state);
        -:  856:	}
        -:  857:			
        -:  858:      //discard card from hand
        -:  859:      discardCard(handPos, currentPlayer, state, 0);
        -:  860:      return 0;
        -:  861:      **********************/
        -:  862:      
        -:  863:    case village:
        -:  864:      //+1 Card
    #####:  865:      drawCard(currentPlayer, state);
        -:  866:			
        -:  867:      //+2 Actions
    #####:  868:      state->numActions = state->numActions + 2;
        -:  869:			
        -:  870:      //discard played card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
    #####:  872:      return 0;
        -:  873:		
        -:  874:    case baron:
    #####:  875:      state->numBuys++;//Increase buys by 1!
    #####:  876:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  877:	int p = 0;//Iterator for hand!
    #####:  878:	int card_not_discarded = 1;//Flag for discard set!
    #####:  879:	while(card_not_discarded){
    #####:  880:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  881:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  882:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  883:	    state->discardCount[currentPlayer]++;
    #####:  884:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  885:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  886:	    }
    #####:  887:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  888:	    state->handCount[currentPlayer]--;
    #####:  889:	    card_not_discarded = 0;//Exit the loop
        -:  890:	  }
    #####:  891:	  else if (p > state->handCount[currentPlayer]){
    #####:  892:	    if(DEBUG) {
        -:  893:	      printf("No estate cards in your hand, invalid choice\n");
        -:  894:	      printf("Must gain an estate if there are any\n");
        -:  895:	    }
    #####:  896:	    if (supplyCount(estate, state) > 0){
    #####:  897:	      gainCard(estate, state, 0, currentPlayer);
    #####:  898:	      state->supplyCount[estate]--;//Decrement estates
    #####:  899:	      if (supplyCount(estate, state) == 0){
    #####:  900:		isGameOver(state);
        -:  901:	      }
        -:  902:	    }
    #####:  903:	    card_not_discarded = 0;//Exit the loop
        -:  904:	  }
        -:  905:			    
        -:  906:	  else{
    #####:  907:	    p++;//Next card
        -:  908:	  }
        -:  909:	}
        -:  910:      }
        -:  911:			    
        -:  912:      else{
    #####:  913:	if (supplyCount(estate, state) > 0){
    #####:  914:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  915:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  916:	  if (supplyCount(estate, state) == 0){
    #####:  917:	    isGameOver(state);
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:	    
        -:  922:      
    #####:  923:      return 0;
        -:  924:		
        -:  925:    case great_hall:
        -:  926:      //+1 Card
    #####:  927:      drawCard(currentPlayer, state);
        -:  928:			
        -:  929:      //+1 Actions
    #####:  930:      state->numActions++;
        -:  931:			
        -:  932:      //discard card from hand
    #####:  933:      discardCard(handPos, currentPlayer, state, 0);
    #####:  934:      return 0;
        -:  935:		
        -:  936:    case minion:
        -:  937:      //+1 action
    #####:  938:      state->numActions++;
        -:  939:			
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
        -:  942:			
    #####:  943:      if (choice1)		//+2 coins
        -:  944:	{
    #####:  945:	  state->coins = state->coins + 2;
        -:  946:	}
        -:  947:			
    #####:  948:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  949:	{
        -:  950:	  //discard hand
    #####:  951:	  while(numHandCards(state) > 0)
        -:  952:	    {
    #####:  953:	      discardCard(handPos, currentPlayer, state, 0);
        -:  954:	    }
        -:  955:				
        -:  956:	  //draw 4
    #####:  957:	  for (i = 0; i < 4; i++)
        -:  958:	    {
    #####:  959:	      drawCard(currentPlayer, state);
        -:  960:	    }
        -:  961:				
        -:  962:	  //other players discard hand and redraw if hand size > 4
    #####:  963:	  for (i = 0; i < state->numPlayers; i++)
        -:  964:	    {
    #####:  965:	      if (i != currentPlayer)
        -:  966:		{
    #####:  967:		  if ( state->handCount[i] > 4 )
        -:  968:		    {
        -:  969:		      //discard hand
    #####:  970:		      while( state->handCount[i] > 0 )
        -:  971:			{
    #####:  972:			  discardCard(handPos, i, state, 0);
        -:  973:			}
        -:  974:							
        -:  975:		      //draw 4
    #####:  976:		      for (j = 0; j < 4; j++)
        -:  977:			{
    #####:  978:			  drawCard(i, state);
        -:  979:			}
        -:  980:		    }
        -:  981:		}
        -:  982:	    }
        -:  983:				
        -:  984:	}
    #####:  985:      return 0;
        -:  986:		
        -:  987:    case steward:
    #####:  988:      if (choice1 == 1)
        -:  989:	{
        -:  990:	  //+2 cards
    #####:  991:	  drawCard(currentPlayer, state);
    #####:  992:	  drawCard(currentPlayer, state);
        -:  993:	}
    #####:  994:      else if (choice1 == 2)
        -:  995:	{
        -:  996:	  //+2 coins
    #####:  997:	  state->coins = state->coins + 2;
        -:  998:	}
        -:  999:      else
        -: 1000:	{
        -: 1001:	  //trash 2 cards in hand
    #####: 1002:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1003:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1004:	}
        -: 1005:			
        -: 1006:      //discard card from hand
    #####: 1007:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case tribute:
    #####: 1011:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1012:	if (state->deckCount[nextPlayer] > 0){
    #####: 1013:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1014:	  state->deckCount[nextPlayer]--;
        -: 1015:	}
    #####: 1016:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1017:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1018:	  state->discardCount[nextPlayer]--;
        -: 1019:	}
        -: 1020:	else{
        -: 1021:	  //No Card to Reveal
    #####: 1022:	  if (DEBUG){
        -: 1023:	    printf("No cards to reveal\n");
        -: 1024:	  }
        -: 1025:	}
        -: 1026:      }
        -: 1027:	    
        -: 1028:      else{
    #####: 1029:	if (state->deckCount[nextPlayer] == 0){
    #####: 1030:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1031:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1032:	    state->deckCount[nextPlayer]++;
    #####: 1033:	    state->discard[nextPlayer][i] = -1;
    #####: 1034:	    state->discardCount[nextPlayer]--;
        -: 1035:	  }
        -: 1036:			    
    #####: 1037:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1038:	} 
    #####: 1039:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1041:	state->deckCount[nextPlayer]--;
    #####: 1042:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:	state->deckCount[nextPlayer]--;
        -: 1045:      }    
        -: 1046:		       
    #####: 1047:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1048:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1049:	state->playedCardCount++;
    #####: 1050:	tributeRevealedCards[1] = -1;
        -: 1051:      }
        -: 1052:
    #####: 1053:      for (i = 0; i <= 2; i ++){
    #####: 1054:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1055:	  state->coins += 2;
        -: 1056:	}
        -: 1057:		    
    #####: 1058:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1059:	  drawCard(currentPlayer, state);
    #####: 1060:	  drawCard(currentPlayer, state);
        -: 1061:	}
        -: 1062:	else{//Action Card
    #####: 1063:	  state->numActions = state->numActions + 2;
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
    #####: 1067:      return 0;
        -: 1068:		
        -: 1069:    case ambassador:
    #####: 1070:      j = 0;		//used to check if player has enough cards to discard
        -: 1071:
    #####: 1072:      if (choice2 > 2 || choice2 < 0)
        -: 1073:	{
    #####: 1074:	  return -1;				
        -: 1075:	}
        -: 1076:
    #####: 1077:      if (choice1 == handPos)
        -: 1078:	{
    #####: 1079:	  return -1;
        -: 1080:	}
        -: 1081:
    #####: 1082:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1083:	{
    #####: 1084:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1085:	    {
    #####: 1086:	      j++;
        -: 1087:	    }
        -: 1088:	}
    #####: 1089:      if (j < choice2)
        -: 1090:	{
    #####: 1091:	  return -1;				
        -: 1092:	}
        -: 1093:
    #####: 1094:      if (DEBUG) 
        -: 1095:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1096:
        -: 1097:      //increase supply count for choosen card by amount being discarded
    #####: 1098:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1099:			
        -: 1100:      //each other player gains a copy of revealed card
    #####: 1101:      for (i = 0; i < state->numPlayers; i++)
        -: 1102:	{
    #####: 1103:	  if (i != currentPlayer)
        -: 1104:	    {
    #####: 1105:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1106:	    }
        -: 1107:	}
        -: 1108:
        -: 1109:      //discard played card from hand
    #####: 1110:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1111:
        -: 1112:      //trash copies of cards returned to supply
    #####: 1113:      for (j = 0; j < choice2; j++)
        -: 1114:	{
    #####: 1115:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1116:	    {
    #####: 1117:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1118:		{
    #####: 1119:		  discardCard(i, currentPlayer, state, 1);
    #####: 1120:		  break;
        -: 1121:		}
        -: 1122:	    }
        -: 1123:	}			
        -: 1124:
    #####: 1125:      return 0;
        -: 1126:		
        -: 1127:    case cutpurse:
        -: 1128:
    #####: 1129:      updateCoins(currentPlayer, state, 2);
    #####: 1130:      for (i = 0; i < state->numPlayers; i++)
        -: 1131:	{
    #####: 1132:	  if (i != currentPlayer)
        -: 1133:	    {
    #####: 1134:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1135:		{
    #####: 1136:		  if (state->hand[i][j] == copper)
        -: 1137:		    {
    #####: 1138:		      discardCard(j, i, state, 0);
    #####: 1139:		      break;
        -: 1140:		    }
    #####: 1141:		  if (j == state->handCount[i])
        -: 1142:		    {
    #####: 1143:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1144:			{
    #####: 1145:			  if (DEBUG)
        -: 1146:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1147:			}	
    #####: 1148:		      break;
        -: 1149:		    }		
        -: 1150:		}
        -: 1151:					
        -: 1152:	    }
        -: 1153:				
        -: 1154:	}				
        -: 1155:
        -: 1156:      //discard played card from hand
    #####: 1157:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:		
        -: 1162:    case embargo: 
        -: 1163:      //+2 Coins
    #####: 1164:      state->coins = state->coins + 2;
        -: 1165:			
        -: 1166:      //see if selected pile is in play
    #####: 1167:      if ( state->supplyCount[choice1] == -1 )
        -: 1168:	{
    #####: 1169:	  return -1;
        -: 1170:	}
        -: 1171:			
        -: 1172:      //add embargo token to selected supply pile
    #####: 1173:      state->embargoTokens[choice1]++;
        -: 1174:			
        -: 1175:      //trash card
    #####: 1176:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case outpost:
        -: 1180:      //set outpost flag
    #####: 1181:      state->outpostPlayed++;
        -: 1182:			
        -: 1183:      //discard card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case salvager:
        -: 1188:      //+1 buy
    #####: 1189:      state->numBuys++;
        -: 1190:			
    #####: 1191:      if (choice1)
        -: 1192:	{
        -: 1193:	  //gain coins equal to trashed card
    #####: 1194:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1195:	  //trash card
    #####: 1196:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1197:	}
        -: 1198:			
        -: 1199:      //discard card
    #####: 1200:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1201:      return 0;
        -: 1202:		
        -: 1203:    case sea_hag:
    #####: 1204:      for (i = 0; i < state->numPlayers; i++){
    #####: 1205:	if (i != currentPlayer){
    #####: 1206:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1207:	  state->discardCount[i]++;
    #####: 1208:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1209:	}
        -: 1210:      }
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
      100: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:
        -: 1250:  //if card is not trashed, added to Played pile 
      100: 1251:  if (trashFlag < 1)
        -: 1252:    {
        -: 1253:      //add card to discard pile
      100: 1254:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos]; 
      100: 1255:      state->discardCount[currentPlayer]++;
        -: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
      100: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:
        -: 1261:  //remove card from player's hand
      100: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1263:    {
        -: 1264:	  //reduce number of cards in hand
        1: 1265:      state->handCount[currentPlayer]--;
        -: 1266:    }
        -: 1267:
       99: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else 	
        -: 1274:    { 
        -: 1275:      //replace discarded card with last card in hand
       99: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:     
        -: 1278:	  //set last card to -1
       99: 1279:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1280:      
        -: 1281:	  //reduce number of cards in hand
       99: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    } 
        -: 1284:
      100: 1285:  return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:	
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
        -: 1312:    }
        -: 1313:  else
        -: 1314:    {
    #####: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //decrease number in supply pile
    #####: 1320:  state->supplyCount[supplyPos]--;
        -: 1321:	 
    #####: 1322:  return 0;
        -: 1323:}
        -: 1324:
     9095: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:	
        -: 1329:  //reset coin count
     9095: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
    54570: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
    45475: 1335:      if (state->hand[player][i] == copper)
        -: 1336:	{
    31857: 1337:	  state->coins += 1;
        -: 1338:	}
    13618: 1339:      else if (state->hand[player][i] == silver)
        -: 1340:	{
    #####: 1341:	  state->coins += 2;
        -: 1342:	}
    13618: 1343:      else if (state->hand[player][i] == gold)
        -: 1344:	{
    #####: 1345:	  state->coins += 3;
        -: 1346:	}	
        -: 1347:    }	
        -: 1348:
        -: 1349:  //add bonus
     9095: 1350:  state->coins += bonus;
        -: 1351:
     9095: 1352:  return 0;
        -: 1353:}
        -: 1354:
      100: 1355:int playSmithy(int handPos, int currentPlayer, struct gameState *state) {
        -: 1356:     int i;
        -: 1357:     
        -: 1358:     //+3 Cards
      400: 1359:      for (i = 0; i < 3; i++)
        -: 1360:	{
      300: 1361:	  drawCard(currentPlayer, state);
        -: 1362:	}
        -: 1363:			
        -: 1364:      //discard card from hand
      100: 1365:      discardCard(handPos, currentPlayer, state, 0);
      100: 1366:	  return 0;
        -: 1367:}
        -: 1368:
        4: 1369:int playAdventurer(int currentPlayer, struct gameState *state) {
        4: 1370:     int drawntreasure=0;
        -: 1371:     int cardDrawn;
        -: 1372:     int temphand[MAX_HAND];
        4: 1373:     int z = 0;// this is the counter for the temp hand
        -: 1374:     
       49: 1375:     while(drawntreasure<2) {
       41: 1376:          if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        1: 1377:            shuffle(currentPlayer, state);
        -: 1378:          }
       41: 1379:          drawCard(currentPlayer, state);
       41: 1380:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       49: 1381:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        8: 1382:            drawntreasure++;
        -: 1383:          else{
       33: 1384:            temphand[z]=cardDrawn;
       33: 1385:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       33: 1386:            z++;
        -: 1387:		}
        -: 1388:	 }
       41: 1389:      while(z-1>=0){
       33: 1390:          state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       33: 1391:          z=z-1;
        -: 1392:      }
        4: 1393:      return 0;
        -: 1394:}
        -: 1395:
    #####: 1396:int playCouncil_Room(int handPos, int currentPlayer, struct gameState *state) {
        -: 1397:     int i;
        -: 1398:     
        -: 1399:      //+4 Cards
    #####: 1400:      for (i = 0; i < 4; i++)
        -: 1401:	{
    #####: 1402:	  drawCard(currentPlayer, state);
        -: 1403:	}
        -: 1404:			
        -: 1405:      //+1 Buy
    #####: 1406:      state->numBuys++;
        -: 1407:			
        -: 1408:      //Each other player draws a card
    #####: 1409:      for (i = 0; i < state->numPlayers; i++)
        -: 1410:	{
    #####: 1411:	  if ( i != currentPlayer )
        -: 1412:	    {
    #####: 1413:	      drawCard(i, state);
        -: 1414:	    }
        -: 1415:	}
        -: 1416:			
        -: 1417:      //put played card in played card pile
    #####: 1418:      discardCard(handPos, currentPlayer, state, 0);
        -: 1419:			
    #####: 1420:      return 0;
        -: 1421:}
        -: 1422:
    #####: 1423:int playFeast(int choice1, int currentPlayer, struct gameState *state) {
        -: 1424:     int temphand[MAX_HAND];
        -: 1425:
        -: 1426:     int i;
        -: 1427:     int x;
        -: 1428:
        -: 1429:      //gain card with cost up to 5
        -: 1430:      //Backup hand
    #####: 1431:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1432:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1433:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1434:      }
        -: 1435:      //Backup hand
        -: 1436:
        -: 1437:      //Update Coins for Buy
    #####: 1438:      updateCoins(currentPlayer, state, 5);
    #####: 1439:      x = 1;//Condition to loop on
    #####: 1440:      while( x == 1) {//Buy one card
    #####: 1441:	if (supplyCount(choice1, state) <= 0){
    #####: 1442:	  if (DEBUG)
        -: 1443:	    printf("None of that card left, sorry!\n");
        -: 1444:
    #####: 1445:	  if (DEBUG){
        -: 1446:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1447:	  }
        -: 1448:	}
    #####: 1449:	else if (state->coins < getCost(choice1)){
    #####: 1450:	  printf("That card is too expensive!\n");
        -: 1451:
    #####: 1452:	  if (DEBUG){
        -: 1453:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1454:	  }
        -: 1455:	}
        -: 1456:	else{
        -: 1457:
    #####: 1458:	  if (DEBUG){
        -: 1459:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1460:	  }
        -: 1461:
    #####: 1462:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1463:	  x = 0;//No more buying cards
        -: 1464:
    #####: 1465:	  if (DEBUG){
        -: 1466:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1467:	  }
        -: 1468:
        -: 1469:	}
        -: 1470:      }     
        -: 1471:
        -: 1472:      //Reset Hand
    #####: 1473:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1474:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1475:	temphand[i] = -1;
        -: 1476:      }
        -: 1477:      //Reset Hand
        -: 1478:      			
    #####: 1479:      return 0;
        -: 1480:}
        -: 1481:
    #####: 1482:int playMine(int handPos, int choice1, int choice2, int currentPlayer, struct gameState *state) {
        -: 1483:     int i;
        -: 1484:     int j;
        -: 1485:     
    #####: 1486:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1487:
    #####: 1488:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -: 1489:	{
    #####: 1490:	  return -1;
        -: 1491:	}
        -: 1492:		
    #####: 1493:      if (choice2 > treasure_map && choice2 < curse)
        -: 1494:	{
    #####: 1495:	  return -1;
        -: 1496:	}
        -: 1497:
    #####: 1498:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1499:	{
    #####: 1500:	  return -1;
        -: 1501:	}
        -: 1502:
    #####: 1503:      gainCard(choice2, state, 2, currentPlayer);
        -: 1504:
        -: 1505:      //discard card from hand
    #####: 1506:      discardCard(handPos, currentPlayer, state, 0);
        -: 1507:
        -: 1508:      //discard trashed card
    #####: 1509:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1510:	{
    #####: 1511:	  if (state->hand[currentPlayer][i] == j)
        -: 1512:	    {
    #####: 1513:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1514:	      break;
        -: 1515:	    }
        -: 1516:	}
        -: 1517:          
    #####: 1518:          return 0;
        -: 1519:}
        -: 1520://end of dominion.c
        -: 1521:
