TESTING updateCoins():
Testing all hand cards as a copper
TempGame # of Coins before the update is: 4
TotalCoins before the update is: 0
TempGame # of Coins after the update is: 5
TotalCoins after the update is: 5
updateCoins() Updated the correct number of Coins and the test PASS!
Testing all hand cards as a Silver
TempGame # of Coins before the update is: 5
TotalCoins before the update is: 0
TempGame # of Coins after the update is: 10
TotalCoins after the update is: 10
updateCoins() Updated the correct number of Coins and the test PASS!
Testing all hand cards as a Gold
TempGame # of Coins before the update is: 10
TotalCoins before the update is: 0
TempGame # of Coins after the update is: 15
TotalCoins after the update is: 15
updateCoins() Updated the correct number of Coins and the test PASS!
Testing adding the correct bonus!
TempGame # of Coins before the update is: 15
TotalCoins before the update is: 0
TempGame # of Coins after the update is: 20
TotalCoins after the update is: 20
updateCoins() Updated the correct number of Coins and the test PASS!

****************************************************************
TESTING fullDeckCount():
The Count returned from fullDeckCount for Card (1) is : 3
The expected count from fullDeckCount for Card (1) is : 3
The fullDeckCount() test PASS with matching counts
The Count returned from fullDeckCount for Card (0) is : 22
The expected count from fullDeckCount for Card (0) is : 22
The fullDeckCount() test PASS with matching counts

****************************************************************
TESTING scoreFor():
The Score returned from scoreFor() is : 34
The expected Score returned from scoreFor() is is : 34
The scoreFor() test PASS with matching scores

****************************************************************
TESTING gainCard():
The gainCard() Added new card to the discard pile, PASSED!
The gainCard() PASSED in DICARD test with total coins : 6
The gainCard() decreased the supplyCount by one!, PASSED
The gainCard() Added new card to the deck pile, PASSED!
The gainCard() PASSED in DECK test with total coins : 6
The gainCard() decreased the supplyCount by one!, PASSED
The gainCard() Added new card to the player hand, PASSED!
The gainCard() PASSED in HAND test with total coins : 6
The gainCard() decreased the supplyCount by one!, PASSED
File 'dominion.c'
Lines executed:27.75% of 645
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:71
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Function prototypes 
        -:    9:adventurer_refactor( int drawntreasure, struct gameState *state, int temphand[], int z, int cardDrawn, int currentPlayer );
        -:   10:smithy_refactor(int currentPlayer, struct gameState *state, int handPos);
        -:   11:steward_refactor(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3 );
        -:   12:council_room_refactor(int currentPlayer, struct gameState *state, int handPos);
        -:   13:remodel_refactor(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos );
        -:   14:
        -:   15:int compare(const void* a, const void* b) {
     8781:   16:  if (*(int*)a > *(int*)b)
     3485:   17:    return 1;
     5296:   18:  if (*(int*)a < *(int*)b)
     4054:   19:    return -1;
     1242:   20:  return 0;
     8781:   21:}
        -:   22:
        -:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
        -:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        -:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
       69:   51:  SelectStream(1);
       69:   52:  PutSeed((long)randomSeed);
        -:   53:  
        -:   54:  //check number of players
      138:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
       69:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
     1518:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
    15180:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
    13110:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
     6900:   72:        }
      690:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
       69:   80:  if (numPlayers == 2)
        -:   81:    {
       69:   82:      state->supplyCount[curse] = 10;
       69:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
    #####:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
       69:   94:  if (numPlayers == 2)
        -:   95:    {
       69:   96:      state->supplyCount[estate] = 8;
       69:   97:      state->supplyCount[duchy] = 8;
       69:   98:      state->supplyCount[province] = 8;
       69:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
       69:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       69:  109:  state->supplyCount[silver] = 40;
       69:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
     2898:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
    22770:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
    10695:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
     1311:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
      138:  122:		  if (numPlayers == 2){ 
      138:  123:		    state->supplyCount[i] = 8; 
      138:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
      138:  126:		}
        -:  127:	      else
        -:  128:		{
      552:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
      690:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
    10005:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
    10005:  137:	}
        -:  138:
     1380:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
      414:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
      138:  147:      state->deckCount[i] = 0;
     1104:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
      414:  150:	  state->deck[i][j] = estate;
      414:  151:	  state->deckCount[i]++;
      414:  152:	}
     2208:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
      966:  155:	  state->deck[i][j] = copper;
      966:  156:	  state->deckCount[i]++;		
      966:  157:	}
      138:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
      414:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
      138:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
      138:  167:    }
        -:  168:
        -:  169:  //draw player hands
      414:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
      138:  173:      state->handCount[i] = 0;
      138:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
      138:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
     3864:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
     1863:  185:      state->embargoTokens[i] = 0;
     1863:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
       69:  189:  state->outpostPlayed = 0;
       69:  190:  state->phase = 0;
       69:  191:  state->numActions = 1;
       69:  192:  state->numBuys = 1;
       69:  193:  state->playedCardCount = 0;
       69:  194:  state->whoseTurn = 0;
       69:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
      828:  199:  for (it = 0; it < 5; it++){
      345:  200:    drawCard(state->whoseTurn, state);
      345:  201:  }
        -:  202:
       69:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
       69:  205:  return 0;
       69:  206:}
        -:  207:
        -:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
      140:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
      140:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
      140:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     4658:  221:  while (state->deckCount[player] > 0) {
     2189:  222:    card = floor(Random() * state->deckCount[player]);
     2189:  223:    newDeck[newDeckPos] = state->deck[player][card];
     2189:  224:    newDeckPos++;
   173104:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
    84363:  226:      state->deck[player][i] = state->deck[player][i+1];
    84363:  227:    }
     2189:  228:    state->deckCount[player]--;
        -:  229:  }
     4658:  230:  for (i = 0; i < newDeckPos; i++) {
     2189:  231:    state->deck[player][i] = newDeck[i];
     2189:  232:    state->deckCount[player]++;
     2189:  233:  }
        -:  234:
      140:  235:  return 0;
      140:  236:}
        -:  237:
        -:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:	
    #####:  276:  return 0;
    #####:  277:}
        -:  278:
        -:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
    #####:  316:}
        -:  317:
        -:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
        -:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
        -:  327:int supplyCount(int card, struct gameState *state) {
       13:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
        -:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
       36:  333:  int count = 0;
        -:  334:
      792:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
      516:  337:      if (state->deck[player][i] == card) count++;
      360:  338:    }
        -:  339:
      432:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
      261:  342:      if (state->hand[player][i] == card) count++;
      180:  343:    }
        -:  344:
      792:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
      516:  347:      if (state->discard[player][i] == card) count++;
      360:  348:    }
        -:  349:
       36:  350:  return count;
        -:  351:}
        -:  352:
        -:  353:int whoseTurn(struct gameState *state) {
    #####:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
    #####:  414:	}
    #####:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
       11:  427:  int score = 0;
        -:  428:  //score from hand
      132:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
       55:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
       76:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
       75:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
       65:  434:      if (state->hand[player][i] == province) { score = score + 6; };
       55:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       55:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       55:  437:    }
        -:  438:
        -:  439:  //score from discard
      242:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
      130:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
      190:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
      110:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
      110:  445:      if (state->discard[player][i] == province) { score = score + 6; };
      110:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      110:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      110:  448:    }
        -:  449:
        -:  450:  //score from deck
      242:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
      130:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
      180:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
      110:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
      110:  456:      if (state->deck[player][i] == province) { score = score + 6; };
      110:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      110:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      110:  459:    }
        -:  460:
       11:  461:  return score;
        -:  462:}
        -:  463:
        -:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
    #####:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
    #####:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
    #####:  491:	}
    #####:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
    #####:  502:	}
    #####:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
    #####:  512:	}
    #####:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
    #####:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
    #####:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
        -:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
     2345:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
     1622:  540:    for (i = 0; i < state->discardCount[player];i++){
      809:  541:      state->deck[player][i] = state->discard[player][i];
      809:  542:      state->discard[player][i] = -1;
      809:  543:    }
        -:  544:
        2:  545:    state->deckCount[player] = state->discardCount[player];
        2:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
        2:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
        2:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
        2:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
        2:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
        2:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
        2:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  570:    state->deckCount[player]--;
        2:  571:    state->handCount[player]++;//Increment hand count
        2:  572:  }
        -:  573:
        -:  574:  else{
     2343:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
     2343:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2343:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2343:  583:    state->deckCount[player]--;
     2343:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
     2345:  587:  return 0;
     2345:  588:}
        -:  589:
        -:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:  switch( cardNumber ) 
        -:  593:    {
        -:  594:    case curse:
    #####:  595:      return 0;
        -:  596:    case estate:
    #####:  597:      return 2;
        -:  598:    case duchy:
    #####:  599:      return 5;
        -:  600:    case province:
    #####:  601:      return 8;
        -:  602:    case copper:
    #####:  603:      return 0;
        -:  604:    case silver:
    #####:  605:      return 3;
        -:  606:    case gold:
    #####:  607:      return 6;
        -:  608:    case adventurer:
    #####:  609:      return 6;
        -:  610:    case council_room:
    #####:  611:      return 5;
        -:  612:    case feast:
    #####:  613:      return 4;
        -:  614:    case gardens:
    #####:  615:      return 4;
        -:  616:    case mine:
    #####:  617:      return 5;
        -:  618:    case remodel:
    #####:  619:      return 4;
        -:  620:    case smithy:
    #####:  621:      return 4;
        -:  622:    case village:
    #####:  623:      return 3;
        -:  624:    case baron:
    #####:  625:      return 4;
        -:  626:    case great_hall:
    #####:  627:      return 3;
        -:  628:    case minion:
    #####:  629:      return 5;
        -:  630:    case steward:
    #####:  631:      return 3;
        -:  632:    case tribute:
    #####:  633:      return 5;
        -:  634:    case ambassador:
    #####:  635:      return 3;
        -:  636:    case cutpurse:
    #####:  637:      return 4;
        -:  638:    case embargo: 
    #####:  639:      return 2;
        -:  640:    case outpost:
    #####:  641:      return 5;
        -:  642:    case salvager:
    #####:  643:      return 4;
        -:  644:    case sea_hag:
    #####:  645:      return 4;
        -:  646:    case treasure_map:
    #####:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
    #####:  651:}
        -:  652:
        -:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
    #####:  660:  int currentPlayer = whoseTurn(state);
    #####:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
    #####:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
    #####:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
    #####:  667:  int z = 0;// this is the counter for the temp hand
    #####:  668:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  669:    nextPlayer = 0;
    #####:  670:  }
        -:  671:  
        -:  672:	
        -:  673:  //uses switch to select card and perform actions
    #####:  674:  switch( card ) 
        -:  675:    {
        -:  676:    case adventurer:
        -:  677:
        -:  678:      // Code moved to the end of the file 
    #####:  679:      adventurer_refactor(drawntreasure, state, temphand, z, cardDrawn, currentPlayer );
        -:  680:			
        -:  681:    case council_room:
    #####:  682:      council_room_refactor(currentPlayer, state, handPos);
        -:  683:			
        -:  684:    case feast:
        -:  685:      //gain card with cost up to 5
        -:  686:      //Backup hand
    #####:  687:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  688:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  689:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  690:      }
        -:  691:      //Backup hand
        -:  692:
        -:  693:      //Update Coins for Buy
    #####:  694:      updateCoins(currentPlayer, state, 5);
    #####:  695:      x = 1;//Condition to loop on
    #####:  696:      while( x == 1) {//Buy one card
    #####:  697:	if (supplyCount(choice1, state) <= 0){
        -:  698:	  if (DEBUG)
        -:  699:	    printf("None of that card left, sorry!\n");
        -:  700:
        -:  701:	  if (DEBUG){
        -:  702:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  703:	  }
    #####:  704:	}
    #####:  705:	else if (state->coins < getCost(choice1)){
    #####:  706:	  printf("That card is too expensive!\n");
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  710:	  }
    #####:  711:	}
        -:  712:	else{
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:	  }
        -:  717:
    #####:  718:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  719:	  x = 0;//No more buying cards
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:	  }
        -:  724:
        -:  725:	}
        -:  726:      }     
        -:  727:
        -:  728:      //Reset Hand
    #####:  729:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  730:	state->hand[currentPlayer][i] = temphand[i];
    #####:  731:	temphand[i] = -1;
    #####:  732:      }
        -:  733:      //Reset Hand
        -:  734:      			
    #####:  735:      return 0;
        -:  736:			
        -:  737:    case gardens:
    #####:  738:      return -1;
        -:  739:			
        -:  740:    case mine:
    #####:  741:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  742:
    #####:  743:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:		
    #####:  748:      if (choice2 > treasure_map || choice2 < curse)
        -:  749:	{
    #####:  750:	  return -1;
        -:  751:	}
        -:  752:
    #####:  753:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  754:	{
    #####:  755:	  return -1;
        -:  756:	}
        -:  757:
    #####:  758:      gainCard(choice2, state, 2, currentPlayer);
        -:  759:
        -:  760:      //discard card from hand
    #####:  761:      discardCard(handPos, currentPlayer, state, 0);
        -:  762:
        -:  763:      //discard trashed card
    #####:  764:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  765:	{
    #####:  766:	  if (state->hand[currentPlayer][i] == j)
        -:  767:	    {
    #####:  768:	      discardCard(i, currentPlayer, state, 0);			
    #####:  769:	      break;
        -:  770:	    }
    #####:  771:	}
        -:  772:			
    #####:  773:      return 0;
        -:  774:			
        -:  775:    case remodel:
        -:  776:      // Code moved to the end of the file 
    #####:  777:      remodel_refactor( currentPlayer, state, choice1, choice2, handPos );
        -:  778:		
        -:  779:    case smithy:
        -:  780:      // Code moved to the end of the file 
    #####:  781:      smithy_refactor(currentPlayer, state, handPos);
        -:  782:		
        -:  783:    case village:
        -:  784:      //+1 Card
    #####:  785:      drawCard(currentPlayer, state);
        -:  786:			
        -:  787:      //+2 Actions
    #####:  788:      state->numActions = state->numActions + 2;
        -:  789:			
        -:  790:      //discard played card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
    #####:  792:      return 0;
        -:  793:		
        -:  794:    case baron:
    #####:  795:      state->numBuys++;//Increase buys by 1!
    #####:  796:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  797:	int p = 0;//Iterator for hand!
    #####:  798:	int card_not_discarded = 1;//Flag for discard set!
    #####:  799:	while(card_not_discarded){
    #####:  800:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  801:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  802:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  803:	    state->discardCount[currentPlayer]++;
    #####:  804:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  805:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  806:	    }
    #####:  807:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  808:	    state->handCount[currentPlayer]--;
    #####:  809:	    card_not_discarded = 0;//Exit the loop
    #####:  810:	  }
    #####:  811:	  else if (p > state->handCount[currentPlayer]){
        -:  812:	    if(DEBUG) {
        -:  813:	      printf("No estate cards in your hand, invalid choice\n");
        -:  814:	      printf("Must gain an estate if there are any\n");
        -:  815:	    }
    #####:  816:	    if (supplyCount(estate, state) > 0){
    #####:  817:	      gainCard(estate, state, 0, currentPlayer);
    #####:  818:	      state->supplyCount[estate]--;//Decrement estates
    #####:  819:	      if (supplyCount(estate, state) == 0){
    #####:  820:		isGameOver(state);
    #####:  821:	      }
    #####:  822:	    }
    #####:  823:	    card_not_discarded = 0;//Exit the loop
    #####:  824:	  }
        -:  825:			    
        -:  826:	  else{
    #####:  827:	    p++;//Next card
        -:  828:	  }
        -:  829:	}
    #####:  830:      }
        -:  831:			    
        -:  832:      else{
    #####:  833:	if (supplyCount(estate, state) > 0){
    #####:  834:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  835:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  836:	  if (supplyCount(estate, state) == 0){
    #####:  837:	    isGameOver(state);
    #####:  838:	  }
    #####:  839:	}
        -:  840:      }
        -:  841:      
    #####:  842:      return 0;
        -:  843:		
        -:  844:    case great_hall:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
        -:  847:			
        -:  848:      //+1 Actions
    #####:  849:      state->numActions++;
        -:  850:			
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
    #####:  853:      return 0;
        -:  854:		
        -:  855:    case minion:
        -:  856:      //+1 action
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:			
    #####:  862:      if (choice1)		//+2 coins
        -:  863:	{
    #####:  864:	  state->coins = state->coins + 2;
    #####:  865:	}
        -:  866:			
    #####:  867:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  868:	{
        -:  869:	  //discard hand
    #####:  870:	  while(numHandCards(state) > 0)
        -:  871:	    {
    #####:  872:	      discardCard(handPos, currentPlayer, state, 0);
        -:  873:	    }
        -:  874:				
        -:  875:	  //draw 4
    #####:  876:	  for (i = 0; i < 4; i++)
        -:  877:	    {
    #####:  878:	      drawCard(currentPlayer, state);
    #####:  879:	    }
        -:  880:				
        -:  881:	  //other players discard hand and redraw if hand size > 4
    #####:  882:	  for (i = 0; i < state->numPlayers; i++)
        -:  883:	    {
    #####:  884:	      if (i != currentPlayer)
        -:  885:		{
    #####:  886:		  if ( state->handCount[i] > 4 )
        -:  887:		    {
        -:  888:		      //discard hand
    #####:  889:		      while( state->handCount[i] > 0 )
        -:  890:			{
    #####:  891:			  discardCard(handPos, i, state, 0);
        -:  892:			}
        -:  893:							
        -:  894:		      //draw 4
    #####:  895:		      for (j = 0; j < 4; j++)
        -:  896:			{
    #####:  897:			  drawCard(i, state);
    #####:  898:			}
    #####:  899:		    }
    #####:  900:		}
    #####:  901:	    }
        -:  902:				
    #####:  903:	}
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case steward:
        -:  907:      // Code moved to the end of the file 
    #####:  908:      steward_refactor( currentPlayer, state, handPos, choice1, choice2, choice3 );
        -:  909:		
        -:  910:    case tribute:
    #####:  911:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  912:	if (state->deckCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	  state->deckCount[nextPlayer]--;
    #####:  915:	}
    #####:  916:	else if (state->discardCount[nextPlayer] > 0){
    #####:  917:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  918:	  state->discardCount[nextPlayer]--;
    #####:  919:	}
        -:  920:	else{
        -:  921:	  //No Card to Reveal
        -:  922:	  if (DEBUG){
        -:  923:	    printf("No cards to reveal\n");
        -:  924:	  }
        -:  925:	}
    #####:  926:      }
        -:  927:	    
        -:  928:      else{
    #####:  929:	if (state->deckCount[nextPlayer] == 0){
    #####:  930:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  931:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  932:	    state->deckCount[nextPlayer]++;
    #####:  933:	    state->discard[nextPlayer][i] = -1;
    #####:  934:	    state->discardCount[nextPlayer]--;
    #####:  935:	  }
        -:  936:			    
    #####:  937:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  938:	} 
    #####:  939:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  940:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  941:	state->deckCount[nextPlayer]--;
    #####:  942:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  943:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  944:	state->deckCount[nextPlayer]--;
        -:  945:      }    
        -:  946:		       
    #####:  947:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  948:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  949:	state->playedCardCount++;
    #####:  950:	tributeRevealedCards[1] = -1;
    #####:  951:      }
        -:  952:
    #####:  953:      for (i = 0; i <= 2; i ++){
    #####:  954:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  955:	  state->coins += 2;
    #####:  956:	}
        -:  957:		    
    #####:  958:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  959:	  drawCard(currentPlayer, state);
    #####:  960:	  drawCard(currentPlayer, state);
    #####:  961:	}
        -:  962:	else{//Action Card
    #####:  963:	  state->numActions = state->numActions + 2;
        -:  964:	}
    #####:  965:      }
        -:  966:	    
    #####:  967:      return 0;
        -:  968:		
        -:  969:    case ambassador:
    #####:  970:      j = 0;		//used to check if player has enough cards to discard
        -:  971:
    #####:  972:      if (choice2 > 2 || choice2 < 0)
        -:  973:	{
    #####:  974:	  return -1;				
        -:  975:	}
        -:  976:
    #####:  977:      if (choice1 == handPos)
        -:  978:	{
    #####:  979:	  return -1;
        -:  980:	}
        -:  981:
    #####:  982:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  983:	{
    #####:  984:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  985:	    {
    #####:  986:	      j++;
    #####:  987:	    }
    #####:  988:	}
    #####:  989:      if (j < choice2)
        -:  990:	{
    #####:  991:	  return -1;				
        -:  992:	}
        -:  993:
        -:  994:      if (DEBUG) 
        -:  995:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  996:
        -:  997:      //increase supply count for choosen card by amount being discarded
    #####:  998:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  999:			
        -: 1000:      //each other player gains a copy of revealed card
    #####: 1001:      for (i = 0; i < state->numPlayers; i++)
        -: 1002:	{
    #####: 1003:	  if (i != currentPlayer)
        -: 1004:	    {
    #####: 1005:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1006:	    }
    #####: 1007:	}
        -: 1008:
        -: 1009:      //discard played card from hand
    #####: 1010:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1011:
        -: 1012:      //trash copies of cards returned to supply
    #####: 1013:      for (j = 0; j < choice2; j++)
        -: 1014:	{
    #####: 1015:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1016:	    {
    #####: 1017:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1018:		{
    #####: 1019:		  discardCard(i, currentPlayer, state, 1);
    #####: 1020:		  break;
        -: 1021:		}
    #####: 1022:	    }
    #####: 1023:	}			
        -: 1024:
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case cutpurse:
        -: 1028:
    #####: 1029:      updateCoins(currentPlayer, state, 2);
    #####: 1030:      for (i = 0; i < state->numPlayers; i++)
        -: 1031:	{
    #####: 1032:	  if (i != currentPlayer)
        -: 1033:	    {
    #####: 1034:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1035:		{
    #####: 1036:		  if (state->hand[i][j] == copper)
        -: 1037:		    {
    #####: 1038:		      discardCard(j, i, state, 0);
    #####: 1039:		      break;
        -: 1040:		    }
    #####: 1041:		  if (j == state->handCount[i])
        -: 1042:		    {
    #####: 1043:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1044:			{
        -: 1045:			  if (DEBUG)
        -: 1046:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1047:			}	
    #####: 1048:		      break;
        -: 1049:		    }		
    #####: 1050:		}
        -: 1051:					
    #####: 1052:	    }
        -: 1053:				
    #####: 1054:	}				
        -: 1055:
        -: 1056:      //discard played card from hand
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1058:
    #####: 1059:      return 0;
        -: 1060:
        -: 1061:		
        -: 1062:    case embargo: 
        -: 1063:      //+2 Coins
    #####: 1064:      state->coins = state->coins + 2;
        -: 1065:			
        -: 1066:      //see if selected pile is in play
    #####: 1067:      if ( state->supplyCount[choice1] == -1 )
        -: 1068:	{
    #####: 1069:	  return -1;
        -: 1070:	}
        -: 1071:			
        -: 1072:      //add embargo token to selected supply pile
    #####: 1073:      state->embargoTokens[choice1]++;
        -: 1074:			
        -: 1075:      //trash card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case outpost:
        -: 1080:      //set outpost flag
    #####: 1081:      state->outpostPlayed++;
        -: 1082:			
        -: 1083:      //discard card
    #####: 1084:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case salvager:
        -: 1088:      //+1 buy
    #####: 1089:      state->numBuys++;
        -: 1090:			
    #####: 1091:      if (choice1)
        -: 1092:	{
        -: 1093:	  //gain coins equal to trashed card
    #####: 1094:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1095:	  //trash card
    #####: 1096:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1097:	}
        -: 1098:			
        -: 1099:      //discard card
    #####: 1100:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1101:      return 0;
        -: 1102:		
        -: 1103:    case sea_hag:
    #####: 1104:      for (i = 0; i < state->numPlayers; i++){
    #####: 1105:	if (i != currentPlayer){
    #####: 1106:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1107:	  state->discardCount[i]++;
    #####: 1108:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1109:	}
    #####: 1110:      }
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case treasure_map:
        -: 1114:      //search hand for another treasure_map
    #####: 1115:      index = -1;
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1119:	    {
    #####: 1120:	      index = i;
    #####: 1121:	      break;
        -: 1122:	    }
    #####: 1123:	}
    #####: 1124:      if (index > -1)
        -: 1125:	{
        -: 1126:	  //trash both treasure cards
    #####: 1127:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1128:	  discardCard(index, currentPlayer, state, 1);
        -: 1129:
        -: 1130:	  //gain 4 Gold cards
    #####: 1131:	  for (i = 0; i < 4; i++)
        -: 1132:	    {
    #####: 1133:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1134:	    }
        -: 1135:				
        -: 1136:	  //return success
    #####: 1137:	  return 1;
        -: 1138:	}
        -: 1139:			
        -: 1140:      //no second treasure_map found in hand
    #####: 1141:      return -1;
        -: 1142:    }
        -: 1143:	
    #####: 1144:  return -1;
    #####: 1145:}
        -: 1146:
        -: 1147:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1148:{
        -: 1149:	
        -: 1150:  //if card is not trashed, added to Played pile 
    #####: 1151:  if (trashFlag < 1)
        -: 1152:    {
        -: 1153:      //add card to played pile
    #####: 1154:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1155:      state->playedCardCount++;
    #####: 1156:    }
        -: 1157:	
        -: 1158:  //set played card to -1
    #####: 1159:  state->hand[currentPlayer][handPos] = -1;
        -: 1160:	
        -: 1161:  //remove card from player's hand
    #####: 1162:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1163:    {
        -: 1164:      //reduce number of cards in hand
    #####: 1165:      state->handCount[currentPlayer]--;
    #####: 1166:    }
    #####: 1167:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
    #####: 1170:      state->handCount[currentPlayer]--;
    #####: 1171:    }
        -: 1172:  else 	
        -: 1173:    {
        -: 1174:      //replace discarded card with last card in hand
    #####: 1175:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1176:      //set last card to -1
    #####: 1177:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1178:      //reduce number of cards in hand
    #####: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:	
    #####: 1182:  return 0;
        -: 1183:}
        -: 1184:
        -: 1185:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1186:{
        -: 1187:  //Note: supplyPos is enum of choosen card
        -: 1188:	
        -: 1189:  //check if supply pile is empty (0) or card is not used in game (-1)
       13: 1190:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1191:    {
    #####: 1192:      return -1;
        -: 1193:    }
        -: 1194:	
        -: 1195:  //added card for [whoseTurn] current player:
        -: 1196:  // toFlag = 0 : add to discard
        -: 1197:  // toFlag = 1 : add to deck
        -: 1198:  // toFlag = 2 : add to hand
        -: 1199:
       13: 1200:  if (toFlag == 1)
        -: 1201:    {
        4: 1202:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1203:      state->deckCount[player]++;
        4: 1204:    }
        9: 1205:  else if (toFlag == 2)
        -: 1206:    {
        4: 1207:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1208:      state->handCount[player]++;
        4: 1209:    }
        -: 1210:  else
        -: 1211:    {
        5: 1212:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        5: 1213:      state->discardCount[player]++;
        -: 1214:    }
        -: 1215:	
        -: 1216:  //decrease number in supply pile
       13: 1217:  state->supplyCount[supplyPos]--;
        -: 1218:	 
       13: 1219:  return 0;
       13: 1220:}
        -: 1221:
        -: 1222:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1223:{
        -: 1224:  int i;
        -: 1225:	
        -: 1226:  //reset coin count
      172: 1227:  state->coins = 0;
        -: 1228:
        -: 1229:  //add coins for each Treasure card in player's hand
     2064: 1230:  for (i = 0; i < state->handCount[player]; i++)
        -: 1231:    {
      860: 1232:      if (state->hand[player][i] == copper)
        -: 1233:	{
      423: 1234:	  state->coins += 1;
      423: 1235:	}
      437: 1236:      else if (state->hand[player][i] == silver)
        -: 1237:	{
      120: 1238:	  state->coins += 2;
      120: 1239:	}
      317: 1240:      else if (state->hand[player][i] == gold)
        -: 1241:	{
      220: 1242:	  state->coins += 3;
      220: 1243:	}	
      860: 1244:    }	
        -: 1245:
        -: 1246:  //add bonus
      172: 1247:  state->coins += bonus;
        -: 1248:
      172: 1249:  return 0;
        -: 1250:}
        -: 1251:/*********************************************************************************************
        -: 1252:
        -: 1253:This section is for refactoring the 5 cards, I moved the code related to executing the action
        -: 1254:for these cards to be inside functions, and I called the apropriate fucntion in CardEffect() 
        -: 1255:
        -: 1256:*********************************************************************************************/
        -: 1257:
        -: 1258:adventurer_refactor( int drawntreasure, struct gameState *state, int temphand[], int z, int cardDrawn, int currentPlayer ) {
        -: 1259:
        -: 1260: // while(drawntreasure<3){
    #####: 1261:  while(drawntreasure<2){
    #####: 1262:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1263:      shuffle(currentPlayer, state);
    #####: 1264:    }
    #####: 1265:    drawCard(currentPlayer, state);
    #####: 1266:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1267:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1268:      drawntreasure++;
        -: 1269:    else{
    #####: 1270:      temphand[z]=cardDrawn;
    #####: 1271:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1272:      z++;
        -: 1273:    }
        -: 1274:        }
    #####: 1275:        while(z-1>=0){
    #####: 1276:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1277:    z=z-1;
        -: 1278:        }
    #####: 1279:      return 0;
        -: 1280:}
        -: 1281:
        -: 1282:smithy_refactor(int currentPlayer, struct gameState *state, int handPos) {
        -: 1283:  //+3 Cards
        -: 1284:  int i;
    #####: 1285:  for (i = 0; i < 3; i++)
        -: 1286:  {
    #####: 1287:    drawCard(currentPlayer, state);
    #####: 1288:  }
        -: 1289:      
        -: 1290:  //discard card from hand
        -: 1291:  //discardCard(handPos, currentPlayer, state, 1);
    #####: 1292:  discardCard(handPos, currentPlayer, state, 1);
    #####: 1293:  return 0;
        -: 1294:}
        -: 1295:
        -: 1296:steward_refactor(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3 ) {
        -: 1297:
    #####: 1298:  if (choice1 == 1)
        -: 1299:  {
        -: 1300:    //+2 cards
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
    #####: 1304:    else if (choice1 == 2)
        -: 1305:  {
        -: 1306:    //-2 coins
        -: 1307:    //state->coins = state->coins - 2;
    #####: 1308:    state->coins = state->coins + 2;
    #####: 1309:  }
        -: 1310:    else
        -: 1311:  {
        -: 1312:    //trash 2 cards in hand
    #####: 1313:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1314:    discardCard(choice3, currentPlayer, state, 1);
        -: 1315:  }
        -: 1316:      
        -: 1317:    //discard card from hand
    #####: 1318:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1319:    return 0;
        -: 1320:}
        -: 1321:council_room_refactor(int currentPlayer, struct gameState *state, int handPos) {
        -: 1322:
        -: 1323:  int i;
        -: 1324:  //+4 Cards
    #####: 1325:  for (i = 0; i < 4; i++)
        -: 1326:  {
    #####: 1327:    drawCard(currentPlayer, state);
    #####: 1328:  }
        -: 1329:      
        -: 1330:  //+1 Buy
    #####: 1331:  state->numBuys++;
        -: 1332:      
        -: 1333:  //Each other player draws a card
    #####: 1334:  for (i = 0; i < state->numPlayers; i++)
        -: 1335:  {
    #####: 1336:    if ( i != currentPlayer ) //( i == currentPlayer )
        -: 1337:      {
    #####: 1338:        drawCard(i, state);
    #####: 1339:      }
    #####: 1340:  }
        -: 1341:      
        -: 1342:  //put played card in played card pile
    #####: 1343:  discardCard(handPos, currentPlayer, state, 0);
        -: 1344:      
    #####: 1345:  return 0;
        -: 1346:}
        -: 1347:
        -: 1348:remodel_refactor(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos ) {
        -: 1349:
        -: 1350:  int j, i;
    #####: 1351:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1352:
        -: 1353:  //if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
    #####: 1354:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1355:  {
    #####: 1356:    return -1;
        -: 1357:  }
        -: 1358:
    #####: 1359:  gainCard(choice2, state, 0, currentPlayer);
        -: 1360:
        -: 1361:  //discard card from hand
    #####: 1362:  discardCard(handPos, currentPlayer, state, 0);
        -: 1363:
        -: 1364:  //discard trashed card
    #####: 1365:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:  {
    #####: 1367:    if (state->hand[currentPlayer][i] == j)
        -: 1368:      {
    #####: 1369:        discardCard(i, currentPlayer, state, 0);      
    #####: 1370:        break;
        -: 1371:      }
    #####: 1372:  }
    #####: 1373:  return 0;
        -: 1374:
    #####: 1375:}
        -: 1376:      
        -: 1377:      
        -: 1378://end of dominion.c
        -: 1379:
