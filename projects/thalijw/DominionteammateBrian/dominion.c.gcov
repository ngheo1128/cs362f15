        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:28
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/* instructor comments:  file is updated. */
function dummymethod called 0 returned 0% blocks executed 0%
        -:    9:int dummymethod()
        -:   10:{
    #####:   11:  return 0;
        -:   12:}
function compare called 57691 returned 100% blocks executed 100%
        -:   13:int compare(const void* a, const void* b) {
    57691:   14:  if (*(int*)a > *(int*)b)
branch  0 taken 37%
branch  1 taken 63%
    21216:   15:    return 1;
    36475:   16:  if (*(int*)a < *(int*)b)
branch  0 taken 59%
branch  1 taken 41%
    21457:   17:    return -1;
    15018:   18:  return 0;
    57691:   19:}
        -:   20:
function newGame called 0 returned 0% blocks executed 0%
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
function initializeGame called 22 returned 100% blocks executed 87%
        -:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
       22:   49:  SelectStream(1);
       22:   50:  PutSeed((long)randomSeed);
        -:   51:  
        -:   52:  //check number of players
       44:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
       22:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
      484:   62:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   63:    {
     4840:   64:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   65:        {
     4180:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
     2200:   70:        }
      220:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
       22:   78:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   79:    {
       22:   80:      state->supplyCount[curse] = 10;
       22:   81:    }
    #####:   82:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
    #####:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
       22:   92:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   93:    {
       22:   94:      state->supplyCount[estate] = 8;
       22:   95:      state->supplyCount[duchy] = 8;
       22:   96:      state->supplyCount[province] = 8;
       22:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
       22:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       22:  107:  state->supplyCount[silver] = 40;
       22:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
      924:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  112:    {
     7260:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  114:	{
     3410:  115:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
      418:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  119:		{
       44:  120:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
       44:  121:		    state->supplyCount[i] = 8; 
       44:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
       44:  124:		}
        -:  125:	      else
        -:  126:		{
      176:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
      220:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
     3190:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
     3190:  135:	}
        -:  136:
      440:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
      132:  143:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  144:    {
       44:  145:      state->deckCount[i] = 0;
      352:  146:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  147:	{
      132:  148:	  state->deck[i][j] = estate;
      132:  149:	  state->deckCount[i]++;
      132:  150:	}
      704:  151:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  152:	{
      308:  153:	  state->deck[i][j] = copper;
      308:  154:	  state->deckCount[i]++;		
      308:  155:	}
       44:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
      132:  159:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  160:    {
       44:  161:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
       44:  165:    }
        -:  166:
        -:  167:  //draw player hands
      132:  168:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  169:    {  
        -:  170:      //initialize hand size to zero
       44:  171:      state->handCount[i] = 0;
       44:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
       44:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
     1232:  181:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  182:    {
      594:  183:      state->embargoTokens[i] = 0;
      594:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
       22:  187:  state->outpostPlayed = 0;
       22:  188:  state->phase = 0;
       22:  189:  state->numActions = 1;
       22:  190:  state->numBuys = 1;
       22:  191:  state->playedCardCount = 0;
       22:  192:  state->whoseTurn = 0;
       22:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
      264:  197:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      110:  198:    drawCard(state->whoseTurn, state);
      110:  199:  }
        -:  200:
       22:  201:  updateCoins(state->whoseTurn, state, 0);
        -:  202:
       22:  203:  return 0;
       22:  204:}
        -:  205:
function shuffle called 206 returned 100% blocks executed 100%
        -:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
      206:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
      206:  214:  if (state->deckCount[player] < 1)
branch  0 taken 52%
branch  1 taken 48%
      108:  215:    return -1;
       98:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
    28508:  219:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1%
    14156:  220:    card = floor(Random() * state->deckCount[player]);
    14156:  221:    newDeck[newDeckPos] = state->deck[player][card];
    14156:  222:    newDeckPos++;
  2381606:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1%
  1176647:  224:      state->deck[player][i] = state->deck[player][i+1];
  1176647:  225:    }
    14156:  226:    state->deckCount[player]--;
        -:  227:  }
    28508:  228:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1%
    14156:  229:    state->deck[player][i] = newDeck[i];
    14156:  230:    state->deckCount[player]++;
    14156:  231:  }
        -:  232:
       98:  233:  return 0;
      206:  234:}
        -:  235:
function playCard called 0 returned 0% blocks executed 0%
        -:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:	
    #####:  274:  return 0;
    #####:  275:}
        -:  276:
function buyCard called 0 returned 0% blocks executed 0%
        -:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
    #####:  314:}
        -:  315:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
function handCard called 0 returned 0% blocks executed 0%
        -:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
function supplyCount called 14019 returned 100% blocks executed 100%
        -:  325:int supplyCount(int card, struct gameState *state) {
    14019:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
function fullDeckCount called 8 returned 100% blocks executed 100%
        -:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
        8:  331:  int count = 0;
        -:  332:
      176:  333:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  334:    {
      120:  335:      if (state->deck[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
       80:  336:    }
        -:  337:
       96:  338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  339:    {
       60:  340:      if (state->hand[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
       40:  341:    }
        -:  342:
      176:  343:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  344:    {
      120:  345:      if (state->discard[player][i] == card) count++;
branch  0 taken 50%
branch  1 taken 50%
       80:  346:    }
        -:  347:
        8:  348:  return count;
        -:  349:}
        -:  350:
function whoseTurn called 3003 returned 100% blocks executed 100%
        -:  351:int whoseTurn(struct gameState *state) {
     3003:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
function endTurn called 0 returned 0% blocks executed 0%
        -:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
function isGameOver called 417 returned 100% blocks executed 84%
        -:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
      417:  400:  if (state->supplyCount[province] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
      417:  406:  j = 0;
    21684:  407:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  408:    {
    10425:  409:      if (state->supplyCount[i] == 0)
branch  0 taken 4%
branch  1 taken 96%
        -:  410:	{
      417:  411:	  j++;
      417:  412:	}
    10425:  413:    }
      417:  414:  if ( j >= 3)
branch  0 taken 0%
branch  1 taken 100%
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
      417:  419:  return 0;
      417:  420:}
        -:  421:
function scoreFor called 4 returned 100% blocks executed 74%
        -:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
        4:  425:  int score = 0;
        -:  426:  //score from hand
       48:  427:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  428:    {
       20:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
       28:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 40%
branch  1 taken 60%
       28:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 40%
branch  1 taken 60%
       24:  432:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 20%
branch  1 taken 80%
       20:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       20:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
       20:  435:    }
        -:  436:
        -:  437:  //score from discard
       88:  438:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  439:    {
       40:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
       80:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 100%
branch  1 taken 0%
       40:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
       40:  443:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 0%
branch  1 taken 100%
       40:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       40:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
       40:  446:    }
        -:  447:
        -:  448:  //score from deck
       88:  449:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  450:    {
       40:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
       80:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 100%
branch  1 taken 0%
       40:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
       40:  454:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0%
branch  1 taken 100%
       40:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       40:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
       40:  457:    }
        -:  458:
        4:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
        -:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  473:	{
    #####:  474:	  players[i] = -9999;
    #####:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
    #####:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
    #####:  489:	}
    #####:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  498:	{
    #####:  499:	  players[i]++;
    #####:  500:	}
    #####:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  508:	{
    #####:  509:	  j = i;
    #####:  510:	}
    #####:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  players[i] = 1;
    #####:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
    #####:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
function drawCard called 39428 returned 100% blocks executed 91%
        -:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
    39428:  533:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
    27540:  538:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
    13716:  539:      state->deck[player][i] = state->discard[player][i];
    13716:  540:      state->discard[player][i] = -1;
    13716:  541:    }
        -:  542:
       54:  543:    state->deckCount[player] = state->discardCount[player];
       54:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
       54:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
       54:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
       54:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
       54:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
       54:  564:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  565:      return -1;
        -:  566:
       54:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       54:  568:    state->deckCount[player]--;
       54:  569:    state->handCount[player]++;//Increment hand count
       54:  570:  }
        -:  571:
        -:  572:  else{
    39374:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
    39374:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
    39374:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    39374:  581:    state->deckCount[player]--;
    39374:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
    39428:  585:  return 0;
    39428:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
        -:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
function cardEffect called 3003 returned 100% blocks executed 16%
        -:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  //int x;
        -:  657:  int index;
     3003:  658:  int currentPlayer = whoseTurn(state);
     3003:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
     3003:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
        -:  663:  //int drawntreasure=0;
        -:  664:  //int cardDrawn;
        -:  665:  //int z = 0;// this is the counter for the temp hand
     3003:  666:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
     1509:  667:    nextPlayer = 0;
     1509:  668:  }
        -:  669:  int answer;
        -:  670:
     3003:  671:  if (card == adventurer){
branch  0 taken 0%
branch  1 taken 100%
    #####:  672:    answer = adventurerMethod(state, temphand, currentPlayer);
    #####:  673:    return answer;
        -:  674:  }
        -:  675:
     3003:  676:  else if (card == smithy){
branch  0 taken 1%
branch  1 taken 99%
        3:  677:    answer = smithyMethod(state, currentPlayer, handPos);
        3:  678:    return answer;
        -:  679:  }
        -:  680:
     3000:  681:  else if (card == village){
branch  0 taken 0%
branch  1 taken 100%
    #####:  682:    answer = villageMethod(state, currentPlayer, handPos);
    #####:  683:    return answer;
        -:  684:  }
        -:  685:
     3000:  686:  else if (card == council_room){
branch  0 taken 0%
branch  1 taken 100%
    #####:  687:    answer = councilMethod(state, currentPlayer, handPos);
    #####:  688:    return answer;
        -:  689:  }
        -:  690:
     3000:  691:  else if (card == feast){
branch  0 taken 0%
branch  1 taken 100%
    #####:  692:    answer = feastMethod(state, temphand, currentPlayer, choice1);
    #####:  693:    return answer;
        -:  694:  }
        -:  695:
        -:  696:  else{
        -:  697:
        -:  698:    //uses switch to select card and perform actions
     3000:  699:    switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
        -:  700:      {
        -:  701:
        -:  702:      case gardens:
    #####:  703:        return -1;
        -:  704:  			
        -:  705:      case mine:
    #####:  706:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  707:
    #####:  708:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:        {
    #####:  710:          return -1;
        -:  711:        }
        -:  712:  		
    #####:  713:        if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  714:        {
    #####:  715:          return -1;
        -:  716:        }
        -:  717:
    #####:  718:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  719:        {
    #####:  720:          return -1;
        -:  721:        }
        -:  722:
    #####:  723:        gainCard(choice2, state, 2, currentPlayer);
        -:  724:
        -:  725:        //discard card from hand
    #####:  726:        discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:        //discard trashed card
    #####:  729:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  730:        {
    #####:  731:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  732:          {
    #####:  733:            discardCard(i, currentPlayer, state, 0);
    #####:  734:            break;
        -:  735:          }
    #####:  736:        }
        -:  737:  			
    #####:  738:        return 0;
        -:  739:  			
        -:  740:      case remodel:
    #####:  741:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  742:
    #####:  743:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  744:        {
    #####:  745:          return -1;
        -:  746:        }
        -:  747:
    #####:  748:        gainCard(choice2, state, 0, currentPlayer);
        -:  749:
        -:  750:        //discard card from hand
    #####:  751:        discardCard(handPos, currentPlayer, state, 0);
        -:  752:
        -:  753:        //discard trashed card
    #####:  754:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  755:        {
    #####:  756:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  757:          {
    #####:  758:            discardCard(i, currentPlayer, state, 0);
    #####:  759:            break;
        -:  760:          }
    #####:  761:        }
        -:  762:
        -:  763:
    #####:  764:        return 0;
        -:  765:  		
        -:  766:      case baron:
     3000:  767:        state->numBuys++;//Increase buys by 1!
     3000:  768:        if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 52%
branch  1 taken 48%
     1566:  769:          int p = 0;//Iterator for hand!
     1566:  770:          int card_not_discarded = 1;//Flag for discard set!
   253578:  771:          while(card_not_discarded){
branch  0 taken 99%
branch  1 taken 1%
   125223:  772:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 1%
branch  1 taken 99%
      906:  773:              state->coins += 4;//Add 4 coins to the amount of coins
      906:  774:              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
      906:  775:              state->discardCount[currentPlayer]++;
   359460:  776:              for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 99%
branch  1 taken 1%
   178824:  777:                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
   178824:  778:              }
      906:  779:              state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
      906:  780:              state->handCount[currentPlayer]--;
      906:  781:              card_not_discarded = 0;//Exit the loop
      906:  782:            }
   124317:  783:            else if (p > state->handCount[currentPlayer]){
branch  0 taken 1%
branch  1 taken 99%
        -:  784:              if(DEBUG) {
        -:  785:                printf("No estate cards in your hand, invalid choice\n");
        -:  786:                printf("Must gain an estate if there are any\n");
        -:  787:              }
      660:  788:              if (supplyCount(estate, state) > 0){
branch  0 taken 91%
branch  1 taken 9%
      600:  789:                gainCard(estate, state, 0, currentPlayer);
      600:  790:                state->supplyCount[estate]--;//Decrement estates
      600:  791:                if (supplyCount(estate, state) == 0){
branch  0 taken 8%
branch  1 taken 92%
       48:  792:                  isGameOver(state);
       48:  793:                }
      600:  794:              }
      660:  795:              card_not_discarded = 0;//Exit the loop
      660:  796:            }
        -:  797:  			    
        -:  798:            else{
   123657:  799:              p++;//Next card
        -:  800:            }
        -:  801:          }
     1566:  802:        }
        -:  803:  			    
        -:  804:        else{
     1434:  805:          if (supplyCount(estate, state) > 0){
branch  0 taken 89%
branch  1 taken 11%
     1272:  806:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
     1272:  807:            state->supplyCount[estate]--;//Decrement Estates
     1272:  808:            if (supplyCount(estate, state) == 0){
branch  0 taken 9%
branch  1 taken 91%
      120:  809:              isGameOver(state);
      120:  810:            }
     1272:  811:          }
        -:  812:        }
        -:  813:
        -:  814:
     3000:  815:        return 0;
        -:  816:  		
        -:  817:      case great_hall:
        -:  818:        //+1 Card
    #####:  819:        drawCard(currentPlayer, state);
        -:  820:  			
        -:  821:        //+1 Actions
    #####:  822:        state->numActions++;
        -:  823:  			
        -:  824:        //discard card from hand
    #####:  825:        discardCard(handPos, currentPlayer, state, 0);
    #####:  826:        return 0;
        -:  827:  		
        -:  828:      case minion:
        -:  829:        //+1 action
    #####:  830:        state->numActions++;
        -:  831:  			
        -:  832:        //discard card from hand
    #####:  833:        discardCard(handPos, currentPlayer, state, 0);
        -:  834:  			
    #####:  835:        if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  836:        {
    #####:  837:          state->coins = state->coins + 2;
    #####:  838:        }
        -:  839:  			
    #####:  840:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  841:          {
        -:  842:          //discard hand
    #####:  843:          while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  844:          {
    #####:  845:            discardCard(handPos, currentPlayer, state, 0);
        -:  846:          }
        -:  847:
        -:  848:          //draw 4
    #####:  849:          for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  850:          {
    #####:  851:            drawCard(currentPlayer, state);
    #####:  852:          }
        -:  853:  				
        -:  854:          //other players discard hand and redraw if hand size > 4
    #####:  855:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  856:            {
    #####:  857:              if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  858:              {
    #####:  859:                if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  860:                  {
        -:  861:                  //discard hand
    #####:  862:                    while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  863:                      {
    #####:  864:                      discardCard(handPos, i, state, 0);
        -:  865:                      }
        -:  866:                  
        -:  867:                   //draw 4
    #####:  868:                    for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  869:                      {
    #####:  870:                        drawCard(i, state);
    #####:  871:                      }
    #####:  872:                  }
    #####:  873:              }
    #####:  874:            }
        -:  875:
    #####:  876:          }
    #####:  877:        return 0;
        -:  878:  		
        -:  879:      case steward:
    #####:  880:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  881:          {
        -:  882:            //+2 cards
    #####:  883:            drawCard(currentPlayer, state);
    #####:  884:            drawCard(currentPlayer, state);
    #####:  885:          }
    #####:  886:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  887:          {
        -:  888:            //+2 coins
    #####:  889:            state->coins = state->coins + 2;
    #####:  890:          }
        -:  891:        else
        -:  892:          {
        -:  893:            //trash 2 cards in hand
    #####:  894:            discardCard(choice2, currentPlayer, state, 1);
    #####:  895:            discardCard(choice3, currentPlayer, state, 1);
        -:  896:          }
        -:  897:  			
        -:  898:        //discard card from hand
    #####:  899:        discardCard(handPos, currentPlayer, state, 0);
    #####:  900:        return 0;
        -:  901:  		
        -:  902:      case tribute:
    #####:  903:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  904:          if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  906:            state->deckCount[nextPlayer]--;
    #####:  907:          }
    #####:  908:          else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  910:            state->discardCount[nextPlayer]--;
    #####:  911:          }
        -:  912:          else{
        -:  913:            //No Card to Reveal
        -:  914:            if (DEBUG){
        -:  915:              printf("No cards to reveal\n");
        -:  916:            }
        -:  917:          }
    #####:  918:        }
        -:  919:  	    
        -:  920:        else{
    #####:  921:          if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  922:            for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  923:              state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  924:              state->deckCount[nextPlayer]++;
    #####:  925:              state->discard[nextPlayer][i] = -1;
    #####:  926:              state->discardCount[nextPlayer]--;
    #####:  927:            }
        -:  928:
    #####:  929:            shuffle(nextPlayer,state);//Shuffle the deck
    #####:  930:          }
    #####:  931:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  932:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  933:          state->deckCount[nextPlayer]--;
    #####:  934:          tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  936:          state->deckCount[nextPlayer]--;
        -:  937:        }    
        -:  938:  		       
    #####:  939:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  940:          state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  941:          state->playedCardCount++;
    #####:  942:          tributeRevealedCards[1] = -1;
    #####:  943:        }
        -:  944:
    #####:  945:        for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  946:          if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  947:            state->coins += 2;
    #####:  948:          }
        -:  949:
    #####:  950:          else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  951:            drawCard(currentPlayer, state);
    #####:  952:            drawCard(currentPlayer, state);
    #####:  953:          }
        -:  954:          else{//Action Card
    #####:  955:            state->numActions = state->numActions + 2;
        -:  956:          }
    #####:  957:        }
        -:  958:  	    
    #####:  959:        return 0;
        -:  960:  		
        -:  961:      case ambassador:
    #####:  962:        j = 0;		//used to check if player has enough cards to discard
        -:  963:
    #####:  964:        if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  965:          {
    #####:  966:            return -1;
        -:  967:          }
        -:  968:
    #####:  969:        if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  970:          {
    #####:  971:            return -1;
        -:  972:          }
        -:  973:
    #####:  974:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:          {
    #####:  976:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:              {
    #####:  978:                j++;
    #####:  979:              }
    #####:  980:          }
    #####:  981:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  982:          {
    #####:  983:            return -1;
        -:  984:          }
        -:  985:
        -:  986:        if (DEBUG)
        -:  987:          printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  988:
        -:  989:        //increase supply count for choosen card by amount being discarded
    #####:  990:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  991:  			
        -:  992:        //each other player gains a copy of revealed card
    #####:  993:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  994:          {
    #####:  995:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  996:              {
    #####:  997:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  998:              }
    #####:  999:          }
        -: 1000:
        -: 1001:        //discard played card from hand
    #####: 1002:        discardCard(handPos, currentPlayer, state, 0);			
        -: 1003:
        -: 1004:        //trash copies of cards returned to supply
    #####: 1005:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1006:          {
    #####: 1007:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:              {
    #####: 1009:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1010:                  {
    #####: 1011:                    discardCard(i, currentPlayer, state, 1);
    #####: 1012:                    break;
        -: 1013:                  }
    #####: 1014:              }
    #####: 1015:          }
        -: 1016:
    #####: 1017:        return 0;
        -: 1018:  		
        -: 1019:      case cutpurse:
        -: 1020:
    #####: 1021:        updateCoins(currentPlayer, state, 2);
    #####: 1022:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:          {
    #####: 1024:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:              {
    #####: 1026:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:                  {
    #####: 1028:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1029:                      {
    #####: 1030:                        discardCard(j, i, state, 0);
    #####: 1031:                        break;
        -: 1032:                      }
    #####: 1033:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1034:                      {
    #####: 1035:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1036:                          {
        -: 1037:                            if (DEBUG)
        -: 1038:                              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1039:                          }
    #####: 1040:                        break;
        -: 1041:                      }
    #####: 1042:                  }
        -: 1043:
    #####: 1044:              }
        -: 1045:
    #####: 1046:          }				
        -: 1047:
        -: 1048:        //discard played card from hand
    #####: 1049:        discardCard(handPos, currentPlayer, state, 0);			
        -: 1050:
    #####: 1051:        return 0;
        -: 1052:  		
        -: 1053:      case embargo: 
        -: 1054:        //+2 Coins
    #####: 1055:        state->coins = state->coins + 2;
        -: 1056:  			
        -: 1057:        //see if selected pile is in play
    #####: 1058:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1059:          {
    #####: 1060:            return -1;
        -: 1061:          }
        -: 1062:  			
        -: 1063:        //add embargo token to selected supply pile
    #####: 1064:        state->embargoTokens[choice1]++;
        -: 1065:  			
        -: 1066:        //trash card
    #####: 1067:        discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:        return 0;
        -: 1069:  		
        -: 1070:      case outpost:
        -: 1071:        //set outpost flag
    #####: 1072:        state->outpostPlayed++;
        -: 1073:  			
        -: 1074:        //discard card
    #####: 1075:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:        return 0;
        -: 1077:  		
        -: 1078:      case salvager:
        -: 1079:        //+1 buy
    #####: 1080:        state->numBuys++;
        -: 1081:  			
    #####: 1082:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1083:          {
        -: 1084:            //gain coins equal to trashed card
    #####: 1085:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:            //trash card
    #####: 1087:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1088:          }
        -: 1089:  			
        -: 1090:        //discard card
    #####: 1091:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:        return 0;
        -: 1093:  		
        -: 1094:      case sea_hag:
    #####: 1095:        for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1096:          if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1097:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1098:            state->discardCount[i]++;
    #####: 1099:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1100:          }
    #####: 1101:        }
    #####: 1102:        return 0;
        -: 1103:  		
        -: 1104:      case treasure_map:
        -: 1105:        //search hand for another treasure_map
    #####: 1106:        index = -1;
    #####: 1107:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1108:          {
    #####: 1109:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1110:              {
    #####: 1111:                index = i;
    #####: 1112:                break;
        -: 1113:              }
    #####: 1114:          }
    #####: 1115:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1116:          {
        -: 1117:            //trash both treasure cards
    #####: 1118:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1119:            discardCard(index, currentPlayer, state, 1);
        -: 1120:
        -: 1121:            //gain 4 Gold cards
    #####: 1122:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:              {
    #####: 1124:                gainCard(gold, state, 1, currentPlayer);
    #####: 1125:              }
        -: 1126:  				
        -: 1127:            //return success
    #####: 1128:            return 1;
        -: 1129:          }
        -: 1130:  			
        -: 1131:        //no second treasure_map found in hand
    #####: 1132:        return -1;
        -: 1133:      }
    #####: 1134:      return -1;
        -: 1135:    }
     3003: 1136:}
        -: 1137:
function adventurerMethod called 3003 returned 100% blocks executed 100%
        -: 1138:int adventurerMethod(struct gameState *state, int *temphand, int currentPlayer){
        -: 1139:  int cardDrawn;
     3003: 1140:  int z = 0;// this is the counter for the temp hand
     3003: 1141:  int drawntreasure = 0;
    84618: 1142:  while(drawntreasure<2){
branch  0 taken 93%
branch  1 taken 7%
    39306: 1143:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
       54: 1144:      shuffle(currentPlayer, state);
       54: 1145:    }
    39306: 1146:    drawCard(currentPlayer, state);
    39306: 1147:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   112023: 1148:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 95%
branch  3 taken 5%
branch  4 taken 6%
branch  5 taken 94%
     6006: 1149:      drawntreasure++;
        -: 1150:    else{
    33300: 1151:      temphand[z]=cardDrawn;
    33300: 1152:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    33300: 1153:      z++;
        -: 1154:    }
        -: 1155:  }
    78612: 1156:  while(z>=0){
branch  0 taken 92%
branch  1 taken 8%
    36303: 1157:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    36303: 1158:    z=z-1;
        -: 1159:  }
     3003: 1160:  return 0;
        -: 1161:}
        -: 1162:
function smithyMethod called 3 returned 100% blocks executed 100%
        -: 1163:int smithyMethod(struct gameState *state, int currentPlayer, int handPos){
        -: 1164:  //+3 Cards
        -: 1165:  int i;
       30: 1166:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1167:  {
       12: 1168:    drawCard(currentPlayer, state);
       12: 1169:  }
        -: 1170:
        -: 1171:  //discard card from hand
        3: 1172:  discardCard(handPos, currentPlayer, state, 0);
        3: 1173:  return 0;
        -: 1174:}
        -: 1175:
function villageMethod called 0 returned 0% blocks executed 0%
        -: 1176:int villageMethod(struct gameState *state, int currentPlayer, int handPos){
        -: 1177:  //+1 Card
    #####: 1178:  drawCard(currentPlayer, state);
        -: 1179:        
        -: 1180:  //+2 Actions
    #####: 1181:  state->numActions = state->numActions + 2;
        -: 1182:        
        -: 1183:  //discard played card from hand
    #####: 1184:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1185:  return 0;
        -: 1186:}
        -: 1187:
function councilMethod called 0 returned 0% blocks executed 0%
        -: 1188:int councilMethod(struct gameState *state, int currentPlayer, int handPos){
        -: 1189:  //+4 Cards
        -: 1190:  int i;
    #####: 1191:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1192:  {
    #####: 1193:    drawCard(currentPlayer, state);
    #####: 1194:  }
        -: 1195:        
        -: 1196:  //+1 Buy
    #####: 1197:  state->numBuys++;
        -: 1198:        
        -: 1199:  //Each other player draws a card
    #####: 1200:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1201:  {
    #####: 1202:    if ( i == currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1203:    {
    #####: 1204:      drawCard(i, state);
    #####: 1205:    }
    #####: 1206:  }
        -: 1207:        
        -: 1208:  //put played card in played card pile
    #####: 1209:  discardCard(handPos, currentPlayer, state, 0);
        -: 1210:        
    #####: 1211:  return 0;
        -: 1212:}
        -: 1213:
function feastMethod called 0 returned 0% blocks executed 0%
        -: 1214:int feastMethod(struct gameState *state, int *temphand, int currentPlayer, int choice1){
        -: 1215:  //gain card with cost up to 5
        -: 1216:  //Backup hand
        -: 1217:  int i;
    #####: 1218:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1219:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1220:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1221:  }
        -: 1222:  //Backup hand
        -: 1223:
        -: 1224:  //Update Coins for Buy
    #####: 1225:  updateCoins(currentPlayer, state, 5);
    #####: 1226:  int x = 1;//Condition to loop on
    #####: 1227:  while( x != 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1228:    if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -: 1229:      if (DEBUG)
        -: 1230:        printf("None of that card left, sorry!\n");
        -: 1231:
        -: 1232:      if (DEBUG){
        -: 1233:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1234:      }
    #####: 1235:    }
    #####: 1236:    else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####: 1237:      printf("That card is too expensive!\n");
        -: 1238:
        -: 1239:      if (DEBUG){
        -: 1240:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1241:      }
    #####: 1242:    }
        -: 1243:    else{
        -: 1244:
        -: 1245:      if (DEBUG){
        -: 1246:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1247:      }
        -: 1248:
    #####: 1249:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1250:      x = 0;//No more buying cards
        -: 1251:
        -: 1252:      if (DEBUG){
        -: 1253:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1254:      }
        -: 1255:
        -: 1256:    }
        -: 1257:  }     
        -: 1258:
        -: 1259:  //Reset Hand
    #####: 1260:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1261:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1262:    temphand[i] = -1;
    #####: 1263:  }
        -: 1264:  //Reset Hand
        -: 1265:              
    #####: 1266:  return 0;
        -: 1267:}
        -: 1268:
function discardCard called 3 returned 100% blocks executed 80%
        -: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
        3: 1273:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1274:    {
        -: 1275:      //add card to played pile
        3: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1277:      state->playedCardCount++;
        3: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
        3: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
        3: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
    #####: 1288:    }
        3: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
    #####: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
        3: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
        3: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
        3: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
        3: 1304:  return 0;
        -: 1305:}
        -: 1306:
function gainCard called 4512 returned 100% blocks executed 90%
        -: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
     4512: 1312:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
     4512: 1322:  if (toFlag == 1)
branch  0 taken 1%
branch  1 taken 99%
        -: 1323:    {
        4: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1325:      state->deckCount[player]++;
        4: 1326:    }
     4508: 1327:  else if (toFlag == 2)
branch  0 taken 1%
branch  1 taken 99%
        -: 1328:    {
        4: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1330:      state->handCount[player]++;
        4: 1331:    }
        -: 1332:  else
        -: 1333:    {
     4504: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4504: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
     4512: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
     4512: 1341:  return 0;
     4512: 1342:}
        -: 1343:
function updateCoins called 38 returned 100% blocks executed 100%
        -: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
       38: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
      456: 1352:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1353:    {
      190: 1354:      if (state->hand[player][i] == copper)
branch  0 taken 57%
branch  1 taken 43%
        -: 1355:        {
      108: 1356:          state->coins += 1;
      108: 1357:        }
       82: 1358:      else if (state->hand[player][i] == silver)
branch  0 taken 24%
branch  1 taken 76%
        -: 1359:        {
       20: 1360:          state->coins += 2;
       20: 1361:        }
       62: 1362:      else if (state->hand[player][i] == gold)
branch  0 taken 65%
branch  1 taken 35%
        -: 1363:      {
       40: 1364:        state->coins += 3;
       40: 1365:      }	
      190: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
       38: 1369:  state->coins += bonus;
        -: 1370:
       38: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
