        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/* instructor comments: file is updated. */
        -:    9:int dummymethod()
        -:   10:{
        -:   11:	return 0;
        -:   12:}
        -:   13:int compare(const void* a, const void* b) {
        -:   14:  if (*(int*)a > *(int*)b)
        -:   15:    return 1;
        -:   16:  if (*(int*)a < *(int*)b)
        -:   17:    return -1;
        -:   18:  return 0;
        -:   19:}
        -:   20:
        -:   21:struct gameState* newGame() {
        -:   22:  struct gameState* g = malloc(sizeof(struct gameState));
        -:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
        -:   28:  int* k = malloc(10 * sizeof(int));
        -:   29:  k[0] = k1;
        -:   30:  k[1] = k2;
        -:   31:  k[2] = k3;
        -:   32:  k[3] = k4;
        -:   33:  k[4] = k5;
        -:   34:  k[5] = k6;
        -:   35:  k[6] = k7;
        -:   36:  k[7] = k8;
        -:   37:  k[8] = k9;
        -:   38:  k[9] = k10;
        -:   39:  return k;
        -:   40:}
        -:   41:
        -:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;
        -:   48:  //set up random number generator
        -:   49:  SelectStream(1);
        -:   50:  PutSeed((long)randomSeed);
        -:   51:
        -:   52:  //check number of players
        -:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   54:    {
        -:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
        -:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
        -:   62:  for (i = 0; i < 10; i++)
        -:   63:    {
        -:   64:      for (j = 0; j < 10; j++)
        -:   65:        {
        -:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   67:	    {
        -:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
        -:   78:  if (numPlayers == 2)
        -:   79:    {
        -:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
        -:   82:  else if (numPlayers == 3)
        -:   83:    {
        -:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
        -:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
        -:   92:  if (numPlayers == 2)
        -:   93:    {
        -:   94:      state->supplyCount[estate] = 8;
        -:   95:      state->supplyCount[duchy] = 8;
        -:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
        -:  100:      state->supplyCount[estate] = 12;
        -:  101:      state->supplyCount[duchy] = 12;
        -:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
        -:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        -:  107:  state->supplyCount[silver] = 40;
        -:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
        -:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  112:    {
        -:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  114:	{
        -:  115:	  if (kingdomCards[j] == i)
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
        -:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  119:		{
        -:  120:		  if (numPlayers == 2){
        -:  121:		    state->supplyCount[i] = 8;
        -:  122:		  }
        -:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
        -:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
        -:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
        -:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
        -:  143:  for (i = 0; i < numPlayers; i++)
        -:  144:    {
        -:  145:      state->deckCount[i] = 0;
        -:  146:      for (j = 0; j < 3; j++)
        -:  147:	{
        -:  148:	  state->deck[i][j] = estate;
        -:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:      for (j = 3; j < 10; j++)
        -:  152:	{
        -:  153:	  state->deck[i][j] = copper;
        -:  154:	  state->deckCount[i]++;
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
        -:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {
        -:  161:      if ( shuffle(i, state) < 0 )
        -:  162:	{
        -:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
        -:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        -:  170:      //initialize hand size to zero
        -:  171:      state->handCount[i] = 0;
        -:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:
        -:  180:  //set embargo tokens to 0 for all supply piles
        -:  181:  for (i = 0; i <= treasure_map; i++)
        -:  182:    {
        -:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
        -:  187:  state->outpostPlayed = 0;
        -:  188:  state->phase = 0;
        -:  189:  state->numActions = 1;
        -:  190:  state->numBuys = 1;
        -:  191:  state->playedCardCount = 0;
        -:  192:  state->whoseTurn = 0;
        -:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
        -:  197:  for (it = 0; it < 5; it++){
        -:  198:    drawCard(state->whoseTurn, state);
        -:  199:  }
        -:  200:
        -:  201:  updateCoins(state->whoseTurn, state, 0);
        -:  202:
        -:  203:  return 0;
        -:  204:}
        -:  205:
        -:  206:int shuffle(int player, struct gameState *state) {
        -:  207:
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
        -:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
        -:  214:  if (state->deckCount[player] < 1)
        -:  215:    return -1;
        -:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
        -:  219:  while (state->deckCount[player] > 0) {
        -:  220:    card = floor(Random() * state->deckCount[player]);
        -:  221:    newDeck[newDeckPos] = state->deck[player][card];
        -:  222:    newDeckPos++;
        -:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
        -:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
        -:  226:    state->deckCount[player]--;
        -:  227:  }
        -:  228:  for (i = 0; i < newDeckPos; i++) {
        -:  229:    state->deck[player][i] = newDeck[i];
        -:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
        -:  233:  return 0;
        -:  234:}
        -:  235:
        -:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  237:{
        -:  238:  int card;
        -:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
        -:  242:  if (state->phase != 0)
        -:  243:    {
        -:  244:      return -1;
        -:  245:    }
        -:  246:
        -:  247:  //check if player has enough actions
        -:  248:  if ( state->numActions < 1 )
        -:  249:    {
        -:  250:      return -1;
        -:  251:    }
        -:  252:
        -:  253:  //get card played
        -:  254:  card = handCard(handPos, state);
        -:  255:
        -:  256:  //check if selected card is an action
        -:  257:  if ( card < adventurer || card > treasure_map )
        -:  258:    {
        -:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //play card
        -:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  264:    {
        -:  265:      return -1;
        -:  266:    }
        -:  267:
        -:  268:  //reduce number of actions
        -:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
        -:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:
        -:  274:  return 0;
        -:  275:}
        -:  276:
        -:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
        -:  285:  who = state->whoseTurn;
        -:  286:
        -:  287:  if (state->numBuys < 1){
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
        -:  290:    return -1;
        -:  291:  } else if (supplyCount(supplyPos, state) <1){
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
        -:  294:    return -1;
        -:  295:  } else if (state->coins < getCost(supplyPos)){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        -:  298:    return -1;
        -:  299:  } else {
        -:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
        -:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
        -:  304:    state->coins = (state->coins) - (getCost(supplyPos));
        -:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:
        -:  313:  return 0;
        -:  314:}
        -:  315:
        -:  316:int numHandCards(struct gameState *state) {
        -:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
        -:  320:int handCard(int handPos, struct gameState *state) {
        -:  321:  int currentPlayer = whoseTurn(state);
        -:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
        -:  325:int supplyCount(int card, struct gameState *state) {
        -:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
        -:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
        -:  331:  int count = state->deckCount[player]+state->discardCount[player]+state->handCount[player];
        -:  332:  return count;
        -:  333:}
        -:  334:
        -:  335:int whoseTurn(struct gameState *state) {
        -:  336:  return state->whoseTurn;
        -:  337:}
        -:  338:
        -:  339:int endTurn(struct gameState *state) {
        -:  340:  int k;
        -:  341:  int i;
        -:  342:  int currentPlayer = whoseTurn(state);
        -:  343:
        -:  344:  //Discard hand
        -:  345:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        -:  346:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        -:  347:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  348:  }
        -:  349:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  350:
        -:  351:  //Code for determining the player
        -:  352:  if (currentPlayer < (state->numPlayers - 1)){
        -:  353:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  354:  }
        -:  355:  else{
        -:  356:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  357:  }
        -:  358:
        -:  359:  state->outpostPlayed = 0;
        -:  360:  state->phase = 0;
        -:  361:  state->numActions = 1;
        -:  362:  state->coins = 0;
        -:  363:  state->numBuys = 1;
        -:  364:  state->playedCardCount = 0;
        -:  365:  state->handCount[state->whoseTurn] = 0;
        -:  366:
        -:  367:  //int k; move to top
        -:  368:  //Next player draws hand
        -:  369:  for (k = 0; k < 5; k++){
        -:  370:    drawCard(state->whoseTurn, state);//Draw a card
        -:  371:  }
        -:  372:
        -:  373:  //Update money
        -:  374:  updateCoins(state->whoseTurn, state , 0);
        -:  375:
        -:  376:  return 0;
        -:  377:}
        -:  378:
        -:  379:int isGameOver(struct gameState *state) {
        -:  380:  int i;
        -:  381:  int j;
        -:  382:
        -:  383:  //if stack of Province cards is empty, the game ends
        -:  384:  if (state->supplyCount[province] == 0)
        -:  385:    {
        -:  386:      return 1;
        -:  387:    }
        -:  388:
        -:  389:  //if three supply pile are at 0, the game ends
        -:  390:  j = 0;
        -:  391:  for (i = 0; i < 25; i++)
        -:  392:    {
        -:  393:      if (state->supplyCount[i] == 0)
        -:  394:	{
        -:  395:	  j++;
        -:  396:	}
        -:  397:    }
        -:  398:  if ( j >= 3)
        -:  399:    {
        -:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  return 0;
        -:  404:}
        -:  405:
        -:  406:int scoreFor (int player, struct gameState *state) {
        -:  407:
        -:  408:  int i;
        -:  409:  int score = 0;
        -:  410:  //score from hand
        -:  411:  for (i = 0; i < state->handCount[player]; i++)
        -:  412:    {
        -:  413:      if (state->hand[player][i] == curse) { score = score - 1; };
        -:  414:      if (state->hand[player][i] == estate) { score = score + 1; };
        -:  415:      if (state->hand[player][i] == duchy) { score = score + 3; };
        -:  416:      if (state->hand[player][i] == province) { score = score + 6; };
        -:  417:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        -:  418:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  419:    }
        -:  420:
        -:  421:  //score from discard
        -:  422:  for (i = 0; i < state->discardCount[player]; i++)
        -:  423:    {
        -:  424:      if (state->discard[player][i] == curse) { score = score - 1; };
        -:  425:      if (state->discard[player][i] == estate) { score = score + 1; };
        -:  426:      if (state->discard[player][i] == duchy) { score = score + 3; };
        -:  427:      if (state->discard[player][i] == province) { score = score + 6; };
        -:  428:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        -:  429:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from deck
        -:  433:  for (i = 0; i < state->deckCount[player]; i++)
        -:  434:    {
        -:  435:      if (state->deck[player][i] == curse) { score = score - 1; };
        -:  436:      if (state->deck[player][i] == estate) { score = score + 1; };
        -:  437:      if (state->deck[player][i] == duchy) { score = score + 3; };
        -:  438:      if (state->deck[player][i] == province) { score = score + 6; };
        -:  439:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        -:  440:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    return score;
        -:  444:}
        -:  445:
        -:  446:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  447:  int i;
        -:  448:  int j;
        -:  449:  int highScore;
        -:  450:  int currentPlayer;
        -:  451:
        -:  452:  //get score for each player
        -:  453:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  454:    {
        -:  455:      //set unused player scores to -9999
        -:  456:      if (i >= state->numPlayers)
        -:  457:	{
        -:  458:	  players[i] = -9999;
        -:  459:	}
        -:  460:      else
        -:  461:	{
        -:  462:	  players[i] = scoreFor (i, state);
        -:  463:	}
        -:  464:    }
        -:  465:
        -:  466:  //find highest score
        -:  467:  j = 0;
        -:  468:  for (i = 0; i < MAX_PLAYERS; i++){
        -:  469:      	if (players[i] > players[j])
        -:  470:	{
        -:  471:	  j = i;
        -:  472:	}
        -:  473:    }
        -:  474:  highScore = players[j];
        -:  475:
        -:  476:  //add 1 to players who had fewer turns
        -:  477:  currentPlayer = whoseTurn(state);
        -:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
        -:  480:      if ( players[i] == highScore && i > currentPlayer )
        -:  481:	{
        -:  482:	  players[i]++;
        -:  483:	}
        -:  484:    }
        -:  485:
        -:  486:  //find new highest score
        -:  487:  j = 0;
        -:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
        -:  490:      if ( players[i] > players[j] )
        -:  491:	{
        -:  492:	  j = i;
        -:  493:	}
        -:  494:    }
        -:  495:  highScore = players[j];
        -:  496:
        -:  497:  //set winners in array to 1 and rest to 0
        -:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
        -:  500:      if ( players[i] == highScore )
        -:  501:	{
        -:  502:	  players[i] = 1;
        -:  503:	}
        -:  504:      else
        -:  505:	{
        -:  506:	  players[i] = 0;
        -:  507:	}
        -:  508:    }
        -:  509:
        -:  510:  return 0;
        -:  511:}
        -:  512:
        -:  513:int drawCard(int player, struct gameState *state)
        -:  514:{	int count;
        -:  515:  int deckCounter;
        -:  516:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  517:
        -:  518:    //Step 1 Shuffle the discard pile back into a deck
        -:  519:    int i;
        -:  520:    //Move discard to deck
        -:  521:    for (i = 0; i < state->discardCount[player];i++){
        -:  522:      state->deck[player][i] = state->discard[player][i];
        -:  523:      state->discard[player][i] = -1;
        -:  524:    }
        -:  525:
        -:  526:    state->deckCount[player] = state->discardCount[player];
        -:  527:    state->discardCount[player] = 0;//Reset discard
        -:  528:
        -:  529:    //Shufffle the deck
        -:  530:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  531:
        -:  532:    if (DEBUG){//Debug statements
        -:  533:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  534:    }
        -:  535:
        -:  536:    state->discardCount[player] = 0;
        -:  537:
        -:  538:    //Step 2 Draw Card
        -:  539:    count = state->handCount[player];//Get current player's hand count
        -:  540:
        -:  541:    if (DEBUG){//Debug statements
        -:  542:      printf("Current hand count: %d\n", count);
        -:  543:    }
        -:  544:
        -:  545:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  546:
        -:  547:    if (deckCounter == 0)
        -:  548:      return -1;
        -:  549:
        -:  550:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        -:  551:    state->deckCount[player]--;
        -:  552:    state->handCount[player]++;//Increment hand count
        -:  553:  }
        -:  554:
        -:  555:  else{
        -:  556:    int count = state->handCount[player];//Get current hand count for player
        -:  557:    int deckCounter;
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:
        -:  562:    deckCounter = state->deckCount[player];//Create holder for the deck count
        -:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        -:  564:    state->deckCount[player]--;
        -:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  return 0;
        -:  569:}
        -:  570:
        -:  571:int getCost(int cardNumber)
        -:  572:{
        -:  573:  switch( cardNumber )
        -:  574:    {
        -:  575:    case curse:
        -:  576:      return 0;
        -:  577:    case estate:
        -:  578:      return 2;
        -:  579:    case duchy:
        -:  580:      return 5;
        -:  581:    case province:
        -:  582:      return 8;
        -:  583:    case copper:
        -:  584:      return 0;
        -:  585:    case silver:
        -:  586:      return 3;
        -:  587:    case gold:
        -:  588:      return 6;
        -:  589:    case adventurer:
        -:  590:      return 6;
        -:  591:    case council_room:
        -:  592:      return 5;
        -:  593:    case feast:
        -:  594:      return 4;
        -:  595:    case gardens:
        -:  596:      return 4;
        -:  597:    case mine:
        -:  598:      return 5;
        -:  599:    case remodel:
        -:  600:      return 4;
        -:  601:    case smithy:
        -:  602:      return 4;
        -:  603:    case village:
        -:  604:      return 3;
        -:  605:    case baron:
        -:  606:      return 4;
        -:  607:    case great_hall:
        -:  608:      return 3;
        -:  609:    case minion:
        -:  610:      return 5;
        -:  611:    case steward:
        -:  612:      return 3;
        -:  613:    case tribute:
        -:  614:      return 5;
        -:  615:    case ambassador:
        -:  616:      return 3;
        -:  617:    case cutpurse:
        -:  618:      return 4;
        -:  619:    case embargo:
        -:  620:      return 2;
        -:  621:    case outpost:
        -:  622:      return 5;
        -:  623:    case salvager:
        -:  624:      return 4;
        -:  625:    case sea_hag:
        -:  626:      return 4;
        -:  627:    case treasure_map:
        -:  628:      return 4;
        -:  629:    }
        -:  630:
        -:  631:  return -1;
        -:  632:}
        -:  633:
        -:  634:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  635:{
        -:  636:  int i;
        -:  637:  int j;
        -:  638:  int k;
        -:  639:  int x;
        -:  640:  int index;
        -:  641:  int currentPlayer = whoseTurn(state);
        -:  642:  int nextPlayer = currentPlayer + 1;
        -:  643:
        -:  644:  int tributeRevealedCards[2] = {-1, -1};
        -:  645:  int temphand[MAX_HAND];// moved above the if statement
        -:  646:  if (nextPlayer > (state->numPlayers - 1)){
        -:  647:    nextPlayer = 0;
        -:  648:  }
        -:  649:
        -:  650:
        -:  651:  //uses switch to select card and perform actions
        -:  652:  switch( card )
        -:  653:    {
        -:  654:    case adventurer:
        -:  655:      adventurerEffect( card, choice1, choice2, choice3, state, handPos, bonus );
        -:  656:      return 0;
        -:  657:
        -:  658:    case council_room:
        -:  659:      //+4 Cards
        -:  660:      for (i = 0; i < 4; i++)
        -:  661:	{
        -:  662:	  drawCard(currentPlayer, state);
        -:  663:	}
        -:  664:
        -:  665:      //+1 Buy
        -:  666:      state->numBuys++;
        -:  667:
        -:  668:      //Each other player draws a card
        -:  669:      for (i = 0; i < state->numPlayers; i++)
        -:  670:	{
        -:  671:	  if ( i != currentPlayer )
        -:  672:	    {
        -:  673:	      drawCard(i, state);
        -:  674:	    }
        -:  675:	}
        -:  676:
        -:  677:      //put played card in played card pile
        -:  678:      discardCard(handPos, currentPlayer, state, 0);
        -:  679:
        -:  680:      return 0;
        -:  681:
        -:  682:    case feast:
        -:  683:      //gain card with cost up to 5
        -:  684:      //Backup hand
        -:  685:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  686:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  687:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  688:      }
        -:  689:      //Backup hand
        -:  690:
        -:  691:      //Update Coins for Buy
        -:  692:      updateCoins(currentPlayer, state, 5);
        -:  693:      x = 1;//Condition to loop on
        -:  694:      while( x == 1) {//Buy one card
        -:  695:	if (supplyCount(choice1, state) <= 0){
        -:  696:	  if (DEBUG)
        -:  697:	    printf("None of that card left, sorry!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  701:	  }
        -:  702:	}
        -:  703:	else if (state->coins < getCost(choice1)){
        -:  704:	  printf("That card is too expensive!\n");
        -:  705:
        -:  706:	  if (DEBUG){
        -:  707:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  708:	  }
        -:  709:	}
        -:  710:	else{
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  717:	  x = 0;//No more buying cards
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	  }
        -:  722:
        -:  723:	}
        -:  724:      }
        -:  725:
        -:  726:      //Reset Hand
        -:  727:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  728:	state->hand[currentPlayer][i] = temphand[i];
        -:  729:	temphand[i] = -1;
        -:  730:      }
        -:  731:      //Reset Hand
        -:  732:
        -:  733:      return 0;
        -:  734:
        -:  735:    case gardens:
        -:  736:      return -1;
        -:  737:
        -:  738:    case mine:
        -:  739:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  740:
        -:  741:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  742:	{
        -:  743:	  return -1;
        -:  744:	}
        -:  745:
        -:  746:      if (choice2 > treasure_map || choice2 < curse)
        -:  747:	{
        -:  748:	  return -1;
        -:  749:	}
        -:  750:
        -:  751:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  752:	{
        -:  753:	  return -1;
        -:  754:	}
        -:  755:
        -:  756:      gainCard(choice2, state, 2, currentPlayer);
        -:  757:
        -:  758:      //discard card from hand
        -:  759:      discardCard(handPos, currentPlayer, state, 0);
        -:  760:
        -:  761:      //discard trashed card
        -:  762:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  763:	{
        -:  764:	  if (state->hand[currentPlayer][i] == j)
        -:  765:	    {
        -:  766:	      discardCard(i, currentPlayer, state, 0);
        -:  767:	      break;
        -:  768:	    }
        -:  769:	}
        -:  770:
        -:  771:      return 0;
        -:  772:
        -:  773:    case remodel:
        -:  774:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
        -:  776:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  777:	{
        -:  778:	  return -1;
        -:  779:	}
        -:  780:
        -:  781:      gainCard(choice2, state, 0, currentPlayer);
        -:  782:
        -:  783:      //discard card from hand
        -:  784:      discardCard(handPos, currentPlayer, state, 0);
        -:  785:
        -:  786:      //discard trashed card
        -:  787:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  788:	{
        -:  789:	  if (state->hand[currentPlayer][i] == j)
        -:  790:	    {
        -:  791:	      discardCard(i, currentPlayer, state, 0);
        -:  792:	      break;
        -:  793:	    }
        -:  794:	}
        -:  795:
        -:  796:
        -:  797:      return 0;
        -:  798:
        -:  799:    case smithy:
        -:  800:      smithyEffect(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  801:      return 0;
        -:  802:
        -:  803:    case village:
        -:  804:      //+1 Card
        -:  805:      drawCard(currentPlayer, state);
        -:  806:
        -:  807:      //+2 Actions
        -:  808:      state->numActions = state->numActions + 2;
        -:  809:
        -:  810:      //discard played card from hand
        -:  811:      discardCard(handPos, currentPlayer, state, 0);
        -:  812:      return 0;
        -:  813:
        -:  814:    case baron:
        -:  815:      state->numBuys++;//Increase buys by 1!
        -:  816:      if (choice1 > 0){//Boolean true or going to discard an estate
        -:  817:	int p = 0;//Iterator for hand!
        -:  818:	int card_not_discarded = 1;//Flag for discard set!
        -:  819:	while(card_not_discarded){
        -:  820:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  821:	    state->coins += 4;//Add 4 coins to the amount of coins
        -:  822:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  823:	    state->discardCount[currentPlayer]++;
        -:  824:	    for (;p < state->handCount[currentPlayer]; p++){
        -:  825:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  826:	    }
        -:  827:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  828:	    state->handCount[currentPlayer]--;
        -:  829:	    card_not_discarded = 0;//Exit the loop
        -:  830:	  }
        -:  831:	  else if (p > state->handCount[currentPlayer]){
        -:  832:	    if(DEBUG) {
        -:  833:	      printf("No estate cards in your hand, invalid choice\n");
        -:  834:	      printf("Must gain an estate if there are any\n");
        -:  835:	    }
        -:  836:	    if (supplyCount(estate, state) > 0){
        -:  837:	      gainCard(estate, state, 0, currentPlayer);
        -:  838:	      state->supplyCount[estate]--;//Decrement estates
        -:  839:	      if (supplyCount(estate, state) == 0){
        -:  840:		isGameOver(state);
        -:  841:	      }
        -:  842:	    }
        -:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
        -:  845:
        -:  846:	  else{
        -:  847:	    p++;//Next card
        -:  848:	  }
        -:  849:	}
        -:  850:      }
        -:  851:
        -:  852:      else{
        -:  853:	if (supplyCount(estate, state) > 0){
        -:  854:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  855:	  state->supplyCount[estate]--;//Decrement Estates
        -:  856:	  if (supplyCount(estate, state) == 0){
        -:  857:	    isGameOver(state);
        -:  858:	  }
        -:  859:	}
        -:  860:      }
        -:  861:
        -:  862:
        -:  863:      return 0;
        -:  864:
        -:  865:    case great_hall:
        -:  866:      //+1 Card
        -:  867:      drawCard(currentPlayer, state);
        -:  868:
        -:  869:      //+1 Actions
        -:  870:      state->numActions++;
        -:  871:
        -:  872:      //discard card from hand
        -:  873:      discardCard(handPos, currentPlayer, state, 0);
        -:  874:      return 0;
        -:  875:
        -:  876:    case minion:
        -:  877:      //+1 action
        -:  878:      state->numActions++;
        -:  879:
        -:  880:      //discard card from hand
        -:  881:      discardCard(handPos, currentPlayer, state, 0);
        -:  882:
        -:  883:      if (choice1)		//+2 coins
        -:  884:	{
        -:  885:	  state->coins = state->coins + 2;
        -:  886:	}
        -:  887:
        -:  888:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  889:	{
        -:  890:	  //discard hand
        -:  891:	  while(numHandCards(state) > 0)
        -:  892:	    {
        -:  893:	      discardCard(handPos, currentPlayer, state, 0);
        -:  894:	    }
        -:  895:
        -:  896:	  //draw 4
        -:  897:	  for (i = 0; i < 4; i++)
        -:  898:	    {
        -:  899:	      drawCard(currentPlayer, state);
        -:  900:	    }
        -:  901:
        -:  902:	  //other players discard hand and redraw if hand size > 4
        -:  903:	  for (i = 0; i < state->numPlayers; i++)
        -:  904:	    {
        -:  905:	      if (i != currentPlayer)
        -:  906:		{
        -:  907:		  if ( state->handCount[i] > 4 )
        -:  908:		    {
        -:  909:		      //discard hand
        -:  910:		      while( state->handCount[i] > 0 )
        -:  911:			{
        -:  912:			  discardCard(handPos, i, state, 0);
        -:  913:			}
        -:  914:
        -:  915:		      //draw 4
        -:  916:		      for (j = 0; j < 4; j++)
        -:  917:			{
        -:  918:			  drawCard(i, state);
        -:  919:			}
        -:  920:		    }
        -:  921:		}
        -:  922:	    }
        -:  923:
        -:  924:	}
        -:  925:      return 0;
        -:  926:
        -:  927:    case steward:
        -:  928:      if (choice1 == 1)
        -:  929:	{
        -:  930:	  //+2 cards
        -:  931:	  drawCard(currentPlayer, state);
        -:  932:	  drawCard(currentPlayer, state);
        -:  933:	}
        -:  934:      else if (choice1 == 2)
        -:  935:	{
        -:  936:	  //+2 coins
        -:  937:	  state->coins = state->coins + 2;
        -:  938:	}
        -:  939:      else
        -:  940:	{
        -:  941:	  //trash 2 cards in hand
        -:  942:	  discardCard(choice2, currentPlayer, state, 1);
        -:  943:	  discardCard(choice3, currentPlayer, state, 1);
        -:  944:	}
        -:  945:
        -:  946:      //discard card from hand
        -:  947:      discardCard(handPos, currentPlayer, state, 0);
        -:  948:      return 0;
        -:  949:
        -:  950:    case tribute:
        -:  951:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -:  952:	if (state->deckCount[nextPlayer] > 0){
        -:  953:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  954:	  state->deckCount[nextPlayer]--;
        -:  955:	}
        -:  956:	else if (state->discardCount[nextPlayer] > 0){
        -:  957:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -:  958:	  state->discardCount[nextPlayer]--;
        -:  959:	}
        -:  960:	else{
        -:  961:	  //No Card to Reveal
        -:  962:	  if (DEBUG){
        -:  963:	    printf("No cards to reveal\n");
        -:  964:	  }
        -:  965:	}
        -:  966:      }
        -:  967:
        -:  968:      else{
        -:  969:	if (state->deckCount[nextPlayer] == 0){
        -:  970:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -:  971:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -:  972:	    state->deckCount[nextPlayer]++;
        -:  973:	    state->discard[nextPlayer][i] = -1;
        -:  974:	    state->discardCount[nextPlayer]--;
        -:  975:	  }
        -:  976:
        -:  977:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  978:	}
        -:  979:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  980:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -:  981:	state->deckCount[nextPlayer]--;
        -:  982:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  983:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -:  984:	state->deckCount[nextPlayer]--;
        -:  985:      }
        -:  986:
        -:  987:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
        -:  988:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -:  989:	state->playedCardCount++;
        -:  990:	tributeRevealedCards[1] = -1;
        -:  991:      }
        -:  992:
        -:  993:      for (i = 0; i <= 2; i ++){
        -:  994:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -:  995:	  state->coins += 2;
        -:  996:	}
        -:  997:
        -:  998:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -:  999:	  drawCard(currentPlayer, state);
        -: 1000:	  drawCard(currentPlayer, state);
        -: 1001:	}
        -: 1002:	else{//Action Card
        -: 1003:	  state->numActions = state->numActions + 2;
        -: 1004:	}
        -: 1005:      }
        -: 1006:
        -: 1007:      return 0;
        -: 1008:
        -: 1009:    case ambassador:
        -: 1010:      j = 0;		//used to check if player has enough cards to discard
        -: 1011:
        -: 1012:      if (choice2 > 2 || choice2 < 0)
        -: 1013:	{
        -: 1014:	  return -1;
        -: 1015:	}
        -: 1016:
        -: 1017:      if (choice1 == handPos)
        -: 1018:	{
        -: 1019:	  return -1;
        -: 1020:	}
        -: 1021:
        -: 1022:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1023:	{
        -: 1024:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1025:	    {
        -: 1026:	      j++;
        -: 1027:	    }
        -: 1028:	}
        -: 1029:      if (j < choice2)
        -: 1030:	{
        -: 1031:	  return -1;
        -: 1032:	}
        -: 1033:
        -: 1034:      if (DEBUG)
        -: 1035:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1036:
        -: 1037:      //increase supply count for choosen card by amount being discarded
        -: 1038:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1039:
        -: 1040:      //each other player gains a copy of revealed card
        -: 1041:      for (i = 0; i < state->numPlayers; i++)
        -: 1042:	{
        -: 1043:	  if (i != currentPlayer)
        -: 1044:	    {
        -: 1045:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1046:	    }
        -: 1047:	}
        -: 1048:
        -: 1049:      //discard played card from hand
        -: 1050:      discardCard(handPos, currentPlayer, state, 0);
        -: 1051:
        -: 1052:      //trash copies of cards returned to supply
        -: 1053:      for (j = 0; j < choice2; j++)
        -: 1054:	{
        -: 1055:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1056:	    {
        -: 1057:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1058:		{
        -: 1059:		  discardCard(i, currentPlayer, state, 1);
        -: 1060:		  break;
        -: 1061:		}
        -: 1062:	    }
        -: 1063:	}
        -: 1064:
        -: 1065:      return 0;
        -: 1066:
        -: 1067:    case cutpurse:
        -: 1068:
        -: 1069:      updateCoins(currentPlayer, state, 2);
        -: 1070:      for (i = 0; i < state->numPlayers; i++)
        -: 1071:	{
        -: 1072:	  if (i != currentPlayer)
        -: 1073:	    {
        -: 1074:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1075:		{
        -: 1076:		  if (state->hand[i][j] == copper)
        -: 1077:		    {
        -: 1078:		      discardCard(j, i, state, 0);
        -: 1079:		      break;
        -: 1080:		    }
        -: 1081:		  if (j == state->handCount[i])
        -: 1082:		    {
        -: 1083:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1084:			{
        -: 1085:			  if (DEBUG)
        -: 1086:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1087:			}
        -: 1088:		      break;
        -: 1089:		    }
        -: 1090:		}
        -: 1091:
        -: 1092:	    }
        -: 1093:
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
        -: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      return 0;
        -: 1100:
        -: 1101:
        -: 1102:    case embargo:
        -: 1103:      //+2 Coins
        -: 1104:      state->coins = state->coins + 2;
        -: 1105:
        -: 1106:      //see if selected pile is in play
        -: 1107:      if ( state->supplyCount[choice1] == -1 )
        -: 1108:	{
        -: 1109:	  return -1;
        -: 1110:	}
        -: 1111:
        -: 1112:      //add embargo token to selected supply pile
        -: 1113:      state->embargoTokens[choice1]++;
        -: 1114:
        -: 1115:      //trash card
        -: 1116:      discardCard(handPos, currentPlayer, state, 1);
        -: 1117:      return 0;
        -: 1118:
        -: 1119:    case outpost:
        -: 1120:      outpostEffect( card, choice1, choice2, choice3, state, handPos, bonus );
        -: 1121:      return 0;
        -: 1122:
        -: 1123:    case salvager:
        -: 1124:      salvagerEffect( card, choice1, choice2, choice3, state, handPos, bonus );
        -: 1125:      return 0;
        -: 1126:
        -: 1127:    case sea_hag:
        -: 1128:      sea_hagEffect(card, choice1, choice2, choice3, state, handPos, bonus);
        -: 1129:      return 0;
        -: 1130:
        -: 1131:    case treasure_map:
        -: 1132:      //search hand for another treasure_map
        -: 1133:      index = -1;
        -: 1134:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:	{
        -: 1136:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1137:	    {
        -: 1138:	      index = i;
        -: 1139:	      break;
        -: 1140:	    }
        -: 1141:	}
        -: 1142:      if (index > -1)
        -: 1143:	{
        -: 1144:	  //trash both treasure cards
        -: 1145:	  discardCard(handPos, currentPlayer, state, 1);
        -: 1146:	  discardCard(index, currentPlayer, state, 1);
        -: 1147:
        -: 1148:	  //gain 4 Gold cards
        -: 1149:	  for (i = 0; i < 4; i++)
        -: 1150:	    {
        -: 1151:	      gainCard(gold, state, 1, currentPlayer);
        -: 1152:	    }
        -: 1153:
        -: 1154:	  //return success
        -: 1155:	  return 1;
        -: 1156:	}
        -: 1157:
        -: 1158:      //no second treasure_map found in hand
        -: 1159:      return -1;
        -: 1160:    }
        -: 1161:
        -: 1162:  return -1;
        -: 1163:}
        -: 1164:
        -: 1165:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1166:{
        -: 1167:
        -: 1168:  //if card is not trashed, added to Played pile
        -: 1169:  if (trashFlag < 1)
        -: 1170:    {
        -: 1171:      //add card to played pile
        -: 1172:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        -: 1173:      state->playedCardCount++;
        -: 1174:    }
        -: 1175:
        -: 1176:	//increment discardCount and add discarded card to discard pile.
        -: 1177:	state->discard[currentPlayer][state->discardCount[currentPlayer]]=state->hand[currentPlayer][handPos];
        -: 1178:	state->discardCount[currentPlayer]++;
        -: 1179:
        -: 1180:  //set played card to -1
        -: 1181:  state->hand[currentPlayer][handPos] = -1;
        -: 1182:
        -: 1183:  //remove card from player's hand
        -: 1184:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1185:    {
        -: 1186:      //reduce number of cards in hand
        -: 1187:      state->handCount[currentPlayer]--;
        -: 1188:    }
        -: 1189:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1190:    {
        -: 1191:      //reduce number of cards in hand
        -: 1192:      state->handCount[currentPlayer]--;
        -: 1193:    }
        -: 1194:  else
        -: 1195:    {
        -: 1196:      //replace discarded card with last card in hand
        -: 1197:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1198:      //set last card to -1
        -: 1199:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1200:      //reduce number of cards in hand
        -: 1201:      state->handCount[currentPlayer]--;
        -: 1202:    }
        -: 1203:
        -: 1204:  return 0;
        -: 1205:}
        -: 1206:
        -: 1207:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1208:{
        -: 1209:  //Note: supplyPos is enum of choosen card
        -: 1210:
        -: 1211:  //check if supply pile is empty (0) or card is not used in game (-1)
        -: 1212:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1213:    {
        -: 1214:      return -1;
        -: 1215:    }
        -: 1216:
        -: 1217:  //added card for [whoseTurn] current player:
        -: 1218:  // toFlag = 0 : add to discard
        -: 1219:  // toFlag = 1 : add to deck
        -: 1220:  // toFlag = 2 : add to hand
        -: 1221:
        -: 1222:  if (toFlag == 1)
        -: 1223:    {
        -: 1224:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        -: 1225:      state->deckCount[player]++;
        -: 1226:    }
        -: 1227:  else if (toFlag == 2)
        -: 1228:    {
        -: 1229:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        -: 1230:      state->handCount[player]++;
        -: 1231:    }
        -: 1232:  else
        -: 1233:    {
        -: 1234:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        -: 1235:      state->discardCount[player]++;
        -: 1236:    }
        -: 1237:
        -: 1238:  //decrease number in supply pile
        -: 1239:  state->supplyCount[supplyPos]--;
        -: 1240:
        -: 1241:  return 0;
        -: 1242:}
        -: 1243:
        -: 1244:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1245:{
        -: 1246:  int i;
        -: 1247:
        -: 1248:  //reset coin count
        -: 1249:  state->coins = 0;
        -: 1250:
        -: 1251:  //add coins for each Treasure card in player's hand
        -: 1252:  for (i = 0; i < state->handCount[player]; i++)
        -: 1253:    {
        -: 1254:      if (state->hand[player][i] == copper)
        -: 1255:	{
        -: 1256:	  state->coins += 1;
        -: 1257:	}
        -: 1258:      else if (state->hand[player][i] == silver)
        -: 1259:	{
        -: 1260:	  state->coins += 2;
        -: 1261:	}
        -: 1262:      else if (state->hand[player][i] == gold)
        -: 1263:	{
        -: 1264:	  state->coins += 3;
        -: 1265:	}
        -: 1266:    }
        -: 1267:
        -: 1268:  //add bonus
        -: 1269:  state->coins += bonus;
        -: 1270:
        -: 1271:  return 0;
        -: 1272:}
        -: 1273:
        -: 1274:void adventurerEffect( int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus ){
        -: 1275:
        -: 1276:        int drawntreasure = 0;
        -: 1277:        int z=0;
        -: 1278:        int currentPlayer = whoseTurn( state );
        -: 1279:        int temphand[MAX_HAND];
        -: 1280:        int cardDrawn;
        -: 1281:
        -: 1282:        while(drawntreasure<2){
        -: 1283:            if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -: 1284:                shuffle(currentPlayer, state);
        -: 1285:            }
        -: 1286:            drawCard(currentPlayer, state);
        -: 1287:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1288:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1289:              drawntreasure++;
        -: 1290:            else{
        -: 1291:              temphand[z]=cardDrawn;
        -: 1292:              state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1293:              z++;
        -: 1294:            }
        -: 1295:        }
        -: 1296:        while(z-1>=0){
        -: 1297:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -: 1298:            z=z-1;
        -: 1299:        }
        -: 1300:        discardCard(handPos, currentPlayer, state, 0); //put adventurer card in played card pile.
        -: 1301:}
        -: 1302:
        -: 1303:void outpostEffect( int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus ){
        -: 1304:    int currentPlayer = whoseTurn( state );
        -: 1305:
        -: 1306:    //set outpost flag
        -: 1307:    state->outpostPlayed++;
        -: 1308:
        -: 1309:    //discard card
        -: 1310:    discardCard(handPos, currentPlayer, state, 0);
        -: 1311:}
        -: 1312:
        -: 1313:void salvagerEffect( int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus ){
        -: 1314:
        -: 1315:    int currentPlayer = whoseTurn( state );
        -: 1316:
        -: 1317:    //+1 buy
        -: 1318:    state->numBuys++;
        -: 1319:
        -: 1320:    if (choice1){
        -: 1321:        //gain coins equal to trashed card
        -: 1322:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1323:	//remove selected card
        -: 1324:	discardCard(choice1,currentPlayer,state,0);
        -: 1325:	}
        -: 1326:
        -: 1327:    //discard card
        -: 1328:    discardCard(handPos, currentPlayer, state, 0);
        -: 1329:}
        -: 1330:
        -: 1331:void sea_hagEffect( int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus ){
        -: 1332:
        -: 1333:    int i;
        -: 1334:    int currentPlayer = whoseTurn( state );
        -: 1335:
        -: 1336:    for (i = 0; i < state->numPlayers; i++){
        -: 1337:        if (i != currentPlayer){
        -: 1338:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -: 1339:          state->deckCount[i]--;
        -: 1340:          state->discardCount[i]++;
        -: 1341:          state->deck[i][state->deckCount[i]--] = cutpurse;//Top card now a curse
        -: 1342:        }
        -: 1343:    }
        -: 1344:}
        -: 1345:
        -: 1346:void smithyEffect( int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus ){
        -: 1347:
        -: 1348:    int i;
        -: 1349:    int currentPlayer = whoseTurn( state );
        -: 1350:
        -: 1351:    //+3 Cards
        -: 1352:    for (i = 0; i < 3; i++)
        -: 1353:	{
        -: 1354:        drawCard(currentPlayer, state);
        -: 1355:	}
        -: 1356:
        -: 1357:    //discard card from hand
        -: 1358:    discardCard(handPos, currentPlayer, state, 0);
        -: 1359:}
        -: 1360://end of dominion.c
        -: 1361:
