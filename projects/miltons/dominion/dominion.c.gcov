        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/* instructor comments: file is updated. */
    #####:    9:int dummymethod()
        -:   10:{
    #####:   11:	return 0;
        -:   12:}
    78600:   13:int compare(const void* a, const void* b) {
    78600:   14:  if (*(int*)a > *(int*)b)
     9528:   15:    return 1;
    69072:   16:  if (*(int*)a < *(int*)b)
    25072:   17:    return -1;
    44000:   18:  return 0;
        -:   19:}
        -:   20:
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
     2000:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;
        -:   48:  //set up random number generator
     2000:   49:  SelectStream(1);
     2000:   50:  PutSeed((long)randomSeed);
        -:   51:
        -:   52:  //check number of players
     2000:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
     2000:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
    22000:   62:  for (i = 0; i < 10; i++)
        -:   63:    {
   220000:   64:      for (j = 0; j < 10; j++)
        -:   65:        {
   200000:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
     2000:   78:  if (numPlayers == 2)
        -:   79:    {
     2000:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
     2000:   92:  if (numPlayers == 2)
        -:   93:    {
     2000:   94:      state->supplyCount[estate] = 8;
     2000:   95:      state->supplyCount[duchy] = 8;
     2000:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
     2000:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  107:  state->supplyCount[silver] = 40;
     2000:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
    42000:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  112:    {
   330000:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  114:	{
   310000:  115:	  if (kingdomCards[j] == i)
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
    24000:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  119:		{
     4000:  120:		  if (numPlayers == 2){
     4000:  121:		    state->supplyCount[i] = 8;
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
    16000:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
    20000:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
   290000:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
     6000:  143:  for (i = 0; i < numPlayers; i++)
        -:  144:    {
     4000:  145:      state->deckCount[i] = 0;
    16000:  146:      for (j = 0; j < 3; j++)
        -:  147:	{
    12000:  148:	  state->deck[i][j] = estate;
    12000:  149:	  state->deckCount[i]++;
        -:  150:	}
    32000:  151:      for (j = 3; j < 10; j++)
        -:  152:	{
    28000:  153:	  state->deck[i][j] = copper;
    28000:  154:	  state->deckCount[i]++;
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
     6000:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {
     4000:  161:      if ( shuffle(i, state) < 0 )
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
     6000:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {
        -:  170:      //initialize hand size to zero
     4000:  171:      state->handCount[i] = 0;
     4000:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:
        -:  180:  //set embargo tokens to 0 for all supply piles
    56000:  181:  for (i = 0; i <= treasure_map; i++)
        -:  182:    {
    54000:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
     2000:  187:  state->outpostPlayed = 0;
     2000:  188:  state->phase = 0;
     2000:  189:  state->numActions = 1;
     2000:  190:  state->numBuys = 1;
     2000:  191:  state->playedCardCount = 0;
     2000:  192:  state->whoseTurn = 0;
     2000:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  197:  for (it = 0; it < 5; it++){
    10000:  198:    drawCard(state->whoseTurn, state);
        -:  199:  }
        -:  200:
     2000:  201:  updateCoins(state->whoseTurn, state, 0);
        -:  202:
     2000:  203:  return 0;
        -:  204:}
        -:  205:
     4020:  206:int shuffle(int player, struct gameState *state) {
        -:  207:
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
     4020:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
     4020:  214:  if (state->deckCount[player] < 1)
       10:  215:    return -1;
     4010:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
    50648:  219:  while (state->deckCount[player] > 0) {
    42628:  220:    card = floor(Random() * state->deckCount[player]);
    42628:  221:    newDeck[newDeckPos] = state->deck[player][card];
    42628:  222:    newDeckPos++;
   364457:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
   321829:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
    42628:  226:    state->deckCount[player]--;
        -:  227:  }
    46638:  228:  for (i = 0; i < newDeckPos; i++) {
    42628:  229:    state->deck[player][i] = newDeck[i];
    42628:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
     4010:  233:  return 0;
        -:  234:}
        -:  235:
    #####:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  237:{
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
        -:  255:
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:
    #####:  274:  return 0;
        -:  275:}
        -:  276:
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
    #####:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
    #####:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
    #####:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
    #####:  296:    if (DEBUG)
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:    state->numBuys--;
    #####:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:
    #####:  313:  return 0;
        -:  314:}
        -:  315:
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
    #####:  325:int supplyCount(int card, struct gameState *state) {
    #####:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
    #####:  351:int whoseTurn(struct gameState *state) {
    #####:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
        -:  359:
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:  //Code for determining the player
    #####:  368:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
    #####:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
    #####:  375:  state->outpostPlayed = 0;
    #####:  376:  state->phase = 0;
    #####:  377:  state->numActions = 1;
    #####:  378:  state->coins = 0;
    #####:  379:  state->numBuys = 1;
    #####:  380:  state->playedCardCount = 0;
    #####:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
    #####:  385:  for (k = 0; k < 5; k++){
    #####:  386:    drawCard(state->whoseTurn, state);//Draw a card
        -:  387:  }
        -:  388:
        -:  389:  //Update money
    #####:  390:  updateCoins(state->whoseTurn, state , 0);
        -:  391:
    #####:  392:  return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:
        -:  399:  //if stack of Province cards is empty, the game ends
    #####:  400:  if (state->supplyCount[province] == 0)
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
    #####:  406:  j = 0;
    #####:  407:  for (i = 0; i < 25; i++)
        -:  408:    {
    #####:  409:      if (state->supplyCount[i] == 0)
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
    #####:  414:  if ( j >= 3)
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
    14000:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
    14000:  533:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  534:
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
     2638:  538:    for (i = 0; i < state->discardCount[player];i++){
     2628:  539:      state->deck[player][i] = state->discard[player][i];
     2628:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
       10:  543:    state->deckCount[player] = state->discardCount[player];
       10:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
       10:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:
       10:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:
       10:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
       10:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:
       10:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:
       10:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
       10:  564:    if (deckCounter == 0)
    #####:  565:      return -1;
        -:  566:
       10:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  568:    state->deckCount[player]--;
       10:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
    13990:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
    13990:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
    13990:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
    13990:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13990:  581:    state->deckCount[player]--;
    13990:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
    14000:  585:  return 0;
        -:  586:}
        -:  587:
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber )
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo:
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:
    #####:  648:  return -1;
        -:  649:}
        -:  650:
    #####:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int index;
    #####:  657:  int currentPlayer = whoseTurn(state);
    #####:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
    #####:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
    #####:  664:  int z = 0;// this is the counter for the temp hand
    #####:  665:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  666:    nextPlayer = 0;
        -:  667:  }
        -:  668:
        -:  669:
        -:  670:  //uses switch to select card and perform actions
    #####:  671:  switch( card )
        -:  672:    {
        -:  673:    case adventurer: /*adventurer() function is located at bottom of this file. */
    #####:  674:      return adventurerEffect(currentPlayer, drawntreasure, temphand, state, cardDrawn, z);
        -:  675:
        -:  676:    case council_room:
    #####:  677:      return councilRoomEffect(currentPlayer, state, handPos);
        -:  678:
        -:  679:    case feast:
    #####:  680:      return feastEffect(currentPlayer, state, temphand, choice1);
        -:  681:
        -:  682:    case gardens:
    #####:  683:      return -1;
        -:  684:
        -:  685:    case mine:
    #####:  686:      return mineEffect(currentPlayer, state, handPos, choice1, choice2);
        -:  687:
        -:  688:    case remodel:
    #####:  689:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  690:
    #####:  691:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  692:	{
    #####:  693:	  return -1;
        -:  694:	}
        -:  695:
    #####:  696:      gainCard(choice2, state, 0, currentPlayer);
        -:  697:
        -:  698:      //discard card from hand
    #####:  699:      discardCard(handPos, currentPlayer, state, 0);
        -:  700:
        -:  701:      //discard trashed card
    #####:  702:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  703:	{
    #####:  704:	  if (state->hand[currentPlayer][i] == j)
        -:  705:	    {
    #####:  706:	      discardCard(i, currentPlayer, state, 0);
    #####:  707:	      break;
        -:  708:	    }
        -:  709:	}
        -:  710:
        -:  711:
    #####:  712:      return 0;
        -:  713:
        -:  714:    case smithy:
        -:  715:
    #####:  716:      return smithyEffect(currentPlayer, state, handPos); // see line 1230
        -:  717:
        -:  718:    case village:
        -:  719:      //+1 Card
    #####:  720:      drawCard(currentPlayer, state);
        -:  721:
        -:  722:      //+2 Actions
    #####:  723:      state->numActions = state->numActions + 2;
        -:  724:
        -:  725:      //discard played card from hand
    #####:  726:      discardCard(handPos, currentPlayer, state, 0);
    #####:  727:      return 0;
        -:  728:
        -:  729:    case baron:
    #####:  730:      state->numBuys++;//Increase buys by 1!
    #####:  731:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  732:	int p = 0;//Iterator for hand!
    #####:  733:	int card_not_discarded = 1;//Flag for discard set!
    #####:  734:	while(card_not_discarded){
    #####:  735:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  736:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  737:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  738:	    state->discardCount[currentPlayer]++;
    #####:  739:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  740:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  741:	    }
    #####:  742:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  743:	    state->handCount[currentPlayer]--;
    #####:  744:	    card_not_discarded = 0;//Exit the loop
        -:  745:	  }
    #####:  746:	  else if (p > state->handCount[currentPlayer]){
    #####:  747:	    if(DEBUG) {
        -:  748:	      printf("No estate cards in your hand, invalid choice\n");
        -:  749:	      printf("Must gain an estate if there are any\n");
        -:  750:	    }
    #####:  751:	    if (supplyCount(estate, state) > 0){
    #####:  752:	      gainCard(estate, state, 0, currentPlayer);
    #####:  753:	      state->supplyCount[estate]--;//Decrement estates
    #####:  754:	      if (supplyCount(estate, state) == 0){
    #####:  755:		isGameOver(state);
        -:  756:	      }
        -:  757:	    }
    #####:  758:	    card_not_discarded = 0;//Exit the loop
        -:  759:	  }
        -:  760:
        -:  761:	  else{
    #####:  762:	    p++;//Next card
        -:  763:	  }
        -:  764:	}
        -:  765:      }
        -:  766:
        -:  767:      else{
    #####:  768:	if (supplyCount(estate, state) > 0){
    #####:  769:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  770:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  771:	  if (supplyCount(estate, state) == 0){
    #####:  772:	    isGameOver(state);
        -:  773:	  }
        -:  774:	}
        -:  775:      }
        -:  776:
        -:  777:
    #####:  778:      return 0;
        -:  779:
        -:  780:    case great_hall:
        -:  781:      //+1 Card
    #####:  782:      drawCard(currentPlayer, state);
        -:  783:
        -:  784:      //+1 Actions
    #####:  785:      state->numActions++;
        -:  786:
        -:  787:      //discard card from hand
    #####:  788:      discardCard(handPos, currentPlayer, state, 0);
    #####:  789:      return 0;
        -:  790:
        -:  791:    case minion:
        -:  792:      //+1 action
    #####:  793:      state->numActions++;
        -:  794:
        -:  795:      //discard card from hand
    #####:  796:      discardCard(handPos, currentPlayer, state, 0);
        -:  797:
    #####:  798:      if (choice1)		//+2 coins
        -:  799:	{
    #####:  800:	  state->coins = state->coins + 2;
        -:  801:	}
        -:  802:
    #####:  803:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  804:	{
        -:  805:	  //discard hand
    #####:  806:	  while(numHandCards(state) > 0)
        -:  807:	    {
    #####:  808:	      discardCard(handPos, currentPlayer, state, 0);
        -:  809:	    }
        -:  810:
        -:  811:	  //draw 4
    #####:  812:	  for (i = 0; i < 4; i++)
        -:  813:	    {
    #####:  814:	      drawCard(currentPlayer, state);
        -:  815:	    }
        -:  816:
        -:  817:	  //other players discard hand and redraw if hand size > 4
    #####:  818:	  for (i = 0; i < state->numPlayers; i++)
        -:  819:	    {
    #####:  820:	      if (i != currentPlayer)
        -:  821:		{
    #####:  822:		  if ( state->handCount[i] > 4 )
        -:  823:		    {
        -:  824:		      //discard hand
    #####:  825:		      while( state->handCount[i] > 0 )
        -:  826:			{
    #####:  827:			  discardCard(handPos, i, state, 0);
        -:  828:			}
        -:  829:
        -:  830:		      //draw 4
    #####:  831:		      for (j = 0; j < 4; j++)
        -:  832:			{
    #####:  833:			  drawCard(i, state);
        -:  834:			}
        -:  835:		    }
        -:  836:		}
        -:  837:	    }
        -:  838:
        -:  839:	}
    #####:  840:      return 0;
        -:  841:
        -:  842:    case steward:
    #####:  843:      if (choice1 == 1)
        -:  844:	{
        -:  845:	  //+2 cards
    #####:  846:	  drawCard(currentPlayer, state);
    #####:  847:	  drawCard(currentPlayer, state);
        -:  848:	}
    #####:  849:      else if (choice1 == 2)
        -:  850:	{
        -:  851:	  //+2 coins
    #####:  852:	  state->coins = state->coins + 2;
        -:  853:	}
        -:  854:      else
        -:  855:	{
        -:  856:	  //trash 2 cards in hand
    #####:  857:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  858:	  discardCard(choice3, currentPlayer, state, 1);
        -:  859:	}
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
    #####:  863:      return 0;
        -:  864:
        -:  865:    case tribute:
    #####:  866:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  867:	if (state->deckCount[nextPlayer] > 0){
    #####:  868:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  869:	  state->deckCount[nextPlayer]--;
        -:  870:	}
    #####:  871:	else if (state->discardCount[nextPlayer] > 0){
    #####:  872:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  873:	  state->discardCount[nextPlayer]--;
        -:  874:	}
        -:  875:	else{
        -:  876:	  //No Card to Reveal
    #####:  877:	  if (DEBUG){
        -:  878:	    printf("No cards to reveal\n");
        -:  879:	  }
        -:  880:	}
        -:  881:      }
        -:  882:
        -:  883:      else{
    #####:  884:	if (state->deckCount[nextPlayer] == 0){
    #####:  885:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  886:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  887:	    state->deckCount[nextPlayer]++;
    #####:  888:	    state->discard[nextPlayer][i] = -1;
    #####:  889:	    state->discardCount[nextPlayer]--;
        -:  890:	  }
        -:  891:
    #####:  892:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  893:	}
    #####:  894:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
    #####:  897:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  898:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  899:	state->deckCount[nextPlayer]--;
        -:  900:      }
        -:  901:
    #####:  902:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  903:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  904:	state->playedCardCount++;
    #####:  905:	tributeRevealedCards[1] = -1;
        -:  906:      }
        -:  907:
    #####:  908:      for (i = 0; i <= 2; i ++){
    #####:  909:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  910:	  state->coins += 2;
        -:  911:	}
        -:  912:
    #####:  913:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  914:	  drawCard(currentPlayer, state);
    #####:  915:	  drawCard(currentPlayer, state);
        -:  916:	}
        -:  917:	else{//Action Card
    #####:  918:	  state->numActions = state->numActions + 2;
        -:  919:	}
        -:  920:      }
        -:  921:
    #####:  922:      return 0;
        -:  923:
        -:  924:    case ambassador:
    #####:  925:      j = 0;		//used to check if player has enough cards to discard
        -:  926:
    #####:  927:      if (choice2 > 2 || choice2 < 0)
        -:  928:	{
    #####:  929:	  return -1;
        -:  930:	}
        -:  931:
    #####:  932:      if (choice1 == handPos)
        -:  933:	{
    #####:  934:	  return -1;
        -:  935:	}
        -:  936:
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  938:	{
    #####:  939:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  940:	    {
    #####:  941:	      j++;
        -:  942:	    }
        -:  943:	}
    #####:  944:      if (j < choice2)
        -:  945:	{
    #####:  946:	  return -1;
        -:  947:	}
        -:  948:
    #####:  949:      if (DEBUG)
        -:  950:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  951:
        -:  952:      //increase supply count for choosen card by amount being discarded
    #####:  953:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  954:
        -:  955:      //each other player gains a copy of revealed card
    #####:  956:      for (i = 0; i < state->numPlayers; i++)
        -:  957:	{
    #####:  958:	  if (i != currentPlayer)
        -:  959:	    {
    #####:  960:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  961:	    }
        -:  962:	}
        -:  963:
        -:  964:      //discard played card from hand
    #####:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:
        -:  967:      //trash copies of cards returned to supply
    #####:  968:      for (j = 0; j < choice2; j++)
        -:  969:	{
    #####:  970:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  971:	    {
    #####:  972:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  973:		{
    #####:  974:		  discardCard(i, currentPlayer, state, 1);
    #####:  975:		  break;
        -:  976:		}
        -:  977:	    }
        -:  978:	}
        -:  979:
    #####:  980:      return 0;
        -:  981:
        -:  982:    case cutpurse:
        -:  983:
    #####:  984:      updateCoins(currentPlayer, state, 2);
    #####:  985:      for (i = 0; i < state->numPlayers; i++)
        -:  986:	{
    #####:  987:	  if (i != currentPlayer)
        -:  988:	    {
    #####:  989:	      for (j = 0; j < state->handCount[i]; j++)
        -:  990:		{
    #####:  991:		  if (state->hand[i][j] == copper)
        -:  992:		    {
    #####:  993:		      discardCard(j, i, state, 0);
    #####:  994:		      break;
        -:  995:		    }
    #####:  996:		  if (j == state->handCount[i])
        -:  997:		    {
    #####:  998:		      for (k = 0; k < state->handCount[i]; k++)
        -:  999:			{
    #####: 1000:			  if (DEBUG)
        -: 1001:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1002:			}
    #####: 1003:		      break;
        -: 1004:		    }
        -: 1005:		}
        -: 1006:
        -: 1007:	    }
        -: 1008:
        -: 1009:	}
        -: 1010:
        -: 1011:      //discard played card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);
        -: 1013:
    #####: 1014:      return 0;
        -: 1015:
        -: 1016:
        -: 1017:    case embargo:
        -: 1018:      //+2 Coins
    #####: 1019:      state->coins = state->coins + 2;
        -: 1020:
        -: 1021:      //see if selected pile is in play
    #####: 1022:      if ( state->supplyCount[choice1] == -1 )
        -: 1023:	{
    #####: 1024:	  return -1;
        -: 1025:	}
        -: 1026:
        -: 1027:      //add embargo token to selected supply pile
    #####: 1028:      state->embargoTokens[choice1]++;
        -: 1029:
        -: 1030:      //trash card
    #####: 1031:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1032:      return 0;
        -: 1033:
        -: 1034:    case outpost:
        -: 1035:      //set outpost flag
    #####: 1036:      state->outpostPlayed++;
        -: 1037:
        -: 1038:      //discard card
    #####: 1039:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1040:      return 0;
        -: 1041:
        -: 1042:    case salvager:
        -: 1043:      //+1 buy
    #####: 1044:      state->numBuys++;
        -: 1045:
    #####: 1046:      if (choice1)
        -: 1047:	{
        -: 1048:	  //gain coins equal to trashed card
    #####: 1049:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1050:	  //trash card
    #####: 1051:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1052:	}
        -: 1053:
        -: 1054:      //discard card
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1056:      return 0;
        -: 1057:
        -: 1058:    case sea_hag:
    #####: 1059:      for (i = 0; i < state->numPlayers; i++){
    #####: 1060:	if (i != currentPlayer){
    #####: 1061:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1062:	  state->discardCount[i]++;
    #####: 1063:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1064:	}
        -: 1065:      }
    #####: 1066:      return 0;
        -: 1067:
        -: 1068:    case treasure_map:
        -: 1069:      //search hand for another treasure_map
    #####: 1070:      index = -1;
    #####: 1071:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1072:	{
    #####: 1073:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1074:	    {
    #####: 1075:	      index = i;
    #####: 1076:	      break;
        -: 1077:	    }
        -: 1078:	}
    #####: 1079:      if (index > -1)
        -: 1080:	{
        -: 1081:	  //trash both treasure cards
    #####: 1082:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1083:	  discardCard(index, currentPlayer, state, 1);
        -: 1084:
        -: 1085:	  //gain 4 Gold cards
    #####: 1086:	  for (i = 0; i < 4; i++)
        -: 1087:	    {
    #####: 1088:	      gainCard(gold, state, 1, currentPlayer);
        -: 1089:	    }
        -: 1090:
        -: 1091:	  //return success
    #####: 1092:	  return 1;
        -: 1093:	}
        -: 1094:
        -: 1095:      //no second treasure_map found in hand
    #####: 1096:      return -1;
        -: 1097:    }
        -: 1098:
    #####: 1099:  return -1;
        -: 1100:}
        -: 1101:
    #####: 1102:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1103:{
        -: 1104:
        -: 1105:  //if card is not trashed, added to Played pile
    #####: 1106:  if (trashFlag < 1)
        -: 1107:    {
        -: 1108:      //add card to played pile
    #####: 1109:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1110:      state->playedCardCount++;
        -: 1111:    }
        -: 1112:
        -: 1113:  //set played card to -1
    #####: 1114:  state->hand[currentPlayer][handPos] = -1;
        -: 1115:
        -: 1116:  //remove card from player's hand
    #####: 1117:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1118:    {
        -: 1119:      //reduce number of cards in hand
    #####: 1120:      state->handCount[currentPlayer]--;
        -: 1121:    }
    #####: 1122:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1123:    {
        -: 1124:      //reduce number of cards in hand
    #####: 1125:      state->handCount[currentPlayer]--;
        -: 1126:    }
        -: 1127:  else
        -: 1128:    {
        -: 1129:      //replace discarded card with last card in hand
    #####: 1130:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1131:      //set last card to -1
    #####: 1132:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1133:      //reduce number of cards in hand
    #####: 1134:      state->handCount[currentPlayer]--;
        -: 1135:    }
        -: 1136:
    #####: 1137:  return 0;
        -: 1138:}
        -: 1139:
    #####: 1140:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1141:{
        -: 1142:  //Note: supplyPos is enum of choosen card
        -: 1143:
        -: 1144:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1145:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1146:    {
    #####: 1147:      return -1;
        -: 1148:    }
        -: 1149:
        -: 1150:  //added card for [whoseTurn] current player:
        -: 1151:  // toFlag = 0 : add to discard
        -: 1152:  // toFlag = 1 : add to deck
        -: 1153:  // toFlag = 2 : add to hand
        -: 1154:
    #####: 1155:  if (toFlag == 1)
        -: 1156:    {
    #####: 1157:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1158:      state->deckCount[player]++;
        -: 1159:    }
    #####: 1160:  else if (toFlag == 2)
        -: 1161:    {
    #####: 1162:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1163:      state->handCount[player]++;
        -: 1164:    }
        -: 1165:  else
        -: 1166:    {
    #####: 1167:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1168:      state->discardCount[player]++;
        -: 1169:    }
        -: 1170:
        -: 1171:  //decrease number in supply pile
    #####: 1172:  state->supplyCount[supplyPos]--;
        -: 1173:
    #####: 1174:  return 0;
        -: 1175:}
        -: 1176:
     2000: 1177:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1178:{
        -: 1179:  int i;
        -: 1180:
        -: 1181:  //reset coin count
     2000: 1182:  state->coins = 0;
        -: 1183:
        -: 1184:  //add coins for each Treasure card in player's hand
    12000: 1185:  for (i = 0; i < state->handCount[player]; i++)
        -: 1186:    {
    10000: 1187:      if (state->hand[player][i] == copper)
        -: 1188:	{
     8000: 1189:	  state->coins += 1;
        -: 1190:	}
     2000: 1191:      else if (state->hand[player][i] == silver)
        -: 1192:	{
    #####: 1193:	  state->coins += 2;
        -: 1194:	}
     2000: 1195:      else if (state->hand[player][i] == gold)
        -: 1196:	{
    #####: 1197:	  state->coins += 3;
        -: 1198:	}
        -: 1199:    }
        -: 1200:
        -: 1201:  //add bonus
     2000: 1202:  state->coins += bonus;
        -: 1203:
     2000: 1204:  return 0;
        -: 1205:}
        -: 1206:
     2000: 1207:int adventurerEffect(int currentPlayer, int drawntreasure, int temphand[MAX_HAND], struct gameState *state, int cardDrawn, int z)
        -: 1208:{
     8000: 1209:  while(drawntreasure<2){
     4000: 1210:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       10: 1211:      shuffle(currentPlayer, state);
        -: 1212:    }
     4000: 1213:    drawCard(currentPlayer, state);
     4000: 1214:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     4000: 1215:    if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
     4000: 1216:      drawntreasure++;
        -: 1217:    else{
        -: 1218:      temphand[z]=cardDrawn;
        -: 1219:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1220:      z++;
        -: 1221:    }
        -: 1222:  }
     4000: 1223:  while(z-1>=0){
    #####: 1224:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1225:    z=z-1;
        -: 1226:  }
     2000: 1227:  return 0;
        -: 1228:}
        -: 1229:
    #####: 1230:int smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -: 1231:{
        -: 1232:  int i;
        -: 1233:
        -: 1234:  //+3 Cards
    #####: 1235:  for (i = 0; i <= 3; i++)
        -: 1236:  {
    #####: 1237:	drawCard(currentPlayer, state); // drawCard on line 530
        -: 1238:  }
        -: 1239:
        -: 1240:  //discard card from hand
    #####: 1241:  discardCard(handPos, currentPlayer, state, 0); // discardCard on line 1102
    #####: 1242:  return 0;
        -: 1243:}
        -: 1244:
    #####: 1245:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -: 1246:{
        -: 1247:  int i;
        -: 1248:
        -: 1249:  //+4 Cards
    #####: 1250:  for (i = 0; i < 4; i++)
        -: 1251:  {
    #####: 1252:    drawCard(currentPlayer, state);
        -: 1253:  }
        -: 1254:
        -: 1255:  //+1 Buy
    #####: 1256:  state->numBuys++;
        -: 1257:
        -: 1258:  //Each other player draws a card
    #####: 1259:  for (i = 0; i < state->numPlayers; ++i)
        -: 1260:  {
    #####: 1261:    if ( i != currentPlayer )
        -: 1262:    {
    #####: 1263:      drawCard(i, state);
        -: 1264:    }
        -: 1265:  }
        -: 1266:
        -: 1267:  //put played card in played card pile
    #####: 1268:  discardCard(handPos, currentPlayer, state, 0);
        -: 1269:
    #####: 1270:  return 0;
        -: 1271:}
        -: 1272:
    #####: 1273:int feastEffect(int currentPlayer, struct gameState *state, int temphand[MAX_HAND], int choice1)
        -: 1274:{
        -: 1275:  int i;
        -: 1276:  int x;
        -: 1277:  //gain card with cost up to 5
        -: 1278:  //Backup hand
    #####: 1279:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1280:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1281:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1282:  }
        -: 1283:  //Backup hand
        -: 1284:
        -: 1285:  //Update Coins for Buy
    #####: 1286:  updateCoins(currentPlayer, state, 5);
    #####: 1287:  x = 1;//Condition to loop on
    #####: 1288:  while( x == 1) {//Buy one card
    #####: 1289:    if (supplyCount(choice1, state) <= 0){
    #####: 1290:      if (DEBUG)
        -: 1291:        printf("None of that card left, sorry!\n");
        -: 1292:
    #####: 1293:      if (DEBUG){
        -: 1294:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1295:      }
        -: 1296:    }
    #####: 1297:    else if (state->coins < getCost(choice1)){
    #####: 1298:      printf("That card is too expensive!\n");
        -: 1299:
    #####: 1300:      if (DEBUG){
        -: 1301:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1302:      }
        -: 1303:    }
        -: 1304:    else{
        -: 1305:
    #####: 1306:      if (DEBUG){
        -: 1307:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1308:      }
        -: 1309:
    #####: 1310:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1311:      x = 0;//No more buying cards
        -: 1312:
    #####: 1313:      if (DEBUG){
        -: 1314:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1315:      }
        -: 1316:
        -: 1317:    }
        -: 1318:  }
        -: 1319:
        -: 1320:  //Reset Hand
    #####: 1321:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1322:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1323:    temphand[i] = -1;
        -: 1324:  }
        -: 1325:  //Reset Hand
        -: 1326:
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
    #####: 1330:int mineEffect(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:  int j;
    #####: 1334:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1335:
    #####: 1336:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1337:  {
    #####: 1338:    return -1;
        -: 1339:  }
        -: 1340:
    #####: 1341:  if (choice2 > treasure_map && choice2 < curse)
        -: 1342:  {
    #####: 1343:    return -1;
        -: 1344:  }
        -: 1345:
    #####: 1346:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1347:  {
    #####: 1348:   return -1;
        -: 1349:  }
        -: 1350:
    #####: 1351:  gainCard(choice2, state, 2, currentPlayer);
        -: 1352:
        -: 1353:  //discard card from hand
    #####: 1354:  discardCard(handPos, currentPlayer, state, 0);
        -: 1355:
        -: 1356:  //discard trashed card
    #####: 1357:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1358:  {
    #####: 1359:    if (state->hand[currentPlayer][i] == j)
        -: 1360:    {
    #####: 1361:      discardCard(i, currentPlayer, state, 0);
    #####: 1362:      break;
        -: 1363:    }
        -: 1364:  }
        -: 1365:
    #####: 1366:  return 0;
        -: 1367:}
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
